function [1:0] not_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: not_lut = 2'b01;
    2'b01: not_lut = 2'b11;
    default: not_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] and_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: and_lut = 2'b11;
    4'b1101: and_lut = 2'b11;
    4'b0111: and_lut = 2'b11;
    4'b0101: and_lut = 2'b01;
    default: and_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] and3_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111111: and3_lut = 2'b11;
    6'b111101: and3_lut = 2'b11;
    6'b110111: and3_lut = 2'b11;
    6'b110101: and3_lut = 2'b11;
    6'b011111: and3_lut = 2'b11;
    6'b011101: and3_lut = 2'b11;
    6'b010111: and3_lut = 2'b11;
    6'b010101: and3_lut = 2'b01;
    default: and3_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] or_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: or_lut = 2'b11;
    4'b1101: or_lut = 2'b01;
    4'b0111: or_lut = 2'b01;
    4'b0101: or_lut = 2'b01;
    default: or_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] or3_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111111: or3_lut = 2'b11;
    6'b111101: or3_lut = 2'b01;
    6'b110111: or3_lut = 2'b01;
    6'b110101: or3_lut = 2'b01;
    6'b011111: or3_lut = 2'b01;
    6'b011101: or3_lut = 2'b01;
    6'b010111: or3_lut = 2'b01;
    6'b010101: or3_lut = 2'b01;
    default: or3_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] xor_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: xor_lut = 2'b11;
    4'b1101: xor_lut = 2'b01;
    4'b0111: xor_lut = 2'b01;
    4'b0101: xor_lut = 2'b11;
    default: xor_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] nand_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: nand_lut = 2'b01;
    4'b1101: nand_lut = 2'b01;
    4'b0111: nand_lut = 2'b01;
    4'b0101: nand_lut = 2'b11;
    default: nand_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] nand3_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111111: nand3_lut = 2'b01;
    6'b111101: nand3_lut = 2'b01;
    6'b110111: nand3_lut = 2'b01;
    6'b110101: nand3_lut = 2'b01;
    6'b011111: nand3_lut = 2'b01;
    6'b011101: nand3_lut = 2'b01;
    6'b010111: nand3_lut = 2'b01;
    6'b010101: nand3_lut = 2'b11;
    default: nand3_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] nor_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: nor_lut = 2'b01;
    4'b1101: nor_lut = 2'b11;
    4'b0111: nor_lut = 2'b11;
    4'b0101: nor_lut = 2'b11;
    default: nor_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] nor3_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111111: nor3_lut = 2'b01;
    6'b111101: nor3_lut = 2'b11;
    6'b110111: nor3_lut = 2'b11;
    6'b110101: nor3_lut = 2'b11;
    6'b011111: nor3_lut = 2'b11;
    6'b011101: nor3_lut = 2'b11;
    6'b010111: nor3_lut = 2'b11;
    6'b010101: nor3_lut = 2'b11;
    default: nor3_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] xnor_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: xnor_lut = 2'b01;
    4'b1101: xnor_lut = 2'b11;
    4'b0111: xnor_lut = 2'b11;
    4'b0101: xnor_lut = 2'b01;
    default: xnor_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] equal_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: equal_lut = 2'b01;
    4'b1100: equal_lut = 2'b11;
    4'b1101: equal_lut = 2'b11;
    4'b0011: equal_lut = 2'b11;
    4'b0000: equal_lut = 2'b01;
    4'b0001: equal_lut = 2'b11;
    4'b0111: equal_lut = 2'b11;
    4'b0100: equal_lut = 2'b11;
    4'b0101: equal_lut = 2'b01;
    default: equal_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isMin_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isMin_lut = 2'b01;
    2'b00: isMin_lut = 2'b11;
    2'b01: isMin_lut = 2'b11;
    default: isMin_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isNegative_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isNegative_lut = 2'b01;
    2'b00: isNegative_lut = 2'b11;
    2'b01: isNegative_lut = 2'b11;
    default: isNegative_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isOne_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isOne_lut = 2'b11;
    2'b00: isOne_lut = 2'b11;
    2'b01: isOne_lut = 2'b01;
    default: isOne_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isPositive_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isPositive_lut = 2'b11;
    2'b00: isPositive_lut = 2'b11;
    2'b01: isPositive_lut = 2'b01;
    default: isPositive_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isZero_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isZero_lut = 2'b11;
    2'b00: isZero_lut = 2'b01;
    2'b01: isZero_lut = 2'b11;
    default: isZero_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] notNegative_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: notNegative_lut = 2'b11;
    2'b00: notNegative_lut = 2'b01;
    2'b01: notNegative_lut = 2'b01;
    default: notNegative_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] notPositive_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: notPositive_lut = 2'b01;
    2'b00: notPositive_lut = 2'b01;
    2'b01: notPositive_lut = 2'b11;
    default: notPositive_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] notZero_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: notZero_lut = 2'b01;
    2'b00: notZero_lut = 2'b11;
    2'b01: notZero_lut = 2'b01;
    default: notZero_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] cmp_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: cmp_lut = 2'b00;
    4'b0011: cmp_lut = 2'b01;
    4'b0111: cmp_lut = 2'b01;
    4'b1100: cmp_lut = 2'b11;
    4'b0000: cmp_lut = 2'b00;
    4'b0100: cmp_lut = 2'b01;
    4'b1101: cmp_lut = 2'b11;
    4'b0001: cmp_lut = 2'b11;
    4'b0101: cmp_lut = 2'b00;
    default: cmp_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isLess_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isLess_lut = 2'b01;
    2'b00: isLess_lut = 2'b11;
    2'b01: isLess_lut = 2'b11;
    default: isLess_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isGreater_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isGreater_lut = 2'b11;
    2'b00: isGreater_lut = 2'b11;
    2'b01: isGreater_lut = 2'b01;
    default: isGreater_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] isEqual_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: isEqual_lut = 2'b11;
    2'b00: isEqual_lut = 2'b01;
    2'b01: isEqual_lut = 2'b11;
    default: isEqual_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] notLess_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: notLess_lut = 2'b11;
    2'b00: notLess_lut = 2'b01;
    2'b01: notLess_lut = 2'b01;
    default: notLess_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] notGreater_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: notGreater_lut = 2'b01;
    2'b00: notGreater_lut = 2'b01;
    2'b01: notGreater_lut = 2'b11;
    default: notGreater_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] notEqual_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: notEqual_lut = 2'b01;
    2'b00: notEqual_lut = 2'b11;
    2'b01: notEqual_lut = 2'b01;
    default: notEqual_lut = 2'b10;
    endcase
  end
endfunction

function [3:0] fullAdd_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111111: fullAdd_lut = 4'b0011;
    6'b111100: fullAdd_lut = 4'b0111;
    6'b111101: fullAdd_lut = 4'b1100;
    6'b110011: fullAdd_lut = 4'b0111;
    6'b110000: fullAdd_lut = 4'b1100;
    6'b110001: fullAdd_lut = 4'b0000;
    6'b110111: fullAdd_lut = 4'b1100;
    6'b110100: fullAdd_lut = 4'b0000;
    6'b110101: fullAdd_lut = 4'b0100;
    6'b001111: fullAdd_lut = 4'b0111;
    6'b001100: fullAdd_lut = 4'b1100;
    6'b001101: fullAdd_lut = 4'b0000;
    6'b000011: fullAdd_lut = 4'b1100;
    6'b000000: fullAdd_lut = 4'b0000;
    6'b000001: fullAdd_lut = 4'b0100;
    6'b000111: fullAdd_lut = 4'b0000;
    6'b000100: fullAdd_lut = 4'b0100;
    6'b000101: fullAdd_lut = 4'b1101;
    6'b011111: fullAdd_lut = 4'b1100;
    6'b011100: fullAdd_lut = 4'b0000;
    6'b011101: fullAdd_lut = 4'b0100;
    6'b010011: fullAdd_lut = 4'b0000;
    6'b010000: fullAdd_lut = 4'b0100;
    6'b010001: fullAdd_lut = 4'b1101;
    6'b010111: fullAdd_lut = 4'b0100;
    6'b010100: fullAdd_lut = 4'b1101;
    6'b010101: fullAdd_lut = 4'b0001;
    default: fullAdd_lut = 4'b1010;
    endcase
  end
endfunction

function [1:0] fullMul_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: fullMul_lut = 2'b01;
    4'b1100: fullMul_lut = 2'b00;
    4'b1101: fullMul_lut = 2'b11;
    4'b0011: fullMul_lut = 2'b00;
    4'b0000: fullMul_lut = 2'b00;
    4'b0001: fullMul_lut = 2'b00;
    4'b0111: fullMul_lut = 2'b11;
    4'b0100: fullMul_lut = 2'b00;
    4'b0101: fullMul_lut = 2'b01;
    default: fullMul_lut = 2'b10;
    endcase
  end
endfunction

function [3:0] halfAdd_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: halfAdd_lut = 4'b0111;
    4'b1100: halfAdd_lut = 4'b1100;
    4'b1101: halfAdd_lut = 4'b0000;
    4'b0011: halfAdd_lut = 4'b1100;
    4'b0000: halfAdd_lut = 4'b0000;
    4'b0001: halfAdd_lut = 4'b0100;
    4'b0111: halfAdd_lut = 4'b0000;
    4'b0100: halfAdd_lut = 4'b0100;
    4'b0101: halfAdd_lut = 4'b1101;
    default: halfAdd_lut = 4'b1010;
    endcase
  end
endfunction

function [1:0] neg_lut(
    input [1:0] p0
  );
  begin
    case ({p0})
    2'b11: neg_lut = 2'b01;
    2'b00: neg_lut = 2'b00;
    2'b01: neg_lut = 2'b11;
    default: neg_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] sign_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111111: sign_lut = 2'b11;
    6'b001111: sign_lut = 2'b11;
    6'b011111: sign_lut = 2'b11;
    6'b110011: sign_lut = 2'b11;
    6'b000011: sign_lut = 2'b11;
    6'b010011: sign_lut = 2'b11;
    6'b110111: sign_lut = 2'b11;
    6'b000111: sign_lut = 2'b11;
    6'b010111: sign_lut = 2'b11;
    6'b111100: sign_lut = 2'b11;
    6'b001100: sign_lut = 2'b11;
    6'b011100: sign_lut = 2'b11;
    6'b110000: sign_lut = 2'b11;
    6'b000000: sign_lut = 2'b00;
    6'b010000: sign_lut = 2'b01;
    6'b110100: sign_lut = 2'b01;
    6'b000100: sign_lut = 2'b01;
    6'b010100: sign_lut = 2'b01;
    6'b111101: sign_lut = 2'b01;
    6'b001101: sign_lut = 2'b01;
    6'b011101: sign_lut = 2'b01;
    6'b110001: sign_lut = 2'b01;
    6'b000001: sign_lut = 2'b01;
    6'b010001: sign_lut = 2'b01;
    6'b110101: sign_lut = 2'b01;
    6'b000101: sign_lut = 2'b01;
    6'b010101: sign_lut = 2'b01;
    default: sign_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] unequal_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: unequal_lut = 2'b11;
    4'b1100: unequal_lut = 2'b01;
    4'b1101: unequal_lut = 2'b01;
    4'b0011: unequal_lut = 2'b01;
    4'b0000: unequal_lut = 2'b11;
    4'b0001: unequal_lut = 2'b01;
    4'b0111: unequal_lut = 2'b01;
    4'b0100: unequal_lut = 2'b01;
    4'b0101: unequal_lut = 2'b11;
    default: unequal_lut = 2'b10;
    endcase
  end
endfunction

function [1:0] curl_lut(
    input [1:0] p0
  , input [1:0] p1
  );
  begin
    case ({p0, p1})
    4'b1111: curl_lut = 2'b01;
    4'b1100: curl_lut = 2'b00;
    4'b1101: curl_lut = 2'b11;
    4'b0011: curl_lut = 2'b01;
    4'b0000: curl_lut = 2'b11;
    4'b0001: curl_lut = 2'b00;
    4'b0111: curl_lut = 2'b11;
    4'b0100: curl_lut = 2'b01;
    4'b0101: curl_lut = 2'b00;
    default: curl_lut = 2'b10;
    endcase
  end
endfunction

function [3:0] binSum_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b000000: binSum_lut = 4'b0000;
    6'b000001: binSum_lut = 4'b0001;
    6'b000100: binSum_lut = 4'b0001;
    6'b000101: binSum_lut = 4'b0100;
    6'b010000: binSum_lut = 4'b0100;
    6'b010001: binSum_lut = 4'b0101;
    6'b010100: binSum_lut = 4'b0101;
    6'b010101: binSum_lut = 4'b1111;
    6'b111100: binSum_lut = 4'b1111;
    6'b111101: binSum_lut = 4'b1111;
    default: binSum_lut = 4'b1010;
    endcase
  end
endfunction

function [1:0] newCellState_lut(
    input [1:0] p0
  , input [1:0] p1
  , input [1:0] p2
  );
  begin
    case ({p0, p1, p2})
    6'b111100: newCellState_lut = 2'b00;
    6'b111101: newCellState_lut = 2'b00;
    6'b000000: newCellState_lut = 2'b00;
    6'b000001: newCellState_lut = 2'b00;
    6'b000100: newCellState_lut = 2'b00;
    6'b000101: newCellState_lut = 2'b00;
    6'b010000: newCellState_lut = 2'b00;
    6'b010001: newCellState_lut = 2'b01;
    6'b010100: newCellState_lut = 2'b01;
    6'b010101: newCellState_lut = 2'b01;
    default: newCellState_lut = 2'b10;
    endcase
  end
endfunction


function [1:0] all_1(
    input [1:0] val
  );
  begin
    all_1 = val;
  end
endfunction

function [1:0] equal_1(
    input [1:0] lhs
  , input [1:0] rhs
  );
  begin
    equal_1 = equal_lut(lhs, rhs);
  end
endfunction

function [1:0] cmp_1(
    input [1:0] lhs
  , input [1:0] rhs
  );
  begin
    cmp_1 = cmp_lut(lhs, rhs);
  end
endfunction

function [3:0] fullAdd_1(
    input [1:0] lhs
  , input [1:0] rhs
  , input [1:0] carry
  );
  begin
    fullAdd_1 = fullAdd_lut(lhs, rhs, carry);
  end
endfunction

function [3:0] fullMul_1(
    input [1:0] lhs
  , input [1:0] rhs
  );
  begin
    fullMul_1 = { fullMul_lut(lhs, rhs) : 2'b00 };
  end
endfunction

function [3:0] halfAdd_1(
    input [1:0] val
  , input [1:0] carry
  );
  begin
    halfAdd_1 = halfAdd_lut(val, carry);
  end
endfunction

function [1:0] neg_1(
    input [1:0] val
  );
  begin
    neg_1 = neg_lut(val);
  end
endfunction

function [1:0] sign_1(
    input [1:0] val
  );
  begin
    sign_1 = val;
  end
endfunction

function [1:0] unequal_1(
    input [1:0] lhs
  , input [1:0] rhs
  );
  begin
    unequal_1 = unequal_lut(lhs, rhs);
  end
endfunction

function [5:0] all_3(
    input [1:0] val
  );
  begin
    all_3 = { { all_1(val) : all_1(val) } : all_1(val) };
  end
endfunction

function [17:0] all_9(
    input [1:0] val
  );
  begin
    all_9 = { { all_3(val) : all_3(val) } : all_3(val) };
  end
endfunction

function [53:0] all_27(
    input [1:0] val
  );
  begin
    all_27 = { { all_9(val) : all_9(val) } : all_9(val) };
  end
endfunction

function [161:0] all_81(
    input [1:0] val
  );
  begin
    all_81 = { { all_27(val) : all_27(val) } : all_27(val) };
  end
endfunction

function [485:0] all_243(
    input [1:0] val
  );
  begin
    all_243 = { { all_81(val) : all_81(val) } : all_81(val) };
  end
endfunction

function [11:0] all_6(
    input [1:0] val
  );
  begin
    all_6 = { all_3(val) : all_3(val) };
  end
endfunction

function [35:0] all_18(
    input [1:0] val
  );
  begin
    all_18 = { all_9(val) : all_9(val) };
  end
endfunction

function [71:0] all_36(
    input [1:0] val
  );
  begin
    all_36 = { all_18(val) : all_18(val) };
  end
endfunction

function [107:0] all_54(
    input [1:0] val
  );
  begin
    all_54 = { all_27(val) : all_27(val) };
  end
endfunction

function [323:0] all_162(
    input [1:0] val
  );
  begin
    all_162 = { all_81(val) : all_81(val) };
  end
endfunction

function [1:0] as_1(
    input [1:0] val
  );
  begin
    as_1 = val;
  end
endfunction

function [5:0] as_3(
    input [5:0] val
  );
  begin
    as_3 = val;
  end
endfunction

function [17:0] as_9(
    input [17:0] val
  );
  begin
    as_9 = val;
  end
endfunction

function [53:0] as_27(
    input [53:0] val
  );
  begin
    as_27 = val;
  end
endfunction

function [161:0] as_81(
    input [161:0] val
  );
  begin
    as_81 = val;
  end
endfunction

function [485:0] as_243(
    input [485:0] val
  );
  begin
    as_243 = val;
  end
endfunction

function [11:0] as_6(
    input [11:0] val
  );
  begin
    as_6 = val;
  end
endfunction

function [35:0] as_18(
    input [35:0] val
  );
  begin
    as_18 = val;
  end
endfunction

function [71:0] as_36(
    input [71:0] val
  );
  begin
    as_36 = val;
  end
endfunction

function [107:0] as_54(
    input [107:0] val
  );
  begin
    as_54 = val;
  end
endfunction

function [323:0] as_162(
    input [323:0] val
  );
  begin
    as_162 = val;
  end
endfunction

function [1:0] break_1(
    input [1:0] val
  );
  begin
    break_1 = val;
  end
endfunction

function [5:0] break_3(
    input [5:0] val
  );
  begin
    break_3 = val;
  end
endfunction

function [17:0] break_9(
    input [17:0] val
  );
  begin
    break_9 = val;
  end
endfunction

function [53:0] break_27(
    input [53:0] val
  );
  begin
    break_27 = val;
  end
endfunction

function [161:0] break_81(
    input [161:0] val
  );
  begin
    break_81 = val;
  end
endfunction

function [485:0] break_243(
    input [485:0] val
  );
  begin
    break_243 = val;
  end
endfunction

function [11:0] break_6(
    input [11:0] val
  );
  begin
    break_6 = val;
  end
endfunction

function [35:0] break_18(
    input [35:0] val
  );
  begin
    break_18 = val;
  end
endfunction

function [71:0] break_36(
    input [71:0] val
  );
  begin
    break_36 = val;
  end
endfunction

function [107:0] break_54(
    input [107:0] val
  );
  begin
    break_54 = val;
  end
endfunction

function [323:0] break_162(
    input [323:0] val
  );
  begin
    break_162 = val;
  end
endfunction

function [971:0] break_486(
    input [971:0] val
  );
  begin
    break_486 = val;
  end
endfunction

function [1:0] equal_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  reg [1:0] eq2;
  
  begin
    eq0 = equal_1(lhs[1:0], rhs[1:0]);
    eq1 = equal_1(lhs[3:2], rhs[3:2]);
    eq2 = equal_1(lhs[5:4], rhs[5:4]);
    equal_3 = and3_lut(eq0, eq1, eq2);
  end
endfunction

function [1:0] equal_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  reg [1:0] eq2;
  
  begin
    eq0 = equal_3(lhs[5:0], rhs[5:0]);
    eq1 = equal_3(lhs[11:6], rhs[11:6]);
    eq2 = equal_3(lhs[17:12], rhs[17:12]);
    equal_9 = and3_lut(eq0, eq1, eq2);
  end
endfunction

function [1:0] equal_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  reg [1:0] eq2;
  
  begin
    eq0 = equal_9(lhs[17:0], rhs[17:0]);
    eq1 = equal_9(lhs[35:18], rhs[35:18]);
    eq2 = equal_9(lhs[53:36], rhs[53:36]);
    equal_27 = and3_lut(eq0, eq1, eq2);
  end
endfunction

function [1:0] equal_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  reg [1:0] eq2;
  
  begin
    eq0 = equal_27(lhs[53:0], rhs[53:0]);
    eq1 = equal_27(lhs[107:54], rhs[107:54]);
    eq2 = equal_27(lhs[161:108], rhs[161:108]);
    equal_81 = and3_lut(eq0, eq1, eq2);
  end
endfunction

function [1:0] equal_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  reg [1:0] eq2;
  
  begin
    eq0 = equal_81(lhs[161:0], rhs[161:0]);
    eq1 = equal_81(lhs[323:162], rhs[323:162]);
    eq2 = equal_81(lhs[485:324], rhs[485:324]);
    equal_243 = and3_lut(eq0, eq1, eq2);
  end
endfunction

function [1:0] equal_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  
  begin
    eq0 = equal_3(lhs[5:0], rhs[5:0]);
    eq1 = equal_3(lhs[11:6], rhs[11:6]);
    equal_6 = and_lut(eq0, eq1);
  end
endfunction

function [1:0] equal_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  
  begin
    eq0 = equal_9(lhs[17:0], rhs[17:0]);
    eq1 = equal_9(lhs[35:18], rhs[35:18]);
    equal_18 = and_lut(eq0, eq1);
  end
endfunction

function [1:0] equal_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  
  begin
    eq0 = equal_18(lhs[35:0], rhs[35:0]);
    eq1 = equal_18(lhs[71:36], rhs[71:36]);
    equal_36 = and_lut(eq0, eq1);
  end
endfunction

function [1:0] equal_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  
  begin
    eq0 = equal_27(lhs[53:0], rhs[53:0]);
    eq1 = equal_27(lhs[107:54], rhs[107:54]);
    equal_54 = and_lut(eq0, eq1);
  end
endfunction

function [1:0] equal_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [1:0] eq0;
  reg [1:0] eq1;
  
  begin
    eq0 = equal_81(lhs[161:0], rhs[161:0]);
    eq1 = equal_81(lhs[323:162], rhs[323:162]);
    equal_162 = and_lut(eq0, eq1);
  end
endfunction

function [5:0] lshift_3(
    input [5:0] val
  );
  begin
    lshift_3 = { val[5:2] : 2'b00 };
  end
endfunction

function [17:0] lshift_9(
    input [17:0] val
  );
  begin
    lshift_9 = { val[17:2] : 2'b00 };
  end
endfunction

function [53:0] lshift_27(
    input [53:0] val
  );
  begin
    lshift_27 = { val[53:2] : 2'b00 };
  end
endfunction

function [161:0] lshift_81(
    input [161:0] val
  );
  begin
    lshift_81 = { val[161:2] : 2'b00 };
  end
endfunction

function [485:0] lshift_243(
    input [485:0] val
  );
  begin
    lshift_243 = { val[485:2] : 2'b00 };
  end
endfunction

function [11:0] lshift_6(
    input [11:0] val
  );
  begin
    lshift_6 = { val[11:2] : 2'b00 };
  end
endfunction

function [35:0] lshift_18(
    input [35:0] val
  );
  begin
    lshift_18 = { val[35:2] : 2'b00 };
  end
endfunction

function [71:0] lshift_36(
    input [71:0] val
  );
  begin
    lshift_36 = { val[71:2] : 2'b00 };
  end
endfunction

function [107:0] lshift_54(
    input [107:0] val
  );
  begin
    lshift_54 = { val[107:2] : 2'b00 };
  end
endfunction

function [323:0] lshift_162(
    input [323:0] val
  );
  begin
    lshift_162 = { val[323:2] : 2'b00 };
  end
endfunction

function [971:0] lshift_486(
    input [971:0] val
  );
  begin
    lshift_486 = { val[971:2] : 2'b00 };
  end
endfunction

function [53:0] lshiftN_27(
    input [53:0] val
  , input [17:0] n
  );
  reg [17:0] nmin9;
  reg [1:0] sign;
  reg [1:0] neg;
  reg [1:0] pos;
  
  begin
    nmin9 = sub_9(n, 18'b000001000000000000);
    sign = sign_9(nmin9);
    neg = isNegative_lut(sign);
    pos = notNegative_lut(sign);
    lshiftN_27 = Qupla_merge_27(lshiftNpart2_27(pos == 2'b01 ? val : 54'b101010101010101010101010101010101010101010101010101010, pos == 2'b01 ? n : 18'b101010101010101010), lshiftN9_27(neg == 2'b01 ? val : 54'b101010101010101010101010101010101010101010101010101010, neg == 2'b01 ? nmin9 : 18'b101010101010101010, neg == 2'b01 ? sign : 2'b10));
  end
endfunction

function [53:0] lshiftNpart2_27(
    input [53:0] val
  , input [17:0] n
  );
  begin
    lshiftNpart2_27 = lshift_27(val);
  end
endfunction

function [53:0] lshiftN9_27(
    input [53:0] val
  , input [17:0] n
  , input [1:0] sign
  );
  reg [53:0] lshift9;
  reg [1:0] pos;
  
  begin
    lshift9 = { val[53:18] : as_9(18'b000000000000000000) };
    pos = isPositive_lut(sign);
    lshiftN9_27 = Qupla_merge_27(isZero_lut(sign) == 2'b01 ? lshift9 : 54'b101010101010101010101010101010101010101010101010101010, lshiftN_27(pos == 2'b01 ? lshift9 : 54'b101010101010101010101010101010101010101010101010101010, pos == 2'b01 ? n : 18'b101010101010101010));
  end
endfunction

function [161:0] lshiftN_81(
    input [161:0] val
  , input [17:0] n
  );
  reg [17:0] nmin9;
  reg [1:0] sign;
  reg [1:0] neg;
  reg [1:0] pos;
  
  begin
    nmin9 = sub_9(n, 18'b000001000000000000);
    sign = sign_9(nmin9);
    neg = isNegative_lut(sign);
    pos = notNegative_lut(sign);
    lshiftN_81 = Qupla_merge_81(lshiftNpart2_81(pos == 2'b01 ? val : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, pos == 2'b01 ? n : 18'b101010101010101010), lshiftN9_81(neg == 2'b01 ? val : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, neg == 2'b01 ? nmin9 : 18'b101010101010101010, neg == 2'b01 ? sign : 2'b10));
  end
endfunction

function [161:0] lshiftNpart2_81(
    input [161:0] val
  , input [17:0] n
  );
  begin
    lshiftNpart2_81 = lshift_81(val);
  end
endfunction

function [161:0] lshiftN9_81(
    input [161:0] val
  , input [17:0] n
  , input [1:0] sign
  );
  reg [161:0] lshift9;
  reg [1:0] pos;
  
  begin
    lshift9 = { val[161:18] : as_9(18'b000000000000000000) };
    pos = isPositive_lut(sign);
    lshiftN9_81 = Qupla_merge_81(isZero_lut(sign) == 2'b01 ? lshift9 : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, lshiftN_81(pos == 2'b01 ? lshift9 : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, pos == 2'b01 ? n : 18'b101010101010101010));
  end
endfunction

function [485:0] lshiftN_243(
    input [485:0] val
  , input [17:0] n
  );
  reg [17:0] nmin9;
  reg [1:0] sign;
  reg [1:0] neg;
  reg [1:0] pos;
  
  begin
    nmin9 = sub_9(n, 18'b000001000000000000);
    sign = sign_9(nmin9);
    neg = isNegative_lut(sign);
    pos = notNegative_lut(sign);
    lshiftN_243 = Qupla_merge_243(lshiftNpart2_243(pos == 2'b01 ? val : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, pos == 2'b01 ? n : 18'b101010101010101010), lshiftN9_243(neg == 2'b01 ? val : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, neg == 2'b01 ? nmin9 : 18'b101010101010101010, neg == 2'b01 ? sign : 2'b10));
  end
endfunction

function [485:0] lshiftNpart2_243(
    input [485:0] val
  , input [17:0] n
  );
  begin
    lshiftNpart2_243 = lshift_243(val);
  end
endfunction

function [485:0] lshiftN9_243(
    input [485:0] val
  , input [17:0] n
  , input [1:0] sign
  );
  reg [485:0] lshift9;
  reg [1:0] pos;
  
  begin
    lshift9 = { val[485:18] : as_9(18'b000000000000000000) };
    pos = isPositive_lut(sign);
    lshiftN9_243 = Qupla_merge_243(isZero_lut(sign) == 2'b01 ? lshift9 : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, lshiftN_243(pos == 2'b01 ? lshift9 : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, pos == 2'b01 ? n : 18'b101010101010101010));
  end
endfunction

function [1:0] abs_1(
    input [1:0] val
  );
  begin
    abs_1 = isNegative_lut(sign_1(val)) == 2'b01 ? neg_1(val) : val;
  end
endfunction

function [5:0] abs_3(
    input [5:0] val
  );
  begin
    abs_3 = isNegative_lut(sign_3(val)) == 2'b01 ? neg_3(val) : val;
  end
endfunction

function [17:0] abs_9(
    input [17:0] val
  );
  begin
    abs_9 = isNegative_lut(sign_9(val)) == 2'b01 ? neg_9(val) : val;
  end
endfunction

function [53:0] abs_27(
    input [53:0] val
  );
  begin
    abs_27 = isNegative_lut(sign_27(val)) == 2'b01 ? neg_27(val) : val;
  end
endfunction

function [161:0] abs_81(
    input [161:0] val
  );
  begin
    abs_81 = isNegative_lut(sign_81(val)) == 2'b01 ? neg_81(val) : val;
  end
endfunction

function [485:0] abs_243(
    input [485:0] val
  );
  begin
    abs_243 = isNegative_lut(sign_243(val)) == 2'b01 ? neg_243(val) : val;
  end
endfunction

function [11:0] abs_6(
    input [11:0] val
  );
  begin
    abs_6 = isNegative_lut(sign_6(val)) == 2'b01 ? neg_6(val) : val;
  end
endfunction

function [35:0] abs_18(
    input [35:0] val
  );
  begin
    abs_18 = isNegative_lut(sign_18(val)) == 2'b01 ? neg_18(val) : val;
  end
endfunction

function [71:0] abs_36(
    input [71:0] val
  );
  begin
    abs_36 = isNegative_lut(sign_36(val)) == 2'b01 ? neg_36(val) : val;
  end
endfunction

function [107:0] abs_54(
    input [107:0] val
  );
  begin
    abs_54 = isNegative_lut(sign_54(val)) == 2'b01 ? neg_54(val) : val;
  end
endfunction

function [323:0] abs_162(
    input [323:0] val
  );
  begin
    abs_162 = isNegative_lut(sign_162(val)) == 2'b01 ? neg_162(val) : val;
  end
endfunction

function [1:0] add_1(
    input [1:0] lhs
  , input [1:0] rhs
  );
  reg [3:0] sum;
  
  begin
    sum = fullAdd_1(lhs, rhs, 2'b00);
    add_1 = sum[1:0];
  end
endfunction

function [5:0] add_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [7:0] sum;
  
  begin
    sum = fullAdd_3(lhs, rhs, 2'b00);
    add_3 = sum[5:0];
  end
endfunction

function [17:0] add_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [19:0] sum;
  
  begin
    sum = fullAdd_9(lhs, rhs, 2'b00);
    add_9 = sum[17:0];
  end
endfunction

function [53:0] add_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [55:0] sum;
  
  begin
    sum = fullAdd_27(lhs, rhs, 2'b00);
    add_27 = sum[53:0];
  end
endfunction

function [161:0] add_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [163:0] sum;
  
  begin
    sum = fullAdd_81(lhs, rhs, 2'b00);
    add_81 = sum[161:0];
  end
endfunction

function [485:0] add_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [487:0] sum;
  
  begin
    sum = fullAdd_243(lhs, rhs, 2'b00);
    add_243 = sum[485:0];
  end
endfunction

function [11:0] add_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [13:0] sum;
  
  begin
    sum = fullAdd_6(lhs, rhs, 2'b00);
    add_6 = sum[11:0];
  end
endfunction

function [35:0] add_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [37:0] sum;
  
  begin
    sum = fullAdd_18(lhs, rhs, 2'b00);
    add_18 = sum[35:0];
  end
endfunction

function [71:0] add_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [73:0] sum;
  
  begin
    sum = fullAdd_36(lhs, rhs, 2'b00);
    add_36 = sum[71:0];
  end
endfunction

function [107:0] add_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [109:0] sum;
  
  begin
    sum = fullAdd_54(lhs, rhs, 2'b00);
    add_54 = sum[107:0];
  end
endfunction

function [323:0] add_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [325:0] sum;
  
  begin
    sum = fullAdd_162(lhs, rhs, 2'b00);
    add_162 = sum[323:0];
  end
endfunction

function [1:0] cmp_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  begin
    cmp_3 = sign_lut(cmp_1(lhs[1:0], rhs[1:0]), cmp_1(lhs[3:2], rhs[3:2]), cmp_1(lhs[5:4], rhs[5:4]));
  end
endfunction

function [1:0] cmp_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  begin
    cmp_9 = sign_lut(cmp_3(lhs[5:0], rhs[5:0]), cmp_3(lhs[11:6], rhs[11:6]), cmp_3(lhs[17:12], rhs[17:12]));
  end
endfunction

function [1:0] cmp_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  begin
    cmp_27 = sign_lut(cmp_9(lhs[17:0], rhs[17:0]), cmp_9(lhs[35:18], rhs[35:18]), cmp_9(lhs[53:36], rhs[53:36]));
  end
endfunction

function [1:0] cmp_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  begin
    cmp_81 = sign_lut(cmp_27(lhs[53:0], rhs[53:0]), cmp_27(lhs[107:54], rhs[107:54]), cmp_27(lhs[161:108], rhs[161:108]));
  end
endfunction

function [1:0] cmp_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  begin
    cmp_243 = sign_lut(cmp_81(lhs[161:0], rhs[161:0]), cmp_81(lhs[323:162], rhs[323:162]), cmp_81(lhs[485:324], rhs[485:324]));
  end
endfunction

function [1:0] cmp_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  begin
    cmp_6 = sign_lut(cmp_3(lhs[5:0], rhs[5:0]), cmp_3(lhs[11:6], rhs[11:6]), 2'b00);
  end
endfunction

function [1:0] cmp_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  begin
    cmp_18 = sign_lut(cmp_9(lhs[17:0], rhs[17:0]), cmp_9(lhs[35:18], rhs[35:18]), 2'b00);
  end
endfunction

function [1:0] cmp_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  begin
    cmp_36 = sign_lut(cmp_18(lhs[35:0], rhs[35:0]), cmp_18(lhs[71:36], rhs[71:36]), 2'b00);
  end
endfunction

function [1:0] cmp_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  begin
    cmp_54 = sign_lut(cmp_27(lhs[53:0], rhs[53:0]), cmp_27(lhs[107:54], rhs[107:54]), 2'b00);
  end
endfunction

function [1:0] cmp_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  begin
    cmp_162 = sign_lut(cmp_81(lhs[161:0], rhs[161:0]), cmp_81(lhs[323:162], rhs[323:162]), 2'b00);
  end
endfunction

function [1:0] decr_1(
    input [1:0] val
  );
  reg [3:0] halfSum;
  
  begin
    halfSum = halfAdd_1(val, 2'b11);
    decr_1 = halfSum[1:0];
  end
endfunction

function [5:0] decr_3(
    input [5:0] val
  );
  reg [7:0] halfSum;
  
  begin
    halfSum = halfAdd_3(val, 2'b11);
    decr_3 = halfSum[5:0];
  end
endfunction

function [17:0] decr_9(
    input [17:0] val
  );
  reg [19:0] halfSum;
  
  begin
    halfSum = halfAdd_9(val, 2'b11);
    decr_9 = halfSum[17:0];
  end
endfunction

function [53:0] decr_27(
    input [53:0] val
  );
  reg [55:0] halfSum;
  
  begin
    halfSum = halfAdd_27(val, 2'b11);
    decr_27 = halfSum[53:0];
  end
endfunction

function [161:0] decr_81(
    input [161:0] val
  );
  reg [163:0] halfSum;
  
  begin
    halfSum = halfAdd_81(val, 2'b11);
    decr_81 = halfSum[161:0];
  end
endfunction

function [485:0] decr_243(
    input [485:0] val
  );
  reg [487:0] halfSum;
  
  begin
    halfSum = halfAdd_243(val, 2'b11);
    decr_243 = halfSum[485:0];
  end
endfunction

function [11:0] decr_6(
    input [11:0] val
  );
  reg [13:0] halfSum;
  
  begin
    halfSum = halfAdd_6(val, 2'b11);
    decr_6 = halfSum[11:0];
  end
endfunction

function [35:0] decr_18(
    input [35:0] val
  );
  reg [37:0] halfSum;
  
  begin
    halfSum = halfAdd_18(val, 2'b11);
    decr_18 = halfSum[35:0];
  end
endfunction

function [71:0] decr_36(
    input [71:0] val
  );
  reg [73:0] halfSum;
  
  begin
    halfSum = halfAdd_36(val, 2'b11);
    decr_36 = halfSum[71:0];
  end
endfunction

function [107:0] decr_54(
    input [107:0] val
  );
  reg [109:0] halfSum;
  
  begin
    halfSum = halfAdd_54(val, 2'b11);
    decr_54 = halfSum[107:0];
  end
endfunction

function [323:0] decr_162(
    input [323:0] val
  );
  reg [325:0] halfSum;
  
  begin
    halfSum = halfAdd_162(val, 2'b11);
    decr_162 = halfSum[323:0];
  end
endfunction

function [5:0] div_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = divMod_3(lhs, rhs);
    div_3 = ret[5:0];
  end
endfunction

function [5:0] ceilDiv_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = ceilDivMod_3(lhs, rhs);
    ceilDiv_3 = ret[5:0];
  end
endfunction

function [5:0] floorDiv_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = floorDivMod_3(lhs, rhs);
    floorDiv_3 = ret[5:0];
  end
endfunction

function [5:0] roundDiv_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = roundDivMod_3(lhs, rhs);
    roundDiv_3 = ret[5:0];
  end
endfunction

function [17:0] div_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = divMod_9(lhs, rhs);
    div_9 = ret[17:0];
  end
endfunction

function [17:0] ceilDiv_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = ceilDivMod_9(lhs, rhs);
    ceilDiv_9 = ret[17:0];
  end
endfunction

function [17:0] floorDiv_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = floorDivMod_9(lhs, rhs);
    floorDiv_9 = ret[17:0];
  end
endfunction

function [17:0] roundDiv_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = roundDivMod_9(lhs, rhs);
    roundDiv_9 = ret[17:0];
  end
endfunction

function [53:0] div_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = divMod_27(lhs, rhs);
    div_27 = ret[53:0];
  end
endfunction

function [53:0] ceilDiv_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = ceilDivMod_27(lhs, rhs);
    ceilDiv_27 = ret[53:0];
  end
endfunction

function [53:0] floorDiv_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = floorDivMod_27(lhs, rhs);
    floorDiv_27 = ret[53:0];
  end
endfunction

function [53:0] roundDiv_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = roundDivMod_27(lhs, rhs);
    roundDiv_27 = ret[53:0];
  end
endfunction

function [161:0] div_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = divMod_81(lhs, rhs);
    div_81 = ret[161:0];
  end
endfunction

function [161:0] ceilDiv_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = ceilDivMod_81(lhs, rhs);
    ceilDiv_81 = ret[161:0];
  end
endfunction

function [161:0] floorDiv_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = floorDivMod_81(lhs, rhs);
    floorDiv_81 = ret[161:0];
  end
endfunction

function [161:0] roundDiv_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = roundDivMod_81(lhs, rhs);
    roundDiv_81 = ret[161:0];
  end
endfunction

function [11:0] div_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [23:0] ret;
  
  begin
    ret = divMod_6(lhs, rhs);
    div_6 = ret[11:0];
  end
endfunction

function [11:0] ceilDiv_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [23:0] ret;
  
  begin
    ret = ceilDivMod_6(lhs, rhs);
    ceilDiv_6 = ret[11:0];
  end
endfunction

function [11:0] floorDiv_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [23:0] ret;
  
  begin
    ret = floorDivMod_6(lhs, rhs);
    floorDiv_6 = ret[11:0];
  end
endfunction

function [11:0] roundDiv_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [23:0] ret;
  
  begin
    ret = roundDivMod_6(lhs, rhs);
    roundDiv_6 = ret[11:0];
  end
endfunction

function [35:0] div_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [71:0] ret;
  
  begin
    ret = divMod_18(lhs, rhs);
    div_18 = ret[35:0];
  end
endfunction

function [35:0] ceilDiv_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [71:0] ret;
  
  begin
    ret = ceilDivMod_18(lhs, rhs);
    ceilDiv_18 = ret[35:0];
  end
endfunction

function [35:0] floorDiv_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [71:0] ret;
  
  begin
    ret = floorDivMod_18(lhs, rhs);
    floorDiv_18 = ret[35:0];
  end
endfunction

function [35:0] roundDiv_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [71:0] ret;
  
  begin
    ret = roundDivMod_18(lhs, rhs);
    roundDiv_18 = ret[35:0];
  end
endfunction

function [71:0] div_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [143:0] ret;
  
  begin
    ret = divMod_36(lhs, rhs);
    div_36 = ret[71:0];
  end
endfunction

function [71:0] ceilDiv_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [143:0] ret;
  
  begin
    ret = ceilDivMod_36(lhs, rhs);
    ceilDiv_36 = ret[71:0];
  end
endfunction

function [71:0] floorDiv_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [143:0] ret;
  
  begin
    ret = floorDivMod_36(lhs, rhs);
    floorDiv_36 = ret[71:0];
  end
endfunction

function [71:0] roundDiv_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [143:0] ret;
  
  begin
    ret = roundDivMod_36(lhs, rhs);
    roundDiv_36 = ret[71:0];
  end
endfunction

function [215:0] div_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [431:0] ret;
  
  begin
    ret = divMod_108(lhs, rhs);
    div_108 = ret[215:0];
  end
endfunction

function [215:0] ceilDiv_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [431:0] ret;
  
  begin
    ret = ceilDivMod_108(lhs, rhs);
    ceilDiv_108 = ret[215:0];
  end
endfunction

function [215:0] floorDiv_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [431:0] ret;
  
  begin
    ret = floorDivMod_108(lhs, rhs);
    floorDiv_108 = ret[215:0];
  end
endfunction

function [215:0] roundDiv_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [431:0] ret;
  
  begin
    ret = roundDivMod_108(lhs, rhs);
    roundDiv_108 = ret[215:0];
  end
endfunction

function [107:0] div_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [215:0] ret;
  
  begin
    ret = divMod_54(lhs, rhs);
    div_54 = ret[107:0];
  end
endfunction

function [107:0] ceilDiv_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [215:0] ret;
  
  begin
    ret = ceilDivMod_54(lhs, rhs);
    ceilDiv_54 = ret[107:0];
  end
endfunction

function [107:0] floorDiv_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [215:0] ret;
  
  begin
    ret = floorDivMod_54(lhs, rhs);
    floorDiv_54 = ret[107:0];
  end
endfunction

function [107:0] roundDiv_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [215:0] ret;
  
  begin
    ret = roundDivMod_54(lhs, rhs);
    roundDiv_54 = ret[107:0];
  end
endfunction

function [323:0] div_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [647:0] ret;
  
  begin
    ret = divMod_162(lhs, rhs);
    div_162 = ret[323:0];
  end
endfunction

function [323:0] ceilDiv_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [647:0] ret;
  
  begin
    ret = ceilDivMod_162(lhs, rhs);
    ceilDiv_162 = ret[323:0];
  end
endfunction

function [323:0] floorDiv_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [647:0] ret;
  
  begin
    ret = floorDivMod_162(lhs, rhs);
    floorDiv_162 = ret[323:0];
  end
endfunction

function [323:0] roundDiv_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [647:0] ret;
  
  begin
    ret = roundDivMod_162(lhs, rhs);
    roundDiv_162 = ret[323:0];
  end
endfunction

function [485:0] div_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [971:0] ret;
  
  begin
    ret = divMod_243(lhs, rhs);
    div_243 = ret[485:0];
  end
endfunction

function [485:0] ceilDiv_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [971:0] ret;
  
  begin
    ret = ceilDivMod_243(lhs, rhs);
    ceilDiv_243 = ret[485:0];
  end
endfunction

function [485:0] floorDiv_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [971:0] ret;
  
  begin
    ret = floorDivMod_243(lhs, rhs);
    floorDiv_243 = ret[485:0];
  end
endfunction

function [485:0] roundDiv_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [971:0] ret;
  
  begin
    ret = roundDivMod_243(lhs, rhs);
    roundDiv_243 = ret[485:0];
  end
endfunction

function [11:0] divMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [5:0] absLhs;
  reg [5:0] absRhs;
  reg [11:0] quorem;
  reg [5:0] quo;
  reg [5:0] rem;
  reg [1:0] fix;
  reg [5:0] quo0;
  reg [5:0] rem0;
  
  begin
    absLhs = abs_3(lhs);
    absRhs = abs_3(rhs);
    quorem = roundDivModLoop_3(absLhs, 6'b000000, absRhs, 6'b010000);
    quo = quorem[5:0];
    rem = quorem[11:6];
    fix = isNegative_lut(sign_3(rem));
    quo0 = fix == 2'b01 ? decr_3(quo) : quo;
    rem0 = fix == 2'b01 ? add_3(rem, absRhs) : rem;
    divMod_3 = fixSign_3(lhs, rhs, quo0, rem0);
  end
endfunction

function [11:0] ceilDivMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [5:0] absLhs;
  reg [5:0] absRhs;
  reg [11:0] quorem;
  reg [5:0] quo;
  reg [5:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] up;
  reg [1:0] down;
  reg [1:0] none;
  reg [5:0] quoN0;
  reg [5:0] quoN1;
  reg [5:0] quoN2;
  reg [5:0] quo0;
  reg [5:0] remN0;
  reg [5:0] remN1;
  reg [5:0] remN2;
  reg [5:0] rem0;
  
  begin
    absLhs = abs_3(lhs);
    absRhs = abs_3(rhs);
    quorem = roundDivModLoop_3(absLhs, 6'b000000, absRhs, 6'b010000);
    quo = quorem[5:0];
    rem = quorem[11:6];
    lhsSign = sign_3(lhs);
    rhsSign = sign_3(rhs);
    remSign = sign_3(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    up = and_lut(not_lut(neg), isPositive_lut(remSign));
    down = and_lut(neg, isNegative_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 6'b101010;
    quoN1 = incr_3(up == 2'b01 ? quo : 6'b101010);
    quoN2 = decr_3(down == 2'b01 ? quo : 6'b101010);
    quo0 = Qupla_merge_3(Qupla_merge_3(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 6'b101010;
    remN1 = sub_3(up == 2'b01 ? rem : 6'b101010, absRhs);
    remN2 = add_3(down == 2'b01 ? rem : 6'b101010, absRhs);
    rem0 = Qupla_merge_3(Qupla_merge_3(remN0, remN1), remN2);
    ceilDivMod_3 = fixSign_3(lhs, rhs, quo0, rem0);
  end
endfunction

function [11:0] floorDivMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [5:0] absLhs;
  reg [5:0] absRhs;
  reg [11:0] quorem;
  reg [5:0] quo;
  reg [5:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] down;
  reg [1:0] up;
  reg [1:0] none;
  reg [5:0] quoN0;
  reg [5:0] quoN1;
  reg [5:0] quoN2;
  reg [5:0] quo0;
  reg [5:0] remN0;
  reg [5:0] remN1;
  reg [5:0] remN2;
  reg [5:0] rem0;
  
  begin
    absLhs = abs_3(lhs);
    absRhs = abs_3(rhs);
    quorem = roundDivModLoop_3(absLhs, 6'b000000, absRhs, 6'b010000);
    quo = quorem[5:0];
    rem = quorem[11:6];
    lhsSign = sign_3(lhs);
    rhsSign = sign_3(rhs);
    remSign = sign_3(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    down = and_lut(not_lut(neg), isNegative_lut(remSign));
    up = and_lut(neg, isPositive_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 6'b101010;
    quoN1 = incr_3(up == 2'b01 ? quo : 6'b101010);
    quoN2 = decr_3(down == 2'b01 ? quo : 6'b101010);
    quo0 = Qupla_merge_3(Qupla_merge_3(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 6'b101010;
    remN1 = sub_3(up == 2'b01 ? rem : 6'b101010, absRhs);
    remN2 = add_3(down == 2'b01 ? rem : 6'b101010, absRhs);
    rem0 = Qupla_merge_3(Qupla_merge_3(remN0, remN1), remN2);
    floorDivMod_3 = fixSign_3(lhs, rhs, quo0, rem0);
  end
endfunction

function [11:0] roundDivMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [5:0] absLhs;
  reg [5:0] absRhs;
  reg [11:0] quorem;
  reg [5:0] quo;
  reg [5:0] rem;
  
  begin
    absLhs = abs_3(lhs);
    absRhs = abs_3(rhs);
    quorem = roundDivModLoop_3(absLhs, 6'b000000, absRhs, 6'b010000);
    quo = quorem[5:0];
    rem = quorem[11:6];
    roundDivMod_3 = fixSign_3(lhs, rhs, quo, rem);
  end
endfunction

function [11:0] roundDivModLoop_3(
    input [5:0] quo
  , input [5:0] rem
  , input [5:0] div
  , input [5:0] shf
  );
  reg [5:0] newShf;
  reg [1:0] zero;
  reg [11:0] quorem;
  reg [5:0] quo1;
  reg [5:0] rem1;
  
  begin
    newShf = rshift_3(shf);
    zero = isZero_lut(sign_3(newShf));
    quorem = roundDivModPass_3(quo, rem, div);
    quo1 = quorem[5:0];
    rem1 = quorem[11:6];
    roundDivModLoop_3 = zero == 2'b01 ? quorem : roundDivModLoop_3(quo1, rem1, div, newShf);
  end
endfunction

function [11:0] roundDivModPass_3(
    input [5:0] quo
  , input [5:0] rem
  , input [5:0] div
  );
  reg [11:0] quorem;
  reg [5:0] quo0;
  reg [5:0] rem0;
  reg [1:0] remSign;
  reg [1:0] quoSign;
  reg [5:0] low;
  reg [5:0] neg1;
  reg [1:0] cmp1;
  reg [1:0] posRem;
  reg [1:0] posQuo;
  reg [1:0] test1;
  reg [5:0] high;
  reg [5:0] neg2;
  reg [1:0] cmp2;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [1:0] test2;
  reg [11:0] quorem1;
  reg [11:0] quorem2;
  
  begin
    quorem = rshift_6({ quo : rem });
    quo0 = quorem[5:0];
    rem0 = quorem[11:6];
    remSign = sign_3(rem0);
    quoSign = sign_3(quo0);
    low = sub_3(rem0, div);
    neg1 = neg_3(low);
    cmp1 = cmp_3(neg1, rem0);
    posRem = isPositive_lut(remSign);
    posQuo = isPositive_lut(quoSign);
    test1 = and_lut(posRem, or_lut(isLess_lut(cmp1), and_lut(isZero_lut(cmp1), posQuo)));
    high = add_3(rem0, div);
    neg2 = neg_3(high);
    cmp2 = cmp_3(neg2, rem0);
    negRem = isNegative_lut(remSign);
    negQuo = isNegative_lut(quoSign);
    test2 = and_lut(negRem, or_lut(isGreater_lut(cmp2), and_lut(isEqual_lut(cmp2), negQuo)));
    quorem1 = { incr_3(quo0) : low };
    quorem2 = { decr_3(quo0) : high };
    roundDivModPass_3 = test1 == 2'b01 ? quorem1 : test2 == 2'b01 ? quorem2 : quorem;
  end
endfunction

function [11:0] fixSign_3(
    input [5:0] lhs
  , input [5:0] rhs
  , input [5:0] quo
  , input [5:0] rem
  );
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [5:0] quo1;
  reg [5:0] rem1;
  
  begin
    lhsSign = sign_3(lhs);
    rhsSign = sign_3(rhs);
    negRem = isNegative_lut(lhsSign);
    negQuo = xor_lut(negRem, isNegative_lut(rhsSign));
    quo1 = negQuo == 2'b01 ? neg_3(quo) : quo;
    rem1 = negRem == 2'b01 ? neg_3(rem) : rem;
    fixSign_3 = { quo1 : rem1 };
  end
endfunction

function [35:0] divMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [17:0] absLhs;
  reg [17:0] absRhs;
  reg [35:0] quorem;
  reg [17:0] quo;
  reg [17:0] rem;
  reg [1:0] fix;
  reg [17:0] quo0;
  reg [17:0] rem0;
  
  begin
    absLhs = abs_9(lhs);
    absRhs = abs_9(rhs);
    quorem = roundDivModLoop_9(absLhs, 18'b000000000000000000, absRhs, 18'b010000000000000000);
    quo = quorem[17:0];
    rem = quorem[35:18];
    fix = isNegative_lut(sign_9(rem));
    quo0 = fix == 2'b01 ? decr_9(quo) : quo;
    rem0 = fix == 2'b01 ? add_9(rem, absRhs) : rem;
    divMod_9 = fixSign_9(lhs, rhs, quo0, rem0);
  end
endfunction

function [35:0] ceilDivMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [17:0] absLhs;
  reg [17:0] absRhs;
  reg [35:0] quorem;
  reg [17:0] quo;
  reg [17:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] up;
  reg [1:0] down;
  reg [1:0] none;
  reg [17:0] quoN0;
  reg [17:0] quoN1;
  reg [17:0] quoN2;
  reg [17:0] quo0;
  reg [17:0] remN0;
  reg [17:0] remN1;
  reg [17:0] remN2;
  reg [17:0] rem0;
  
  begin
    absLhs = abs_9(lhs);
    absRhs = abs_9(rhs);
    quorem = roundDivModLoop_9(absLhs, 18'b000000000000000000, absRhs, 18'b010000000000000000);
    quo = quorem[17:0];
    rem = quorem[35:18];
    lhsSign = sign_9(lhs);
    rhsSign = sign_9(rhs);
    remSign = sign_9(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    up = and_lut(not_lut(neg), isPositive_lut(remSign));
    down = and_lut(neg, isNegative_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 18'b101010101010101010;
    quoN1 = incr_9(up == 2'b01 ? quo : 18'b101010101010101010);
    quoN2 = decr_9(down == 2'b01 ? quo : 18'b101010101010101010);
    quo0 = Qupla_merge_9(Qupla_merge_9(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 18'b101010101010101010;
    remN1 = sub_9(up == 2'b01 ? rem : 18'b101010101010101010, absRhs);
    remN2 = add_9(down == 2'b01 ? rem : 18'b101010101010101010, absRhs);
    rem0 = Qupla_merge_9(Qupla_merge_9(remN0, remN1), remN2);
    ceilDivMod_9 = fixSign_9(lhs, rhs, quo0, rem0);
  end
endfunction

function [35:0] floorDivMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [17:0] absLhs;
  reg [17:0] absRhs;
  reg [35:0] quorem;
  reg [17:0] quo;
  reg [17:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] down;
  reg [1:0] up;
  reg [1:0] none;
  reg [17:0] quoN0;
  reg [17:0] quoN1;
  reg [17:0] quoN2;
  reg [17:0] quo0;
  reg [17:0] remN0;
  reg [17:0] remN1;
  reg [17:0] remN2;
  reg [17:0] rem0;
  
  begin
    absLhs = abs_9(lhs);
    absRhs = abs_9(rhs);
    quorem = roundDivModLoop_9(absLhs, 18'b000000000000000000, absRhs, 18'b010000000000000000);
    quo = quorem[17:0];
    rem = quorem[35:18];
    lhsSign = sign_9(lhs);
    rhsSign = sign_9(rhs);
    remSign = sign_9(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    down = and_lut(not_lut(neg), isNegative_lut(remSign));
    up = and_lut(neg, isPositive_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 18'b101010101010101010;
    quoN1 = incr_9(up == 2'b01 ? quo : 18'b101010101010101010);
    quoN2 = decr_9(down == 2'b01 ? quo : 18'b101010101010101010);
    quo0 = Qupla_merge_9(Qupla_merge_9(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 18'b101010101010101010;
    remN1 = sub_9(up == 2'b01 ? rem : 18'b101010101010101010, absRhs);
    remN2 = add_9(down == 2'b01 ? rem : 18'b101010101010101010, absRhs);
    rem0 = Qupla_merge_9(Qupla_merge_9(remN0, remN1), remN2);
    floorDivMod_9 = fixSign_9(lhs, rhs, quo0, rem0);
  end
endfunction

function [35:0] roundDivMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [17:0] absLhs;
  reg [17:0] absRhs;
  reg [35:0] quorem;
  reg [17:0] quo;
  reg [17:0] rem;
  
  begin
    absLhs = abs_9(lhs);
    absRhs = abs_9(rhs);
    quorem = roundDivModLoop_9(absLhs, 18'b000000000000000000, absRhs, 18'b010000000000000000);
    quo = quorem[17:0];
    rem = quorem[35:18];
    roundDivMod_9 = fixSign_9(lhs, rhs, quo, rem);
  end
endfunction

function [35:0] roundDivModLoop_9(
    input [17:0] quo
  , input [17:0] rem
  , input [17:0] div
  , input [17:0] shf
  );
  reg [17:0] newShf;
  reg [1:0] zero;
  reg [35:0] quorem;
  reg [17:0] quo1;
  reg [17:0] rem1;
  
  begin
    newShf = rshift_9(shf);
    zero = isZero_lut(sign_9(newShf));
    quorem = roundDivModPass_9(quo, rem, div);
    quo1 = quorem[17:0];
    rem1 = quorem[35:18];
    roundDivModLoop_9 = zero == 2'b01 ? quorem : roundDivModLoop_9(quo1, rem1, div, newShf);
  end
endfunction

function [35:0] roundDivModPass_9(
    input [17:0] quo
  , input [17:0] rem
  , input [17:0] div
  );
  reg [35:0] quorem;
  reg [17:0] quo0;
  reg [17:0] rem0;
  reg [1:0] remSign;
  reg [1:0] quoSign;
  reg [17:0] low;
  reg [17:0] neg1;
  reg [1:0] cmp1;
  reg [1:0] posRem;
  reg [1:0] posQuo;
  reg [1:0] test1;
  reg [17:0] high;
  reg [17:0] neg2;
  reg [1:0] cmp2;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [1:0] test2;
  reg [35:0] quorem1;
  reg [35:0] quorem2;
  
  begin
    quorem = rshift_18({ quo : rem });
    quo0 = quorem[17:0];
    rem0 = quorem[35:18];
    remSign = sign_9(rem0);
    quoSign = sign_9(quo0);
    low = sub_9(rem0, div);
    neg1 = neg_9(low);
    cmp1 = cmp_9(neg1, rem0);
    posRem = isPositive_lut(remSign);
    posQuo = isPositive_lut(quoSign);
    test1 = and_lut(posRem, or_lut(isLess_lut(cmp1), and_lut(isZero_lut(cmp1), posQuo)));
    high = add_9(rem0, div);
    neg2 = neg_9(high);
    cmp2 = cmp_9(neg2, rem0);
    negRem = isNegative_lut(remSign);
    negQuo = isNegative_lut(quoSign);
    test2 = and_lut(negRem, or_lut(isGreater_lut(cmp2), and_lut(isEqual_lut(cmp2), negQuo)));
    quorem1 = { incr_9(quo0) : low };
    quorem2 = { decr_9(quo0) : high };
    roundDivModPass_9 = test1 == 2'b01 ? quorem1 : test2 == 2'b01 ? quorem2 : quorem;
  end
endfunction

function [35:0] fixSign_9(
    input [17:0] lhs
  , input [17:0] rhs
  , input [17:0] quo
  , input [17:0] rem
  );
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [17:0] quo1;
  reg [17:0] rem1;
  
  begin
    lhsSign = sign_9(lhs);
    rhsSign = sign_9(rhs);
    negRem = isNegative_lut(lhsSign);
    negQuo = xor_lut(negRem, isNegative_lut(rhsSign));
    quo1 = negQuo == 2'b01 ? neg_9(quo) : quo;
    rem1 = negRem == 2'b01 ? neg_9(rem) : rem;
    fixSign_9 = { quo1 : rem1 };
  end
endfunction

function [107:0] divMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [53:0] absLhs;
  reg [53:0] absRhs;
  reg [107:0] quorem;
  reg [53:0] quo;
  reg [53:0] rem;
  reg [1:0] fix;
  reg [53:0] quo0;
  reg [53:0] rem0;
  
  begin
    absLhs = abs_27(lhs);
    absRhs = abs_27(rhs);
    quorem = roundDivModLoop_27(absLhs, 54'b000000000000000000000000000000000000000000000000000000, absRhs, 54'b010000000000000000000000000000000000000000000000000000);
    quo = quorem[53:0];
    rem = quorem[107:54];
    fix = isNegative_lut(sign_27(rem));
    quo0 = fix == 2'b01 ? decr_27(quo) : quo;
    rem0 = fix == 2'b01 ? add_27(rem, absRhs) : rem;
    divMod_27 = fixSign_27(lhs, rhs, quo0, rem0);
  end
endfunction

function [107:0] ceilDivMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [53:0] absLhs;
  reg [53:0] absRhs;
  reg [107:0] quorem;
  reg [53:0] quo;
  reg [53:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] up;
  reg [1:0] down;
  reg [1:0] none;
  reg [53:0] quoN0;
  reg [53:0] quoN1;
  reg [53:0] quoN2;
  reg [53:0] quo0;
  reg [53:0] remN0;
  reg [53:0] remN1;
  reg [53:0] remN2;
  reg [53:0] rem0;
  
  begin
    absLhs = abs_27(lhs);
    absRhs = abs_27(rhs);
    quorem = roundDivModLoop_27(absLhs, 54'b000000000000000000000000000000000000000000000000000000, absRhs, 54'b010000000000000000000000000000000000000000000000000000);
    quo = quorem[53:0];
    rem = quorem[107:54];
    lhsSign = sign_27(lhs);
    rhsSign = sign_27(rhs);
    remSign = sign_27(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    up = and_lut(not_lut(neg), isPositive_lut(remSign));
    down = and_lut(neg, isNegative_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 54'b101010101010101010101010101010101010101010101010101010;
    quoN1 = incr_27(up == 2'b01 ? quo : 54'b101010101010101010101010101010101010101010101010101010);
    quoN2 = decr_27(down == 2'b01 ? quo : 54'b101010101010101010101010101010101010101010101010101010);
    quo0 = Qupla_merge_27(Qupla_merge_27(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 54'b101010101010101010101010101010101010101010101010101010;
    remN1 = sub_27(up == 2'b01 ? rem : 54'b101010101010101010101010101010101010101010101010101010, absRhs);
    remN2 = add_27(down == 2'b01 ? rem : 54'b101010101010101010101010101010101010101010101010101010, absRhs);
    rem0 = Qupla_merge_27(Qupla_merge_27(remN0, remN1), remN2);
    ceilDivMod_27 = fixSign_27(lhs, rhs, quo0, rem0);
  end
endfunction

function [107:0] floorDivMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [53:0] absLhs;
  reg [53:0] absRhs;
  reg [107:0] quorem;
  reg [53:0] quo;
  reg [53:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] down;
  reg [1:0] up;
  reg [1:0] none;
  reg [53:0] quoN0;
  reg [53:0] quoN1;
  reg [53:0] quoN2;
  reg [53:0] quo0;
  reg [53:0] remN0;
  reg [53:0] remN1;
  reg [53:0] remN2;
  reg [53:0] rem0;
  
  begin
    absLhs = abs_27(lhs);
    absRhs = abs_27(rhs);
    quorem = roundDivModLoop_27(absLhs, 54'b000000000000000000000000000000000000000000000000000000, absRhs, 54'b010000000000000000000000000000000000000000000000000000);
    quo = quorem[53:0];
    rem = quorem[107:54];
    lhsSign = sign_27(lhs);
    rhsSign = sign_27(rhs);
    remSign = sign_27(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    down = and_lut(not_lut(neg), isNegative_lut(remSign));
    up = and_lut(neg, isPositive_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 54'b101010101010101010101010101010101010101010101010101010;
    quoN1 = incr_27(up == 2'b01 ? quo : 54'b101010101010101010101010101010101010101010101010101010);
    quoN2 = decr_27(down == 2'b01 ? quo : 54'b101010101010101010101010101010101010101010101010101010);
    quo0 = Qupla_merge_27(Qupla_merge_27(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 54'b101010101010101010101010101010101010101010101010101010;
    remN1 = sub_27(up == 2'b01 ? rem : 54'b101010101010101010101010101010101010101010101010101010, absRhs);
    remN2 = add_27(down == 2'b01 ? rem : 54'b101010101010101010101010101010101010101010101010101010, absRhs);
    rem0 = Qupla_merge_27(Qupla_merge_27(remN0, remN1), remN2);
    floorDivMod_27 = fixSign_27(lhs, rhs, quo0, rem0);
  end
endfunction

function [107:0] roundDivMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [53:0] absLhs;
  reg [53:0] absRhs;
  reg [107:0] quorem;
  reg [53:0] quo;
  reg [53:0] rem;
  
  begin
    absLhs = abs_27(lhs);
    absRhs = abs_27(rhs);
    quorem = roundDivModLoop_27(absLhs, 54'b000000000000000000000000000000000000000000000000000000, absRhs, 54'b010000000000000000000000000000000000000000000000000000);
    quo = quorem[53:0];
    rem = quorem[107:54];
    roundDivMod_27 = fixSign_27(lhs, rhs, quo, rem);
  end
endfunction

function [107:0] roundDivModLoop_27(
    input [53:0] quo
  , input [53:0] rem
  , input [53:0] div
  , input [53:0] shf
  );
  reg [53:0] newShf;
  reg [1:0] zero;
  reg [107:0] quorem;
  reg [53:0] quo1;
  reg [53:0] rem1;
  
  begin
    newShf = rshift_27(shf);
    zero = isZero_lut(sign_27(newShf));
    quorem = roundDivModPass_27(quo, rem, div);
    quo1 = quorem[53:0];
    rem1 = quorem[107:54];
    roundDivModLoop_27 = zero == 2'b01 ? quorem : roundDivModLoop_27(quo1, rem1, div, newShf);
  end
endfunction

function [107:0] roundDivModPass_27(
    input [53:0] quo
  , input [53:0] rem
  , input [53:0] div
  );
  reg [107:0] quorem;
  reg [53:0] quo0;
  reg [53:0] rem0;
  reg [1:0] remSign;
  reg [1:0] quoSign;
  reg [53:0] low;
  reg [53:0] neg1;
  reg [1:0] cmp1;
  reg [1:0] posRem;
  reg [1:0] posQuo;
  reg [1:0] test1;
  reg [53:0] high;
  reg [53:0] neg2;
  reg [1:0] cmp2;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [1:0] test2;
  reg [107:0] quorem1;
  reg [107:0] quorem2;
  
  begin
    quorem = rshift_54({ quo : rem });
    quo0 = quorem[53:0];
    rem0 = quorem[107:54];
    remSign = sign_27(rem0);
    quoSign = sign_27(quo0);
    low = sub_27(rem0, div);
    neg1 = neg_27(low);
    cmp1 = cmp_27(neg1, rem0);
    posRem = isPositive_lut(remSign);
    posQuo = isPositive_lut(quoSign);
    test1 = and_lut(posRem, or_lut(isLess_lut(cmp1), and_lut(isZero_lut(cmp1), posQuo)));
    high = add_27(rem0, div);
    neg2 = neg_27(high);
    cmp2 = cmp_27(neg2, rem0);
    negRem = isNegative_lut(remSign);
    negQuo = isNegative_lut(quoSign);
    test2 = and_lut(negRem, or_lut(isGreater_lut(cmp2), and_lut(isEqual_lut(cmp2), negQuo)));
    quorem1 = { incr_27(quo0) : low };
    quorem2 = { decr_27(quo0) : high };
    roundDivModPass_27 = test1 == 2'b01 ? quorem1 : test2 == 2'b01 ? quorem2 : quorem;
  end
endfunction

function [107:0] fixSign_27(
    input [53:0] lhs
  , input [53:0] rhs
  , input [53:0] quo
  , input [53:0] rem
  );
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [53:0] quo1;
  reg [53:0] rem1;
  
  begin
    lhsSign = sign_27(lhs);
    rhsSign = sign_27(rhs);
    negRem = isNegative_lut(lhsSign);
    negQuo = xor_lut(negRem, isNegative_lut(rhsSign));
    quo1 = negQuo == 2'b01 ? neg_27(quo) : quo;
    rem1 = negRem == 2'b01 ? neg_27(rem) : rem;
    fixSign_27 = { quo1 : rem1 };
  end
endfunction

function [323:0] divMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [161:0] absLhs;
  reg [161:0] absRhs;
  reg [323:0] quorem;
  reg [161:0] quo;
  reg [161:0] rem;
  reg [1:0] fix;
  reg [161:0] quo0;
  reg [161:0] rem0;
  
  begin
    absLhs = abs_81(lhs);
    absRhs = abs_81(rhs);
    quorem = roundDivModLoop_81(absLhs, 162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 162'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[161:0];
    rem = quorem[323:162];
    fix = isNegative_lut(sign_81(rem));
    quo0 = fix == 2'b01 ? decr_81(quo) : quo;
    rem0 = fix == 2'b01 ? add_81(rem, absRhs) : rem;
    divMod_81 = fixSign_81(lhs, rhs, quo0, rem0);
  end
endfunction

function [323:0] ceilDivMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [161:0] absLhs;
  reg [161:0] absRhs;
  reg [323:0] quorem;
  reg [161:0] quo;
  reg [161:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] up;
  reg [1:0] down;
  reg [1:0] none;
  reg [161:0] quoN0;
  reg [161:0] quoN1;
  reg [161:0] quoN2;
  reg [161:0] quo0;
  reg [161:0] remN0;
  reg [161:0] remN1;
  reg [161:0] remN2;
  reg [161:0] rem0;
  
  begin
    absLhs = abs_81(lhs);
    absRhs = abs_81(rhs);
    quorem = roundDivModLoop_81(absLhs, 162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 162'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[161:0];
    rem = quorem[323:162];
    lhsSign = sign_81(lhs);
    rhsSign = sign_81(rhs);
    remSign = sign_81(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    up = and_lut(not_lut(neg), isPositive_lut(remSign));
    down = and_lut(neg, isNegative_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    quoN1 = incr_81(up == 2'b01 ? quo : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quoN2 = decr_81(down == 2'b01 ? quo : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quo0 = Qupla_merge_81(Qupla_merge_81(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    remN1 = sub_81(up == 2'b01 ? rem : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    remN2 = add_81(down == 2'b01 ? rem : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    rem0 = Qupla_merge_81(Qupla_merge_81(remN0, remN1), remN2);
    ceilDivMod_81 = fixSign_81(lhs, rhs, quo0, rem0);
  end
endfunction

function [323:0] floorDivMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [161:0] absLhs;
  reg [161:0] absRhs;
  reg [323:0] quorem;
  reg [161:0] quo;
  reg [161:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] down;
  reg [1:0] up;
  reg [1:0] none;
  reg [161:0] quoN0;
  reg [161:0] quoN1;
  reg [161:0] quoN2;
  reg [161:0] quo0;
  reg [161:0] remN0;
  reg [161:0] remN1;
  reg [161:0] remN2;
  reg [161:0] rem0;
  
  begin
    absLhs = abs_81(lhs);
    absRhs = abs_81(rhs);
    quorem = roundDivModLoop_81(absLhs, 162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 162'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[161:0];
    rem = quorem[323:162];
    lhsSign = sign_81(lhs);
    rhsSign = sign_81(rhs);
    remSign = sign_81(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    down = and_lut(not_lut(neg), isNegative_lut(remSign));
    up = and_lut(neg, isPositive_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    quoN1 = incr_81(up == 2'b01 ? quo : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quoN2 = decr_81(down == 2'b01 ? quo : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quo0 = Qupla_merge_81(Qupla_merge_81(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    remN1 = sub_81(up == 2'b01 ? rem : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    remN2 = add_81(down == 2'b01 ? rem : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    rem0 = Qupla_merge_81(Qupla_merge_81(remN0, remN1), remN2);
    floorDivMod_81 = fixSign_81(lhs, rhs, quo0, rem0);
  end
endfunction

function [323:0] roundDivMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [161:0] absLhs;
  reg [161:0] absRhs;
  reg [323:0] quorem;
  reg [161:0] quo;
  reg [161:0] rem;
  
  begin
    absLhs = abs_81(lhs);
    absRhs = abs_81(rhs);
    quorem = roundDivModLoop_81(absLhs, 162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 162'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[161:0];
    rem = quorem[323:162];
    roundDivMod_81 = fixSign_81(lhs, rhs, quo, rem);
  end
endfunction

function [323:0] roundDivModLoop_81(
    input [161:0] quo
  , input [161:0] rem
  , input [161:0] div
  , input [161:0] shf
  );
  reg [161:0] newShf;
  reg [1:0] zero;
  reg [323:0] quorem;
  reg [161:0] quo1;
  reg [161:0] rem1;
  
  begin
    newShf = rshift_81(shf);
    zero = isZero_lut(sign_81(newShf));
    quorem = roundDivModPass_81(quo, rem, div);
    quo1 = quorem[161:0];
    rem1 = quorem[323:162];
    roundDivModLoop_81 = zero == 2'b01 ? quorem : roundDivModLoop_81(quo1, rem1, div, newShf);
  end
endfunction

function [323:0] roundDivModPass_81(
    input [161:0] quo
  , input [161:0] rem
  , input [161:0] div
  );
  reg [323:0] quorem;
  reg [161:0] quo0;
  reg [161:0] rem0;
  reg [1:0] remSign;
  reg [1:0] quoSign;
  reg [161:0] low;
  reg [161:0] neg1;
  reg [1:0] cmp1;
  reg [1:0] posRem;
  reg [1:0] posQuo;
  reg [1:0] test1;
  reg [161:0] high;
  reg [161:0] neg2;
  reg [1:0] cmp2;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [1:0] test2;
  reg [323:0] quorem1;
  reg [323:0] quorem2;
  
  begin
    quorem = rshift_162({ quo : rem });
    quo0 = quorem[161:0];
    rem0 = quorem[323:162];
    remSign = sign_81(rem0);
    quoSign = sign_81(quo0);
    low = sub_81(rem0, div);
    neg1 = neg_81(low);
    cmp1 = cmp_81(neg1, rem0);
    posRem = isPositive_lut(remSign);
    posQuo = isPositive_lut(quoSign);
    test1 = and_lut(posRem, or_lut(isLess_lut(cmp1), and_lut(isZero_lut(cmp1), posQuo)));
    high = add_81(rem0, div);
    neg2 = neg_81(high);
    cmp2 = cmp_81(neg2, rem0);
    negRem = isNegative_lut(remSign);
    negQuo = isNegative_lut(quoSign);
    test2 = and_lut(negRem, or_lut(isGreater_lut(cmp2), and_lut(isEqual_lut(cmp2), negQuo)));
    quorem1 = { incr_81(quo0) : low };
    quorem2 = { decr_81(quo0) : high };
    roundDivModPass_81 = test1 == 2'b01 ? quorem1 : test2 == 2'b01 ? quorem2 : quorem;
  end
endfunction

function [323:0] fixSign_81(
    input [161:0] lhs
  , input [161:0] rhs
  , input [161:0] quo
  , input [161:0] rem
  );
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [161:0] quo1;
  reg [161:0] rem1;
  
  begin
    lhsSign = sign_81(lhs);
    rhsSign = sign_81(rhs);
    negRem = isNegative_lut(lhsSign);
    negQuo = xor_lut(negRem, isNegative_lut(rhsSign));
    quo1 = negQuo == 2'b01 ? neg_81(quo) : quo;
    rem1 = negRem == 2'b01 ? neg_81(rem) : rem;
    fixSign_81 = { quo1 : rem1 };
  end
endfunction

function [971:0] divMod_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [485:0] absLhs;
  reg [485:0] absRhs;
  reg [971:0] quorem;
  reg [485:0] quo;
  reg [485:0] rem;
  reg [1:0] fix;
  reg [485:0] quo0;
  reg [485:0] rem0;
  
  begin
    absLhs = abs_243(lhs);
    absRhs = abs_243(rhs);
    quorem = roundDivModLoop_243(absLhs, 486'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 486'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[485:0];
    rem = quorem[971:486];
    fix = isNegative_lut(sign_243(rem));
    quo0 = fix == 2'b01 ? decr_243(quo) : quo;
    rem0 = fix == 2'b01 ? add_243(rem, absRhs) : rem;
    divMod_243 = fixSign_243(lhs, rhs, quo0, rem0);
  end
endfunction

function [971:0] ceilDivMod_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [485:0] absLhs;
  reg [485:0] absRhs;
  reg [971:0] quorem;
  reg [485:0] quo;
  reg [485:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] up;
  reg [1:0] down;
  reg [1:0] none;
  reg [485:0] quoN0;
  reg [485:0] quoN1;
  reg [485:0] quoN2;
  reg [485:0] quo0;
  reg [485:0] remN0;
  reg [485:0] remN1;
  reg [485:0] remN2;
  reg [485:0] rem0;
  
  begin
    absLhs = abs_243(lhs);
    absRhs = abs_243(rhs);
    quorem = roundDivModLoop_243(absLhs, 486'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 486'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[485:0];
    rem = quorem[971:486];
    lhsSign = sign_243(lhs);
    rhsSign = sign_243(rhs);
    remSign = sign_243(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    up = and_lut(not_lut(neg), isPositive_lut(remSign));
    down = and_lut(neg, isNegative_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    quoN1 = incr_243(up == 2'b01 ? quo : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quoN2 = decr_243(down == 2'b01 ? quo : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quo0 = Qupla_merge_243(Qupla_merge_243(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    remN1 = sub_243(up == 2'b01 ? rem : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    remN2 = add_243(down == 2'b01 ? rem : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    rem0 = Qupla_merge_243(Qupla_merge_243(remN0, remN1), remN2);
    ceilDivMod_243 = fixSign_243(lhs, rhs, quo0, rem0);
  end
endfunction

function [971:0] floorDivMod_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [485:0] absLhs;
  reg [485:0] absRhs;
  reg [971:0] quorem;
  reg [485:0] quo;
  reg [485:0] rem;
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] remSign;
  reg [1:0] neg;
  reg [1:0] down;
  reg [1:0] up;
  reg [1:0] none;
  reg [485:0] quoN0;
  reg [485:0] quoN1;
  reg [485:0] quoN2;
  reg [485:0] quo0;
  reg [485:0] remN0;
  reg [485:0] remN1;
  reg [485:0] remN2;
  reg [485:0] rem0;
  
  begin
    absLhs = abs_243(lhs);
    absRhs = abs_243(rhs);
    quorem = roundDivModLoop_243(absLhs, 486'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 486'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[485:0];
    rem = quorem[971:486];
    lhsSign = sign_243(lhs);
    rhsSign = sign_243(rhs);
    remSign = sign_243(rem);
    neg = xor_lut(isNegative_lut(lhsSign), isNegative_lut(rhsSign));
    down = and_lut(not_lut(neg), isNegative_lut(remSign));
    up = and_lut(neg, isPositive_lut(remSign));
    none = nor_lut(up, down);
    quoN0 = none == 2'b01 ? quo : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    quoN1 = incr_243(up == 2'b01 ? quo : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quoN2 = decr_243(down == 2'b01 ? quo : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
    quo0 = Qupla_merge_243(Qupla_merge_243(quoN0, quoN1), quoN2);
    remN0 = none == 2'b01 ? rem : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    remN1 = sub_243(up == 2'b01 ? rem : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    remN2 = add_243(down == 2'b01 ? rem : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, absRhs);
    rem0 = Qupla_merge_243(Qupla_merge_243(remN0, remN1), remN2);
    floorDivMod_243 = fixSign_243(lhs, rhs, quo0, rem0);
  end
endfunction

function [971:0] roundDivMod_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [485:0] absLhs;
  reg [485:0] absRhs;
  reg [971:0] quorem;
  reg [485:0] quo;
  reg [485:0] rem;
  
  begin
    absLhs = abs_243(lhs);
    absRhs = abs_243(rhs);
    quorem = roundDivModLoop_243(absLhs, 486'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, absRhs, 486'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quo = quorem[485:0];
    rem = quorem[971:486];
    roundDivMod_243 = fixSign_243(lhs, rhs, quo, rem);
  end
endfunction

function [971:0] roundDivModLoop_243(
    input [485:0] quo
  , input [485:0] rem
  , input [485:0] div
  , input [485:0] shf
  );
  reg [485:0] newShf;
  reg [1:0] zero;
  reg [971:0] quorem;
  reg [485:0] quo1;
  reg [485:0] rem1;
  
  begin
    newShf = rshift_243(shf);
    zero = isZero_lut(sign_243(newShf));
    quorem = roundDivModPass_243(quo, rem, div);
    quo1 = quorem[485:0];
    rem1 = quorem[971:486];
    roundDivModLoop_243 = zero == 2'b01 ? quorem : roundDivModLoop_243(quo1, rem1, div, newShf);
  end
endfunction

function [971:0] roundDivModPass_243(
    input [485:0] quo
  , input [485:0] rem
  , input [485:0] div
  );
  reg [971:0] quorem;
  reg [485:0] quo0;
  reg [485:0] rem0;
  reg [1:0] remSign;
  reg [1:0] quoSign;
  reg [485:0] low;
  reg [485:0] neg1;
  reg [1:0] cmp1;
  reg [1:0] posRem;
  reg [1:0] posQuo;
  reg [1:0] test1;
  reg [485:0] high;
  reg [485:0] neg2;
  reg [1:0] cmp2;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [1:0] test2;
  reg [971:0] quorem1;
  reg [971:0] quorem2;
  
  begin
    quorem = rshift_486({ quo : rem });
    quo0 = quorem[485:0];
    rem0 = quorem[971:486];
    remSign = sign_243(rem0);
    quoSign = sign_243(quo0);
    low = sub_243(rem0, div);
    neg1 = neg_243(low);
    cmp1 = cmp_243(neg1, rem0);
    posRem = isPositive_lut(remSign);
    posQuo = isPositive_lut(quoSign);
    test1 = and_lut(posRem, or_lut(isLess_lut(cmp1), and_lut(isZero_lut(cmp1), posQuo)));
    high = add_243(rem0, div);
    neg2 = neg_243(high);
    cmp2 = cmp_243(neg2, rem0);
    negRem = isNegative_lut(remSign);
    negQuo = isNegative_lut(quoSign);
    test2 = and_lut(negRem, or_lut(isGreater_lut(cmp2), and_lut(isEqual_lut(cmp2), negQuo)));
    quorem1 = { incr_243(quo0) : low };
    quorem2 = { decr_243(quo0) : high };
    roundDivModPass_243 = test1 == 2'b01 ? quorem1 : test2 == 2'b01 ? quorem2 : quorem;
  end
endfunction

function [971:0] fixSign_243(
    input [485:0] lhs
  , input [485:0] rhs
  , input [485:0] quo
  , input [485:0] rem
  );
  reg [1:0] lhsSign;
  reg [1:0] rhsSign;
  reg [1:0] negRem;
  reg [1:0] negQuo;
  reg [485:0] quo1;
  reg [485:0] rem1;
  
  begin
    lhsSign = sign_243(lhs);
    rhsSign = sign_243(rhs);
    negRem = isNegative_lut(lhsSign);
    negQuo = xor_lut(negRem, isNegative_lut(rhsSign));
    quo1 = negQuo == 2'b01 ? neg_243(quo) : quo;
    rem1 = negRem == 2'b01 ? neg_243(rem) : rem;
    fixSign_243 = { quo1 : rem1 };
  end
endfunction

function [23:0] divMod_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [5:0] zero;
  reg [35:0] remQuo;
  reg [11:0] rem;
  reg [11:0] quo;
  
  begin
    zero = as_3(6'b000000);
    remQuo = divMod_9({ lhs : zero }, { rhs : zero });
    rem = remQuo[11:0];
    quo = remQuo[29:18];
    divMod_6 = { rem : quo };
  end
endfunction

function [23:0] ceilDivMod_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [5:0] zero;
  reg [35:0] remQuo;
  reg [11:0] rem;
  reg [11:0] quo;
  
  begin
    zero = as_3(6'b000000);
    remQuo = ceilDivMod_9({ lhs : zero }, { rhs : zero });
    rem = remQuo[11:0];
    quo = remQuo[29:18];
    ceilDivMod_6 = { rem : quo };
  end
endfunction

function [23:0] floorDivMod_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [5:0] zero;
  reg [35:0] remQuo;
  reg [11:0] rem;
  reg [11:0] quo;
  
  begin
    zero = as_3(6'b000000);
    remQuo = floorDivMod_9({ lhs : zero }, { rhs : zero });
    rem = remQuo[11:0];
    quo = remQuo[29:18];
    floorDivMod_6 = { rem : quo };
  end
endfunction

function [23:0] roundDivMod_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [5:0] zero;
  reg [35:0] remQuo;
  reg [11:0] rem;
  reg [11:0] quo;
  
  begin
    zero = as_3(6'b000000);
    remQuo = roundDivMod_9({ lhs : zero }, { rhs : zero });
    rem = remQuo[11:0];
    quo = remQuo[29:18];
    roundDivMod_6 = { rem : quo };
  end
endfunction

function [71:0] divMod_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [17:0] zero;
  reg [107:0] remQuo;
  reg [35:0] rem;
  reg [35:0] quo;
  
  begin
    zero = as_9(18'b000000000000000000);
    remQuo = divMod_27({ lhs : zero }, { rhs : zero });
    rem = remQuo[35:0];
    quo = remQuo[89:54];
    divMod_18 = { rem : quo };
  end
endfunction

function [71:0] ceilDivMod_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [17:0] zero;
  reg [107:0] remQuo;
  reg [35:0] rem;
  reg [35:0] quo;
  
  begin
    zero = as_9(18'b000000000000000000);
    remQuo = ceilDivMod_27({ lhs : zero }, { rhs : zero });
    rem = remQuo[35:0];
    quo = remQuo[89:54];
    ceilDivMod_18 = { rem : quo };
  end
endfunction

function [71:0] floorDivMod_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [17:0] zero;
  reg [107:0] remQuo;
  reg [35:0] rem;
  reg [35:0] quo;
  
  begin
    zero = as_9(18'b000000000000000000);
    remQuo = floorDivMod_27({ lhs : zero }, { rhs : zero });
    rem = remQuo[35:0];
    quo = remQuo[89:54];
    floorDivMod_18 = { rem : quo };
  end
endfunction

function [71:0] roundDivMod_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [17:0] zero;
  reg [107:0] remQuo;
  reg [35:0] rem;
  reg [35:0] quo;
  
  begin
    zero = as_9(18'b000000000000000000);
    remQuo = roundDivMod_27({ lhs : zero }, { rhs : zero });
    rem = remQuo[35:0];
    quo = remQuo[89:54];
    roundDivMod_18 = { rem : quo };
  end
endfunction

function [143:0] divMod_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [35:0] zero;
  reg [215:0] remQuo;
  reg [71:0] rem;
  reg [71:0] quo;
  
  begin
    zero = as_18(36'b000000000000000000000000000000000000);
    remQuo = divMod_54({ lhs : zero }, { rhs : zero });
    rem = remQuo[71:0];
    quo = remQuo[179:108];
    divMod_36 = { rem : quo };
  end
endfunction

function [143:0] ceilDivMod_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [35:0] zero;
  reg [215:0] remQuo;
  reg [71:0] rem;
  reg [71:0] quo;
  
  begin
    zero = as_18(36'b000000000000000000000000000000000000);
    remQuo = ceilDivMod_54({ lhs : zero }, { rhs : zero });
    rem = remQuo[71:0];
    quo = remQuo[179:108];
    ceilDivMod_36 = { rem : quo };
  end
endfunction

function [143:0] floorDivMod_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [35:0] zero;
  reg [215:0] remQuo;
  reg [71:0] rem;
  reg [71:0] quo;
  
  begin
    zero = as_18(36'b000000000000000000000000000000000000);
    remQuo = floorDivMod_54({ lhs : zero }, { rhs : zero });
    rem = remQuo[71:0];
    quo = remQuo[179:108];
    floorDivMod_36 = { rem : quo };
  end
endfunction

function [143:0] roundDivMod_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [35:0] zero;
  reg [215:0] remQuo;
  reg [71:0] rem;
  reg [71:0] quo;
  
  begin
    zero = as_18(36'b000000000000000000000000000000000000);
    remQuo = roundDivMod_54({ lhs : zero }, { rhs : zero });
    rem = remQuo[71:0];
    quo = remQuo[179:108];
    roundDivMod_36 = { rem : quo };
  end
endfunction

function [215:0] divMod_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [53:0] zero;
  reg [323:0] remQuo;
  reg [107:0] rem;
  reg [107:0] quo;
  
  begin
    zero = as_27(54'b000000000000000000000000000000000000000000000000000000);
    remQuo = divMod_81({ lhs : zero }, { rhs : zero });
    rem = remQuo[107:0];
    quo = remQuo[269:162];
    divMod_54 = { rem : quo };
  end
endfunction

function [215:0] ceilDivMod_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [53:0] zero;
  reg [323:0] remQuo;
  reg [107:0] rem;
  reg [107:0] quo;
  
  begin
    zero = as_27(54'b000000000000000000000000000000000000000000000000000000);
    remQuo = ceilDivMod_81({ lhs : zero }, { rhs : zero });
    rem = remQuo[107:0];
    quo = remQuo[269:162];
    ceilDivMod_54 = { rem : quo };
  end
endfunction

function [215:0] floorDivMod_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [53:0] zero;
  reg [323:0] remQuo;
  reg [107:0] rem;
  reg [107:0] quo;
  
  begin
    zero = as_27(54'b000000000000000000000000000000000000000000000000000000);
    remQuo = floorDivMod_81({ lhs : zero }, { rhs : zero });
    rem = remQuo[107:0];
    quo = remQuo[269:162];
    floorDivMod_54 = { rem : quo };
  end
endfunction

function [215:0] roundDivMod_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [53:0] zero;
  reg [323:0] remQuo;
  reg [107:0] rem;
  reg [107:0] quo;
  
  begin
    zero = as_27(54'b000000000000000000000000000000000000000000000000000000);
    remQuo = roundDivMod_81({ lhs : zero }, { rhs : zero });
    rem = remQuo[107:0];
    quo = remQuo[269:162];
    roundDivMod_54 = { rem : quo };
  end
endfunction

function [431:0] divMod_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [107:0] zero;
  reg [647:0] remQuo;
  reg [215:0] rem;
  reg [215:0] quo;
  
  begin
    zero = as_54(108'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = divMod_162({ lhs : zero }, { rhs : zero });
    rem = remQuo[215:0];
    quo = remQuo[539:324];
    divMod_108 = { rem : quo };
  end
endfunction

function [431:0] ceilDivMod_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [107:0] zero;
  reg [647:0] remQuo;
  reg [215:0] rem;
  reg [215:0] quo;
  
  begin
    zero = as_54(108'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = ceilDivMod_162({ lhs : zero }, { rhs : zero });
    rem = remQuo[215:0];
    quo = remQuo[539:324];
    ceilDivMod_108 = { rem : quo };
  end
endfunction

function [431:0] floorDivMod_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [107:0] zero;
  reg [647:0] remQuo;
  reg [215:0] rem;
  reg [215:0] quo;
  
  begin
    zero = as_54(108'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = floorDivMod_162({ lhs : zero }, { rhs : zero });
    rem = remQuo[215:0];
    quo = remQuo[539:324];
    floorDivMod_108 = { rem : quo };
  end
endfunction

function [431:0] roundDivMod_108(
    input [215:0] lhs
  , input [215:0] rhs
  );
  reg [107:0] zero;
  reg [647:0] remQuo;
  reg [215:0] rem;
  reg [215:0] quo;
  
  begin
    zero = as_54(108'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = roundDivMod_162({ lhs : zero }, { rhs : zero });
    rem = remQuo[215:0];
    quo = remQuo[539:324];
    roundDivMod_108 = { rem : quo };
  end
endfunction

function [647:0] divMod_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [161:0] zero;
  reg [971:0] remQuo;
  reg [323:0] rem;
  reg [323:0] quo;
  
  begin
    zero = as_81(162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = divMod_243({ lhs : zero }, { rhs : zero });
    rem = remQuo[323:0];
    quo = remQuo[809:486];
    divMod_162 = { rem : quo };
  end
endfunction

function [647:0] ceilDivMod_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [161:0] zero;
  reg [971:0] remQuo;
  reg [323:0] rem;
  reg [323:0] quo;
  
  begin
    zero = as_81(162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = ceilDivMod_243({ lhs : zero }, { rhs : zero });
    rem = remQuo[323:0];
    quo = remQuo[809:486];
    ceilDivMod_162 = { rem : quo };
  end
endfunction

function [647:0] floorDivMod_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [161:0] zero;
  reg [971:0] remQuo;
  reg [323:0] rem;
  reg [323:0] quo;
  
  begin
    zero = as_81(162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = floorDivMod_243({ lhs : zero }, { rhs : zero });
    rem = remQuo[323:0];
    quo = remQuo[809:486];
    floorDivMod_162 = { rem : quo };
  end
endfunction

function [647:0] roundDivMod_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [161:0] zero;
  reg [971:0] remQuo;
  reg [323:0] rem;
  reg [323:0] quo;
  
  begin
    zero = as_81(162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    remQuo = roundDivMod_243({ lhs : zero }, { rhs : zero });
    rem = remQuo[323:0];
    quo = remQuo[809:486];
    roundDivMod_162 = { rem : quo };
  end
endfunction

function [23:0] as_12(
    input [23:0] val
  );
  begin
    as_12 = val;
  end
endfunction

function [47:0] as_24(
    input [47:0] val
  );
  begin
    as_24 = val;
  end
endfunction

function [89:0] as_45(
    input [89:0] val
  );
  begin
    as_45 = val;
  end
endfunction

function [143:0] as_72(
    input [143:0] val
  );
  begin
    as_72 = val;
  end
endfunction

function [23:0] print_12(
    input [23:0] val
  );
  begin
    print_12 = val;
  end
endfunction

function [47:0] print_24(
    input [47:0] val
  );
  begin
    print_24 = val;
  end
endfunction

function [89:0] print_45(
    input [89:0] val
  );
  begin
    print_45 = val;
  end
endfunction

function [143:0] print_72(
    input [143:0] val
  );
  begin
    print_72 = val;
  end
endfunction

function [23:0] floatAdd_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [1:0] smaller;
  reg [23:0] lhs0;
  reg [23:0] rhs0;
  
  begin
    smaller = isLess_lut(cmp_3(lhs[23:18], rhs[23:18]));
    lhs0 = smaller == 2'b01 ? rhs : lhs;
    rhs0 = smaller == 2'b01 ? lhs : rhs;
    floatAdd_9_3 = floatAddCheckMantissa_9_3(lhs0, rhs0);
  end
endfunction

function [23:0] floatAddCheckMantissa_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = isZero_lut(sign_9(rhs[17:0]));
    floatAddCheckMantissa_9_3 = zero == 2'b01 ? lhs : floatAddShiftMantissa_9_3(lhs, rhs);
  end
endfunction

function [23:0] floatAddShiftMantissa_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [1:0] addValues;
  
  begin
    addValues = equal_3(lhs[23:18], rhs[23:18]);
    floatAddShiftMantissa_9_3 = addValues == 2'b01 ? floatAddMantissas_9_3(lhs, rhs) : floatAddDoShiftMantissa_9_3(lhs, rhs);
  end
endfunction

function [23:0] floatAddDoShiftMantissa_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [23:0] shifted;
  
  begin
    shifted = { lshift_9(rhs[17:0]) : incr_3(rhs[23:18]) };
    floatAddDoShiftMantissa_9_3 = floatAddCheckMantissa_9_3(lhs, shifted);
  end
endfunction

function [23:0] floatAddMantissas_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [19:0] sum;
  reg [1:0] carry;
  reg [23:0] ret0;
  reg [23:0] val;
  reg [1:0] zero;
  
  begin
    sum = fullAdd_9(lhs[17:0], rhs[17:0], 2'b00);
    carry = notZero_lut(sum[19:18]);
    ret0 = { carry == 2'b01 ? sum[19:2] : 18'b101010101010101010 : incr_3(carry == 2'b01 ? lhs[23:18] : 6'b101010) };
    val = { not_lut(carry) == 2'b01 ? sum[17:0] : 18'b101010101010101010 : not_lut(carry) == 2'b01 ? lhs[23:18] : 6'b101010 };
    zero = isZero_lut(sign_9(val[17:0]));
    floatAddMantissas_9_3 = Qupla_merge_12(ret0, zero == 2'b01 ? 24'b000000000000000000000000 : floatAddNormalize_9_3(val));
  end
endfunction

function [23:0] floatAddNormalize_9_3(
    input [23:0] val
  );
  reg [1:0] nonZero;
  
  begin
    nonZero = notZero_lut(val[17:16]);
    floatAddNormalize_9_3 = nonZero == 2'b01 ? val : floatAddDoNormalize_9_3(val);
  end
endfunction

function [23:0] floatAddDoNormalize_9_3(
    input [23:0] val
  );
  reg [23:0] val1;
  
  begin
    val1 = { rshift_9(val[17:0]) : decr_3(val[23:18]) };
    floatAddDoNormalize_9_3 = floatAddNormalize_9_3(val1);
  end
endfunction

function [23:0] floatDiv_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_9(lhs[17:0])), isZero_lut(sign_9(rhs[17:0])));
    floatDiv_9_3 = zero == 2'b01 ? 24'b000000000000000000000000 : floatDivNonZero_9_3(lhs, rhs);
  end
endfunction

function [23:0] floatDivNonZero_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [17:0] zero;
  reg [53:0] quotient;
  reg [5:0] sum;
  reg [1:0] isNormalized;
  reg [23:0] normalized;
  reg [23:0] corrected;
  
  begin
    zero = as_9(18'b000000000000000000);
    quotient = div_27({ { zero : zero } : lhs[17:0] }, { { rhs[17:0] : zero } : zero });
    sum = sub_3(lhs[23:18], rhs[23:18]);
    isNormalized = isZero_lut(quotient[37:36]);
    normalized = { quotient[35:18] : sum };
    corrected = { quotient[37:20] : incr_3(sum) };
    floatDivNonZero_9_3 = isNormalized == 2'b01 ? normalized : corrected;
  end
endfunction

function [23:0] floatMul_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_9(lhs[17:0])), isZero_lut(sign_9(rhs[17:0])));
    floatMul_9_3 = zero == 2'b01 ? 24'b000000000000000000000000 : floatMulNonZero_9_3(lhs, rhs);
  end
endfunction

function [23:0] floatMulNonZero_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  reg [35:0] product;
  reg [5:0] sum;
  
  begin
    product = fullMul_9(lhs[17:0], rhs[17:0]);
    sum = add_3(lhs[23:18], rhs[23:18]);
    floatMulNonZero_9_3 = floatMulNormalize_9_3(product, sum);
  end
endfunction

function [23:0] floatMulNormalize_9_3(
    input [35:0] product
  , input [5:0] sum
  );
  reg [1:0] isNormalized;
  reg [35:0] prod0;
  reg [5:0] sum0;
  reg [35:0] prod1;
  reg [5:0] sum1;
  reg [23:0] normalized;
  
  begin
    isNormalized = notZero_lut(product[35:34]);
    prod0 = isNormalized == 2'b01 ? product : 36'b101010101010101010101010101010101010;
    sum0 = isNormalized == 2'b01 ? sum : 6'b101010;
    prod1 = not_lut(isNormalized) == 2'b01 ? { 2'b00 : product[33:0] } : 36'b101010101010101010101010101010101010;
    sum1 = not_lut(isNormalized) == 2'b01 ? sum : 6'b101010;
    normalized = { prod0[35:18] : sum0 };
    floatMulNormalize_9_3 = Qupla_merge_12(normalized, floatMulNormalize_9_3(prod1, decr_3(sum1)));
  end
endfunction

function [23:0] floatNeg_9_3(
    input [23:0] val
  );
  begin
    floatNeg_9_3 = { neg_9(val[17:0]) : val[23:18] };
  end
endfunction

function [23:0] floatSub_9_3(
    input [23:0] lhs
  , input [23:0] rhs
  );
  begin
    floatSub_9_3 = floatAdd_9_3(lhs, floatNeg_9_3(rhs));
  end
endfunction

function [47:0] floatAdd_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [1:0] smaller;
  reg [47:0] lhs0;
  reg [47:0] rhs0;
  
  begin
    smaller = isLess_lut(cmp_6(lhs[47:36], rhs[47:36]));
    lhs0 = smaller == 2'b01 ? rhs : lhs;
    rhs0 = smaller == 2'b01 ? lhs : rhs;
    floatAdd_18_6 = floatAddCheckMantissa_18_6(lhs0, rhs0);
  end
endfunction

function [47:0] floatAddCheckMantissa_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = isZero_lut(sign_18(rhs[35:0]));
    floatAddCheckMantissa_18_6 = zero == 2'b01 ? lhs : floatAddShiftMantissa_18_6(lhs, rhs);
  end
endfunction

function [47:0] floatAddShiftMantissa_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [1:0] addValues;
  
  begin
    addValues = equal_6(lhs[47:36], rhs[47:36]);
    floatAddShiftMantissa_18_6 = addValues == 2'b01 ? floatAddMantissas_18_6(lhs, rhs) : floatAddDoShiftMantissa_18_6(lhs, rhs);
  end
endfunction

function [47:0] floatAddDoShiftMantissa_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [47:0] shifted;
  
  begin
    shifted = { lshift_18(rhs[35:0]) : incr_6(rhs[47:36]) };
    floatAddDoShiftMantissa_18_6 = floatAddCheckMantissa_18_6(lhs, shifted);
  end
endfunction

function [47:0] floatAddMantissas_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [37:0] sum;
  reg [1:0] carry;
  reg [47:0] ret0;
  reg [47:0] val;
  reg [1:0] zero;
  
  begin
    sum = fullAdd_18(lhs[35:0], rhs[35:0], 2'b00);
    carry = notZero_lut(sum[37:36]);
    ret0 = { carry == 2'b01 ? sum[37:2] : 36'b101010101010101010101010101010101010 : incr_6(carry == 2'b01 ? lhs[47:36] : 12'b101010101010) };
    val = { not_lut(carry) == 2'b01 ? sum[35:0] : 36'b101010101010101010101010101010101010 : not_lut(carry) == 2'b01 ? lhs[47:36] : 12'b101010101010 };
    zero = isZero_lut(sign_18(val[35:0]));
    floatAddMantissas_18_6 = Qupla_merge_24(ret0, zero == 2'b01 ? 48'b000000000000000000000000000000000000000000000000 : floatAddNormalize_18_6(val));
  end
endfunction

function [47:0] floatAddNormalize_18_6(
    input [47:0] val
  );
  reg [1:0] nonZero;
  
  begin
    nonZero = notZero_lut(val[35:34]);
    floatAddNormalize_18_6 = nonZero == 2'b01 ? val : floatAddDoNormalize_18_6(val);
  end
endfunction

function [47:0] floatAddDoNormalize_18_6(
    input [47:0] val
  );
  reg [47:0] val1;
  
  begin
    val1 = { rshift_18(val[35:0]) : decr_6(val[47:36]) };
    floatAddDoNormalize_18_6 = floatAddNormalize_18_6(val1);
  end
endfunction

function [47:0] floatDiv_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_18(lhs[35:0])), isZero_lut(sign_18(rhs[35:0])));
    floatDiv_18_6 = zero == 2'b01 ? 48'b000000000000000000000000000000000000000000000000 : floatDivNonZero_18_6(lhs, rhs);
  end
endfunction

function [47:0] floatDivNonZero_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [35:0] zero;
  reg [107:0] quotient;
  reg [11:0] sum;
  reg [1:0] isNormalized;
  reg [47:0] normalized;
  reg [47:0] corrected;
  
  begin
    zero = as_18(36'b000000000000000000000000000000000000);
    quotient = div_54({ { zero : zero } : lhs[35:0] }, { { rhs[35:0] : zero } : zero });
    sum = sub_6(lhs[47:36], rhs[47:36]);
    isNormalized = isZero_lut(quotient[73:72]);
    normalized = { quotient[71:36] : sum };
    corrected = { quotient[73:38] : incr_6(sum) };
    floatDivNonZero_18_6 = isNormalized == 2'b01 ? normalized : corrected;
  end
endfunction

function [47:0] floatMul_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_18(lhs[35:0])), isZero_lut(sign_18(rhs[35:0])));
    floatMul_18_6 = zero == 2'b01 ? 48'b000000000000000000000000000000000000000000000000 : floatMulNonZero_18_6(lhs, rhs);
  end
endfunction

function [47:0] floatMulNonZero_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  reg [71:0] product;
  reg [11:0] sum;
  
  begin
    product = fullMul_18(lhs[35:0], rhs[35:0]);
    sum = add_6(lhs[47:36], rhs[47:36]);
    floatMulNonZero_18_6 = floatMulNormalize_18_6(product, sum);
  end
endfunction

function [47:0] floatMulNormalize_18_6(
    input [71:0] product
  , input [11:0] sum
  );
  reg [1:0] isNormalized;
  reg [71:0] prod0;
  reg [11:0] sum0;
  reg [71:0] prod1;
  reg [11:0] sum1;
  reg [47:0] normalized;
  
  begin
    isNormalized = notZero_lut(product[71:70]);
    prod0 = isNormalized == 2'b01 ? product : 72'b101010101010101010101010101010101010101010101010101010101010101010101010;
    sum0 = isNormalized == 2'b01 ? sum : 12'b101010101010;
    prod1 = not_lut(isNormalized) == 2'b01 ? { 2'b00 : product[69:0] } : 72'b101010101010101010101010101010101010101010101010101010101010101010101010;
    sum1 = not_lut(isNormalized) == 2'b01 ? sum : 12'b101010101010;
    normalized = { prod0[71:36] : sum0 };
    floatMulNormalize_18_6 = Qupla_merge_24(normalized, floatMulNormalize_18_6(prod1, decr_6(sum1)));
  end
endfunction

function [47:0] floatNeg_18_6(
    input [47:0] val
  );
  begin
    floatNeg_18_6 = { neg_18(val[35:0]) : val[47:36] };
  end
endfunction

function [47:0] floatSub_18_6(
    input [47:0] lhs
  , input [47:0] rhs
  );
  begin
    floatSub_18_6 = floatAdd_18_6(lhs, floatNeg_18_6(rhs));
  end
endfunction

function [89:0] floatAdd_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [1:0] smaller;
  reg [89:0] lhs0;
  reg [89:0] rhs0;
  
  begin
    smaller = isLess_lut(cmp_9(lhs[89:72], rhs[89:72]));
    lhs0 = smaller == 2'b01 ? rhs : lhs;
    rhs0 = smaller == 2'b01 ? lhs : rhs;
    floatAdd_36_9 = floatAddCheckMantissa_36_9(lhs0, rhs0);
  end
endfunction

function [89:0] floatAddCheckMantissa_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = isZero_lut(sign_36(rhs[71:0]));
    floatAddCheckMantissa_36_9 = zero == 2'b01 ? lhs : floatAddShiftMantissa_36_9(lhs, rhs);
  end
endfunction

function [89:0] floatAddShiftMantissa_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [1:0] addValues;
  
  begin
    addValues = equal_9(lhs[89:72], rhs[89:72]);
    floatAddShiftMantissa_36_9 = addValues == 2'b01 ? floatAddMantissas_36_9(lhs, rhs) : floatAddDoShiftMantissa_36_9(lhs, rhs);
  end
endfunction

function [89:0] floatAddDoShiftMantissa_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [89:0] shifted;
  
  begin
    shifted = { lshift_36(rhs[71:0]) : incr_9(rhs[89:72]) };
    floatAddDoShiftMantissa_36_9 = floatAddCheckMantissa_36_9(lhs, shifted);
  end
endfunction

function [89:0] floatAddMantissas_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [73:0] sum;
  reg [1:0] carry;
  reg [89:0] ret0;
  reg [89:0] val;
  reg [1:0] zero;
  
  begin
    sum = fullAdd_36(lhs[71:0], rhs[71:0], 2'b00);
    carry = notZero_lut(sum[73:72]);
    ret0 = { carry == 2'b01 ? sum[73:2] : 72'b101010101010101010101010101010101010101010101010101010101010101010101010 : incr_9(carry == 2'b01 ? lhs[89:72] : 18'b101010101010101010) };
    val = { not_lut(carry) == 2'b01 ? sum[71:0] : 72'b101010101010101010101010101010101010101010101010101010101010101010101010 : not_lut(carry) == 2'b01 ? lhs[89:72] : 18'b101010101010101010 };
    zero = isZero_lut(sign_36(val[71:0]));
    floatAddMantissas_36_9 = Qupla_merge_45(ret0, zero == 2'b01 ? 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : floatAddNormalize_36_9(val));
  end
endfunction

function [89:0] floatAddNormalize_36_9(
    input [89:0] val
  );
  reg [1:0] nonZero;
  
  begin
    nonZero = notZero_lut(val[71:70]);
    floatAddNormalize_36_9 = nonZero == 2'b01 ? val : floatAddDoNormalize_36_9(val);
  end
endfunction

function [89:0] floatAddDoNormalize_36_9(
    input [89:0] val
  );
  reg [89:0] val1;
  
  begin
    val1 = { rshift_36(val[71:0]) : decr_9(val[89:72]) };
    floatAddDoNormalize_36_9 = floatAddNormalize_36_9(val1);
  end
endfunction

function [89:0] floatDiv_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_36(lhs[71:0])), isZero_lut(sign_36(rhs[71:0])));
    floatDiv_36_9 = zero == 2'b01 ? 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : floatDivNonZero_36_9(lhs, rhs);
  end
endfunction

function [89:0] floatDivNonZero_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [71:0] zero;
  reg [215:0] quotient;
  reg [17:0] sum;
  reg [1:0] isNormalized;
  reg [89:0] normalized;
  reg [89:0] corrected;
  
  begin
    zero = as_36(72'b000000000000000000000000000000000000000000000000000000000000000000000000);
    quotient = div_108({ { zero : zero } : lhs[71:0] }, { { rhs[71:0] : zero } : zero });
    sum = sub_9(lhs[89:72], rhs[89:72]);
    isNormalized = isZero_lut(quotient[145:144]);
    normalized = { quotient[143:72] : sum };
    corrected = { quotient[145:74] : incr_9(sum) };
    floatDivNonZero_36_9 = isNormalized == 2'b01 ? normalized : corrected;
  end
endfunction

function [89:0] floatMul_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_36(lhs[71:0])), isZero_lut(sign_36(rhs[71:0])));
    floatMul_36_9 = zero == 2'b01 ? 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : floatMulNonZero_36_9(lhs, rhs);
  end
endfunction

function [89:0] floatMulNonZero_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  reg [143:0] product;
  reg [17:0] sum;
  
  begin
    product = fullMul_36(lhs[71:0], rhs[71:0]);
    sum = add_9(lhs[89:72], rhs[89:72]);
    floatMulNonZero_36_9 = floatMulNormalize_36_9(product, sum);
  end
endfunction

function [89:0] floatMulNormalize_36_9(
    input [143:0] product
  , input [17:0] sum
  );
  reg [1:0] isNormalized;
  reg [143:0] prod0;
  reg [17:0] sum0;
  reg [143:0] prod1;
  reg [17:0] sum1;
  reg [89:0] normalized;
  
  begin
    isNormalized = notZero_lut(product[143:142]);
    prod0 = isNormalized == 2'b01 ? product : 144'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    sum0 = isNormalized == 2'b01 ? sum : 18'b101010101010101010;
    prod1 = not_lut(isNormalized) == 2'b01 ? { 2'b00 : product[141:0] } : 144'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    sum1 = not_lut(isNormalized) == 2'b01 ? sum : 18'b101010101010101010;
    normalized = { prod0[143:72] : sum0 };
    floatMulNormalize_36_9 = Qupla_merge_45(normalized, floatMulNormalize_36_9(prod1, decr_9(sum1)));
  end
endfunction

function [89:0] floatNeg_36_9(
    input [89:0] val
  );
  begin
    floatNeg_36_9 = { neg_36(val[71:0]) : val[89:72] };
  end
endfunction

function [89:0] floatSub_36_9(
    input [89:0] lhs
  , input [89:0] rhs
  );
  begin
    floatSub_36_9 = floatAdd_36_9(lhs, floatNeg_36_9(rhs));
  end
endfunction

function [143:0] floatAdd_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [1:0] smaller;
  reg [143:0] lhs0;
  reg [143:0] rhs0;
  
  begin
    smaller = isLess_lut(cmp_18(lhs[143:108], rhs[143:108]));
    lhs0 = smaller == 2'b01 ? rhs : lhs;
    rhs0 = smaller == 2'b01 ? lhs : rhs;
    floatAdd_54_18 = floatAddCheckMantissa_54_18(lhs0, rhs0);
  end
endfunction

function [143:0] floatAddCheckMantissa_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = isZero_lut(sign_54(rhs[107:0]));
    floatAddCheckMantissa_54_18 = zero == 2'b01 ? lhs : floatAddShiftMantissa_54_18(lhs, rhs);
  end
endfunction

function [143:0] floatAddShiftMantissa_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [1:0] addValues;
  
  begin
    addValues = equal_18(lhs[143:108], rhs[143:108]);
    floatAddShiftMantissa_54_18 = addValues == 2'b01 ? floatAddMantissas_54_18(lhs, rhs) : floatAddDoShiftMantissa_54_18(lhs, rhs);
  end
endfunction

function [143:0] floatAddDoShiftMantissa_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [143:0] shifted;
  
  begin
    shifted = { lshift_54(rhs[107:0]) : incr_18(rhs[143:108]) };
    floatAddDoShiftMantissa_54_18 = floatAddCheckMantissa_54_18(lhs, shifted);
  end
endfunction

function [143:0] floatAddMantissas_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [109:0] sum;
  reg [1:0] carry;
  reg [143:0] ret0;
  reg [143:0] val;
  reg [1:0] zero;
  
  begin
    sum = fullAdd_54(lhs[107:0], rhs[107:0], 2'b00);
    carry = notZero_lut(sum[109:108]);
    ret0 = { carry == 2'b01 ? sum[109:2] : 108'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 : incr_18(carry == 2'b01 ? lhs[143:108] : 36'b101010101010101010101010101010101010) };
    val = { not_lut(carry) == 2'b01 ? sum[107:0] : 108'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 : not_lut(carry) == 2'b01 ? lhs[143:108] : 36'b101010101010101010101010101010101010 };
    zero = isZero_lut(sign_54(val[107:0]));
    floatAddMantissas_54_18 = Qupla_merge_72(ret0, zero == 2'b01 ? 144'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : floatAddNormalize_54_18(val));
  end
endfunction

function [143:0] floatAddNormalize_54_18(
    input [143:0] val
  );
  reg [1:0] nonZero;
  
  begin
    nonZero = notZero_lut(val[107:106]);
    floatAddNormalize_54_18 = nonZero == 2'b01 ? val : floatAddDoNormalize_54_18(val);
  end
endfunction

function [143:0] floatAddDoNormalize_54_18(
    input [143:0] val
  );
  reg [143:0] val1;
  
  begin
    val1 = { rshift_54(val[107:0]) : decr_18(val[143:108]) };
    floatAddDoNormalize_54_18 = floatAddNormalize_54_18(val1);
  end
endfunction

function [143:0] floatDiv_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_54(lhs[107:0])), isZero_lut(sign_54(rhs[107:0])));
    floatDiv_54_18 = zero == 2'b01 ? 144'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : floatDivNonZero_54_18(lhs, rhs);
  end
endfunction

function [143:0] floatDivNonZero_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [107:0] zero;
  reg [323:0] quotient;
  reg [35:0] sum;
  reg [1:0] isNormalized;
  reg [143:0] normalized;
  reg [143:0] corrected;
  
  begin
    zero = as_54(108'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    quotient = div_162({ { zero : zero } : lhs[107:0] }, { { rhs[107:0] : zero } : zero });
    sum = sub_18(lhs[143:108], rhs[143:108]);
    isNormalized = isZero_lut(quotient[217:216]);
    normalized = { quotient[215:108] : sum };
    corrected = { quotient[217:110] : incr_18(sum) };
    floatDivNonZero_54_18 = isNormalized == 2'b01 ? normalized : corrected;
  end
endfunction

function [143:0] floatMul_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [1:0] zero;
  
  begin
    zero = or_lut(isZero_lut(sign_54(lhs[107:0])), isZero_lut(sign_54(rhs[107:0])));
    floatMul_54_18 = zero == 2'b01 ? 144'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : floatMulNonZero_54_18(lhs, rhs);
  end
endfunction

function [143:0] floatMulNonZero_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  reg [215:0] product;
  reg [35:0] sum;
  
  begin
    product = fullMul_54(lhs[107:0], rhs[107:0]);
    sum = add_18(lhs[143:108], rhs[143:108]);
    floatMulNonZero_54_18 = floatMulNormalize_54_18(product, sum);
  end
endfunction

function [143:0] floatMulNormalize_54_18(
    input [215:0] product
  , input [35:0] sum
  );
  reg [1:0] isNormalized;
  reg [215:0] prod0;
  reg [35:0] sum0;
  reg [215:0] prod1;
  reg [35:0] sum1;
  reg [143:0] normalized;
  
  begin
    isNormalized = notZero_lut(product[215:214]);
    prod0 = isNormalized == 2'b01 ? product : 216'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    sum0 = isNormalized == 2'b01 ? sum : 36'b101010101010101010101010101010101010;
    prod1 = not_lut(isNormalized) == 2'b01 ? { 2'b00 : product[213:0] } : 216'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    sum1 = not_lut(isNormalized) == 2'b01 ? sum : 36'b101010101010101010101010101010101010;
    normalized = { prod0[215:108] : sum0 };
    floatMulNormalize_54_18 = Qupla_merge_72(normalized, floatMulNormalize_54_18(prod1, decr_18(sum1)));
  end
endfunction

function [143:0] floatNeg_54_18(
    input [143:0] val
  );
  begin
    floatNeg_54_18 = { neg_54(val[107:0]) : val[143:108] };
  end
endfunction

function [143:0] floatSub_54_18(
    input [143:0] lhs
  , input [143:0] rhs
  );
  begin
    floatSub_54_18 = floatAdd_54_18(lhs, floatNeg_54_18(rhs));
  end
endfunction

function [7:0] fullAdd_3(
    input [5:0] lhs
  , input [5:0] rhs
  , input [1:0] carry
  );
  reg [3:0] add0;
  reg [3:0] add1;
  reg [3:0] add2;
  
  begin
    add0 = fullAdd_1(lhs[1:0], rhs[1:0], carry);
    add1 = fullAdd_1(lhs[3:2], rhs[3:2], add0[3:2]);
    add2 = fullAdd_1(lhs[5:4], rhs[5:4], add1[3:2]);
    fullAdd_3 = { { add0[1:0] : add1[1:0] } : add2 };
  end
endfunction

function [19:0] fullAdd_9(
    input [17:0] lhs
  , input [17:0] rhs
  , input [1:0] carry
  );
  reg [7:0] add0;
  reg [7:0] add1;
  reg [7:0] add2;
  
  begin
    add0 = fullAdd_3(lhs[5:0], rhs[5:0], carry);
    add1 = fullAdd_3(lhs[11:6], rhs[11:6], add0[7:6]);
    add2 = fullAdd_3(lhs[17:12], rhs[17:12], add1[7:6]);
    fullAdd_9 = { { add0[5:0] : add1[5:0] } : add2 };
  end
endfunction

function [55:0] fullAdd_27(
    input [53:0] lhs
  , input [53:0] rhs
  , input [1:0] carry
  );
  reg [19:0] add0;
  reg [19:0] add1;
  reg [19:0] add2;
  
  begin
    add0 = fullAdd_9(lhs[17:0], rhs[17:0], carry);
    add1 = fullAdd_9(lhs[35:18], rhs[35:18], add0[19:18]);
    add2 = fullAdd_9(lhs[53:36], rhs[53:36], add1[19:18]);
    fullAdd_27 = { { add0[17:0] : add1[17:0] } : add2 };
  end
endfunction

function [163:0] fullAdd_81(
    input [161:0] lhs
  , input [161:0] rhs
  , input [1:0] carry
  );
  reg [55:0] add0;
  reg [55:0] add1;
  reg [55:0] add2;
  
  begin
    add0 = fullAdd_27(lhs[53:0], rhs[53:0], carry);
    add1 = fullAdd_27(lhs[107:54], rhs[107:54], add0[55:54]);
    add2 = fullAdd_27(lhs[161:108], rhs[161:108], add1[55:54]);
    fullAdd_81 = { { add0[53:0] : add1[53:0] } : add2 };
  end
endfunction

function [487:0] fullAdd_243(
    input [485:0] lhs
  , input [485:0] rhs
  , input [1:0] carry
  );
  reg [163:0] add0;
  reg [163:0] add1;
  reg [163:0] add2;
  
  begin
    add0 = fullAdd_81(lhs[161:0], rhs[161:0], carry);
    add1 = fullAdd_81(lhs[323:162], rhs[323:162], add0[163:162]);
    add2 = fullAdd_81(lhs[485:324], rhs[485:324], add1[163:162]);
    fullAdd_243 = { { add0[161:0] : add1[161:0] } : add2 };
  end
endfunction

function [13:0] fullAdd_6(
    input [11:0] lhs
  , input [11:0] rhs
  , input [1:0] carry
  );
  reg [7:0] add0;
  reg [7:0] add1;
  
  begin
    add0 = fullAdd_3(lhs[5:0], rhs[5:0], carry);
    add1 = fullAdd_3(lhs[11:6], rhs[11:6], add0[7:6]);
    fullAdd_6 = { add0[5:0] : add1 };
  end
endfunction

function [37:0] fullAdd_18(
    input [35:0] lhs
  , input [35:0] rhs
  , input [1:0] carry
  );
  reg [19:0] add0;
  reg [19:0] add1;
  
  begin
    add0 = fullAdd_9(lhs[17:0], rhs[17:0], carry);
    add1 = fullAdd_9(lhs[35:18], rhs[35:18], add0[19:18]);
    fullAdd_18 = { add0[17:0] : add1 };
  end
endfunction

function [73:0] fullAdd_36(
    input [71:0] lhs
  , input [71:0] rhs
  , input [1:0] carry
  );
  reg [37:0] add0;
  reg [37:0] add1;
  
  begin
    add0 = fullAdd_18(lhs[35:0], rhs[35:0], carry);
    add1 = fullAdd_18(lhs[71:36], rhs[71:36], add0[37:36]);
    fullAdd_36 = { add0[35:0] : add1 };
  end
endfunction

function [109:0] fullAdd_54(
    input [107:0] lhs
  , input [107:0] rhs
  , input [1:0] carry
  );
  reg [55:0] add0;
  reg [55:0] add1;
  
  begin
    add0 = fullAdd_27(lhs[53:0], rhs[53:0], carry);
    add1 = fullAdd_27(lhs[107:54], rhs[107:54], add0[55:54]);
    fullAdd_54 = { add0[53:0] : add1 };
  end
endfunction

function [325:0] fullAdd_162(
    input [323:0] lhs
  , input [323:0] rhs
  , input [1:0] carry
  );
  reg [163:0] add0;
  reg [163:0] add1;
  
  begin
    add0 = fullAdd_81(lhs[161:0], rhs[161:0], carry);
    add1 = fullAdd_81(lhs[323:162], rhs[323:162], add0[163:162]);
    fullAdd_162 = { add0[161:0] : add1 };
  end
endfunction

function [11:0] fullMul_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [1:0] A;
  reg [1:0] B;
  reg [1:0] C;
  reg [1:0] D;
  reg [1:0] E;
  reg [1:0] F;
  reg [3:0] AD;
  reg [3:0] AE;
  reg [3:0] AF;
  reg [3:0] BD;
  reg [3:0] BE;
  reg [3:0] BF;
  reg [3:0] CD;
  reg [3:0] CE;
  reg [3:0] CF;
  reg [1:0] tryte0;
  reg [1:0] carry0;
  reg [5:0] AEBD;
  reg [3:0] AEBDc;
  reg [1:0] tryte1;
  reg [1:0] carry1;
  reg [5:0] AFBE;
  reg [3:0] AFBEc;
  reg [5:0] AFBEcCD;
  reg [1:0] tryte2;
  reg [1:0] carry2;
  reg [5:0] BFCD;
  reg [3:0] BFCDc;
  reg [1:0] tryte3;
  reg [1:0] carry3;
  reg [3:0] CFc;
  
  begin
    A = lhs[1:0];
    B = lhs[3:2];
    C = lhs[5:4];
    D = rhs[1:0];
    E = rhs[3:2];
    F = rhs[5:4];
    AD = fullMul_1(A, D);
    AE = fullMul_1(A, E);
    AF = fullMul_1(A, F);
    BD = fullMul_1(B, D);
    BE = fullMul_1(B, E);
    BF = fullMul_1(B, F);
    CD = fullMul_1(C, D);
    CE = fullMul_1(C, E);
    CF = fullMul_1(C, F);
    tryte0 = AD[1:0];
    carry0 = AD[3:2];
    AEBD = addProduct_1(AE, BD);
    AEBDc = addCarryToProduct_1(AEBD[3:0], carry0, 2'b00);
    tryte1 = AEBDc[1:0];
    carry1 = AEBDc[3:2];
    AFBE = addProduct_1(AF, BE);
    AFBEc = addCarryToProduct_1(AFBE[3:0], carry1, 2'b00);
    AFBEcCD = addProduct_1(AFBEc, CD);
    tryte2 = AFBEcCD[1:0];
    carry2 = AFBEcCD[3:2];
    BFCD = addProduct_1(BF, CE);
    BFCDc = addCarryToProduct_1(BFCD[3:0], carry2, AFBEcCD[5:4]);
    tryte3 = BFCDc[1:0];
    carry3 = BFCDc[3:2];
    CFc = addCarryToProduct_1(CF, carry3, 2'b00);
    fullMul_3 = { { { { tryte0 : tryte1 } : tryte2 } : tryte3 } : CFc };
  end
endfunction

function [5:0] addProduct_1(
    input [3:0] lhs
  , input [3:0] rhs
  );
  reg [3:0] lo;
  reg [3:0] hi;
  
  begin
    lo = fullAdd_1(lhs[1:0], rhs[1:0], 2'b00);
    hi = fullAdd_1(lhs[3:2], rhs[3:2], lo[3:2]);
    addProduct_1 = { lo[1:0] : hi };
  end
endfunction

function [3:0] addCarryToProduct_1(
    input [3:0] lhs
  , input [1:0] carry
  , input [1:0] extraTrit
  );
  reg [3:0] lo;
  reg [3:0] hi;
  
  begin
    lo = fullAdd_1(lhs[1:0], carry, extraTrit);
    hi = halfAdd_1(lhs[3:2], lo[3:2]);
    addCarryToProduct_1 = { lo[1:0] : hi[1:0] };
  end
endfunction

function [35:0] fullMul_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [5:0] A;
  reg [5:0] B;
  reg [5:0] C;
  reg [5:0] D;
  reg [5:0] E;
  reg [5:0] F;
  reg [11:0] AD;
  reg [11:0] AE;
  reg [11:0] AF;
  reg [11:0] BD;
  reg [11:0] BE;
  reg [11:0] BF;
  reg [11:0] CD;
  reg [11:0] CE;
  reg [11:0] CF;
  reg [5:0] tryte0;
  reg [5:0] carry0;
  reg [13:0] AEBD;
  reg [11:0] AEBDc;
  reg [5:0] tryte1;
  reg [5:0] carry1;
  reg [13:0] AFBE;
  reg [11:0] AFBEc;
  reg [13:0] AFBEcCD;
  reg [5:0] tryte2;
  reg [5:0] carry2;
  reg [13:0] BFCD;
  reg [11:0] BFCDc;
  reg [5:0] tryte3;
  reg [5:0] carry3;
  reg [11:0] CFc;
  
  begin
    A = lhs[5:0];
    B = lhs[11:6];
    C = lhs[17:12];
    D = rhs[5:0];
    E = rhs[11:6];
    F = rhs[17:12];
    AD = fullMul_3(A, D);
    AE = fullMul_3(A, E);
    AF = fullMul_3(A, F);
    BD = fullMul_3(B, D);
    BE = fullMul_3(B, E);
    BF = fullMul_3(B, F);
    CD = fullMul_3(C, D);
    CE = fullMul_3(C, E);
    CF = fullMul_3(C, F);
    tryte0 = AD[5:0];
    carry0 = AD[11:6];
    AEBD = addProduct_3(AE, BD);
    AEBDc = addCarryToProduct_3(AEBD[11:0], carry0, 2'b00);
    tryte1 = AEBDc[5:0];
    carry1 = AEBDc[11:6];
    AFBE = addProduct_3(AF, BE);
    AFBEc = addCarryToProduct_3(AFBE[11:0], carry1, 2'b00);
    AFBEcCD = addProduct_3(AFBEc, CD);
    tryte2 = AFBEcCD[5:0];
    carry2 = AFBEcCD[11:6];
    BFCD = addProduct_3(BF, CE);
    BFCDc = addCarryToProduct_3(BFCD[11:0], carry2, AFBEcCD[13:12]);
    tryte3 = BFCDc[5:0];
    carry3 = BFCDc[11:6];
    CFc = addCarryToProduct_3(CF, carry3, 2'b00);
    fullMul_9 = { { { { tryte0 : tryte1 } : tryte2 } : tryte3 } : CFc };
  end
endfunction

function [13:0] addProduct_3(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [7:0] lo;
  reg [7:0] hi;
  
  begin
    lo = fullAdd_3(lhs[5:0], rhs[5:0], 2'b00);
    hi = fullAdd_3(lhs[11:6], rhs[11:6], lo[7:6]);
    addProduct_3 = { lo[5:0] : hi };
  end
endfunction

function [11:0] addCarryToProduct_3(
    input [11:0] lhs
  , input [5:0] carry
  , input [1:0] extraTrit
  );
  reg [7:0] lo;
  reg [7:0] hi;
  
  begin
    lo = fullAdd_3(lhs[5:0], carry, extraTrit);
    hi = halfAdd_3(lhs[11:6], lo[7:6]);
    addCarryToProduct_3 = { lo[5:0] : hi[5:0] };
  end
endfunction

function [107:0] fullMul_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [17:0] A;
  reg [17:0] B;
  reg [17:0] C;
  reg [17:0] D;
  reg [17:0] E;
  reg [17:0] F;
  reg [35:0] AD;
  reg [35:0] AE;
  reg [35:0] AF;
  reg [35:0] BD;
  reg [35:0] BE;
  reg [35:0] BF;
  reg [35:0] CD;
  reg [35:0] CE;
  reg [35:0] CF;
  reg [17:0] tryte0;
  reg [17:0] carry0;
  reg [37:0] AEBD;
  reg [35:0] AEBDc;
  reg [17:0] tryte1;
  reg [17:0] carry1;
  reg [37:0] AFBE;
  reg [35:0] AFBEc;
  reg [37:0] AFBEcCD;
  reg [17:0] tryte2;
  reg [17:0] carry2;
  reg [37:0] BFCD;
  reg [35:0] BFCDc;
  reg [17:0] tryte3;
  reg [17:0] carry3;
  reg [35:0] CFc;
  
  begin
    A = lhs[17:0];
    B = lhs[35:18];
    C = lhs[53:36];
    D = rhs[17:0];
    E = rhs[35:18];
    F = rhs[53:36];
    AD = fullMul_9(A, D);
    AE = fullMul_9(A, E);
    AF = fullMul_9(A, F);
    BD = fullMul_9(B, D);
    BE = fullMul_9(B, E);
    BF = fullMul_9(B, F);
    CD = fullMul_9(C, D);
    CE = fullMul_9(C, E);
    CF = fullMul_9(C, F);
    tryte0 = AD[17:0];
    carry0 = AD[35:18];
    AEBD = addProduct_9(AE, BD);
    AEBDc = addCarryToProduct_9(AEBD[35:0], carry0, 2'b00);
    tryte1 = AEBDc[17:0];
    carry1 = AEBDc[35:18];
    AFBE = addProduct_9(AF, BE);
    AFBEc = addCarryToProduct_9(AFBE[35:0], carry1, 2'b00);
    AFBEcCD = addProduct_9(AFBEc, CD);
    tryte2 = AFBEcCD[17:0];
    carry2 = AFBEcCD[35:18];
    BFCD = addProduct_9(BF, CE);
    BFCDc = addCarryToProduct_9(BFCD[35:0], carry2, AFBEcCD[37:36]);
    tryte3 = BFCDc[17:0];
    carry3 = BFCDc[35:18];
    CFc = addCarryToProduct_9(CF, carry3, 2'b00);
    fullMul_27 = { { { { tryte0 : tryte1 } : tryte2 } : tryte3 } : CFc };
  end
endfunction

function [37:0] addProduct_9(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [19:0] lo;
  reg [19:0] hi;
  
  begin
    lo = fullAdd_9(lhs[17:0], rhs[17:0], 2'b00);
    hi = fullAdd_9(lhs[35:18], rhs[35:18], lo[19:18]);
    addProduct_9 = { lo[17:0] : hi };
  end
endfunction

function [35:0] addCarryToProduct_9(
    input [35:0] lhs
  , input [17:0] carry
  , input [1:0] extraTrit
  );
  reg [19:0] lo;
  reg [19:0] hi;
  
  begin
    lo = fullAdd_9(lhs[17:0], carry, extraTrit);
    hi = halfAdd_9(lhs[35:18], lo[19:18]);
    addCarryToProduct_9 = { lo[17:0] : hi[17:0] };
  end
endfunction

function [323:0] fullMul_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [53:0] A;
  reg [53:0] B;
  reg [53:0] C;
  reg [53:0] D;
  reg [53:0] E;
  reg [53:0] F;
  reg [107:0] AD;
  reg [107:0] AE;
  reg [107:0] AF;
  reg [107:0] BD;
  reg [107:0] BE;
  reg [107:0] BF;
  reg [107:0] CD;
  reg [107:0] CE;
  reg [107:0] CF;
  reg [53:0] tryte0;
  reg [53:0] carry0;
  reg [109:0] AEBD;
  reg [107:0] AEBDc;
  reg [53:0] tryte1;
  reg [53:0] carry1;
  reg [109:0] AFBE;
  reg [107:0] AFBEc;
  reg [109:0] AFBEcCD;
  reg [53:0] tryte2;
  reg [53:0] carry2;
  reg [109:0] BFCD;
  reg [107:0] BFCDc;
  reg [53:0] tryte3;
  reg [53:0] carry3;
  reg [107:0] CFc;
  
  begin
    A = lhs[53:0];
    B = lhs[107:54];
    C = lhs[161:108];
    D = rhs[53:0];
    E = rhs[107:54];
    F = rhs[161:108];
    AD = fullMul_27(A, D);
    AE = fullMul_27(A, E);
    AF = fullMul_27(A, F);
    BD = fullMul_27(B, D);
    BE = fullMul_27(B, E);
    BF = fullMul_27(B, F);
    CD = fullMul_27(C, D);
    CE = fullMul_27(C, E);
    CF = fullMul_27(C, F);
    tryte0 = AD[53:0];
    carry0 = AD[107:54];
    AEBD = addProduct_27(AE, BD);
    AEBDc = addCarryToProduct_27(AEBD[107:0], carry0, 2'b00);
    tryte1 = AEBDc[53:0];
    carry1 = AEBDc[107:54];
    AFBE = addProduct_27(AF, BE);
    AFBEc = addCarryToProduct_27(AFBE[107:0], carry1, 2'b00);
    AFBEcCD = addProduct_27(AFBEc, CD);
    tryte2 = AFBEcCD[53:0];
    carry2 = AFBEcCD[107:54];
    BFCD = addProduct_27(BF, CE);
    BFCDc = addCarryToProduct_27(BFCD[107:0], carry2, AFBEcCD[109:108]);
    tryte3 = BFCDc[53:0];
    carry3 = BFCDc[107:54];
    CFc = addCarryToProduct_27(CF, carry3, 2'b00);
    fullMul_81 = { { { { tryte0 : tryte1 } : tryte2 } : tryte3 } : CFc };
  end
endfunction

function [109:0] addProduct_27(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [55:0] lo;
  reg [55:0] hi;
  
  begin
    lo = fullAdd_27(lhs[53:0], rhs[53:0], 2'b00);
    hi = fullAdd_27(lhs[107:54], rhs[107:54], lo[55:54]);
    addProduct_27 = { lo[53:0] : hi };
  end
endfunction

function [107:0] addCarryToProduct_27(
    input [107:0] lhs
  , input [53:0] carry
  , input [1:0] extraTrit
  );
  reg [55:0] lo;
  reg [55:0] hi;
  
  begin
    lo = fullAdd_27(lhs[53:0], carry, extraTrit);
    hi = halfAdd_27(lhs[107:54], lo[55:54]);
    addCarryToProduct_27 = { lo[53:0] : hi[53:0] };
  end
endfunction

function [971:0] fullMul_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [161:0] A;
  reg [161:0] B;
  reg [161:0] C;
  reg [161:0] D;
  reg [161:0] E;
  reg [161:0] F;
  reg [323:0] AD;
  reg [323:0] AE;
  reg [323:0] AF;
  reg [323:0] BD;
  reg [323:0] BE;
  reg [323:0] BF;
  reg [323:0] CD;
  reg [323:0] CE;
  reg [323:0] CF;
  reg [161:0] tryte0;
  reg [161:0] carry0;
  reg [325:0] AEBD;
  reg [323:0] AEBDc;
  reg [161:0] tryte1;
  reg [161:0] carry1;
  reg [325:0] AFBE;
  reg [323:0] AFBEc;
  reg [325:0] AFBEcCD;
  reg [161:0] tryte2;
  reg [161:0] carry2;
  reg [325:0] BFCD;
  reg [323:0] BFCDc;
  reg [161:0] tryte3;
  reg [161:0] carry3;
  reg [323:0] CFc;
  
  begin
    A = lhs[161:0];
    B = lhs[323:162];
    C = lhs[485:324];
    D = rhs[161:0];
    E = rhs[323:162];
    F = rhs[485:324];
    AD = fullMul_81(A, D);
    AE = fullMul_81(A, E);
    AF = fullMul_81(A, F);
    BD = fullMul_81(B, D);
    BE = fullMul_81(B, E);
    BF = fullMul_81(B, F);
    CD = fullMul_81(C, D);
    CE = fullMul_81(C, E);
    CF = fullMul_81(C, F);
    tryte0 = AD[161:0];
    carry0 = AD[323:162];
    AEBD = addProduct_81(AE, BD);
    AEBDc = addCarryToProduct_81(AEBD[323:0], carry0, 2'b00);
    tryte1 = AEBDc[161:0];
    carry1 = AEBDc[323:162];
    AFBE = addProduct_81(AF, BE);
    AFBEc = addCarryToProduct_81(AFBE[323:0], carry1, 2'b00);
    AFBEcCD = addProduct_81(AFBEc, CD);
    tryte2 = AFBEcCD[161:0];
    carry2 = AFBEcCD[323:162];
    BFCD = addProduct_81(BF, CE);
    BFCDc = addCarryToProduct_81(BFCD[323:0], carry2, AFBEcCD[325:324]);
    tryte3 = BFCDc[161:0];
    carry3 = BFCDc[323:162];
    CFc = addCarryToProduct_81(CF, carry3, 2'b00);
    fullMul_243 = { { { { tryte0 : tryte1 } : tryte2 } : tryte3 } : CFc };
  end
endfunction

function [325:0] addProduct_81(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [163:0] lo;
  reg [163:0] hi;
  
  begin
    lo = fullAdd_81(lhs[161:0], rhs[161:0], 2'b00);
    hi = fullAdd_81(lhs[323:162], rhs[323:162], lo[163:162]);
    addProduct_81 = { lo[161:0] : hi };
  end
endfunction

function [323:0] addCarryToProduct_81(
    input [323:0] lhs
  , input [161:0] carry
  , input [1:0] extraTrit
  );
  reg [163:0] lo;
  reg [163:0] hi;
  
  begin
    lo = fullAdd_81(lhs[161:0], carry, extraTrit);
    hi = halfAdd_81(lhs[323:162], lo[163:162]);
    addCarryToProduct_81 = { lo[161:0] : hi[161:0] };
  end
endfunction

function [23:0] fullMul_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [5:0] zero;
  reg [35:0] product;
  
  begin
    zero = as_3(6'b000000);
    product = fullMul_9({ lhs : zero }, { rhs : zero });
    fullMul_6 = product[23:0];
  end
endfunction

function [71:0] fullMul_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [17:0] zero;
  reg [107:0] product;
  
  begin
    zero = as_9(18'b000000000000000000);
    product = fullMul_27({ lhs : zero }, { rhs : zero });
    fullMul_18 = product[71:0];
  end
endfunction

function [143:0] fullMul_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [35:0] zero;
  reg [215:0] product;
  
  begin
    zero = as_18(36'b000000000000000000000000000000000000);
    product = fullMul_54({ lhs : zero }, { rhs : zero });
    fullMul_36 = product[143:0];
  end
endfunction

function [215:0] fullMul_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [53:0] zero;
  reg [323:0] product;
  
  begin
    zero = as_27(54'b000000000000000000000000000000000000000000000000000000);
    product = fullMul_81({ lhs : zero }, { rhs : zero });
    fullMul_54 = product[215:0];
  end
endfunction

function [647:0] fullMul_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [161:0] zero;
  reg [971:0] product;
  
  begin
    zero = as_81(162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    product = fullMul_243({ lhs : zero }, { rhs : zero });
    fullMul_162 = product[647:0];
  end
endfunction

function [7:0] halfAdd_3(
    input [5:0] val
  , input [1:0] carry
  );
  reg [3:0] add0;
  reg [3:0] add1;
  reg [3:0] add2;
  
  begin
    add0 = halfAdd_1(val[1:0], carry);
    add1 = halfAdd_1(val[3:2], add0[3:2]);
    add2 = halfAdd_1(val[5:4], add1[3:2]);
    halfAdd_3 = { { add0[1:0] : add1[1:0] } : add2 };
  end
endfunction

function [19:0] halfAdd_9(
    input [17:0] val
  , input [1:0] carry
  );
  reg [7:0] add0;
  reg [7:0] add1;
  reg [7:0] add2;
  
  begin
    add0 = halfAdd_3(val[5:0], carry);
    add1 = halfAdd_3(val[11:6], add0[7:6]);
    add2 = halfAdd_3(val[17:12], add1[7:6]);
    halfAdd_9 = { { add0[5:0] : add1[5:0] } : add2 };
  end
endfunction

function [55:0] halfAdd_27(
    input [53:0] val
  , input [1:0] carry
  );
  reg [19:0] add0;
  reg [19:0] add1;
  reg [19:0] add2;
  
  begin
    add0 = halfAdd_9(val[17:0], carry);
    add1 = halfAdd_9(val[35:18], add0[19:18]);
    add2 = halfAdd_9(val[53:36], add1[19:18]);
    halfAdd_27 = { { add0[17:0] : add1[17:0] } : add2 };
  end
endfunction

function [163:0] halfAdd_81(
    input [161:0] val
  , input [1:0] carry
  );
  reg [55:0] add0;
  reg [55:0] add1;
  reg [55:0] add2;
  
  begin
    add0 = halfAdd_27(val[53:0], carry);
    add1 = halfAdd_27(val[107:54], add0[55:54]);
    add2 = halfAdd_27(val[161:108], add1[55:54]);
    halfAdd_81 = { { add0[53:0] : add1[53:0] } : add2 };
  end
endfunction

function [487:0] halfAdd_243(
    input [485:0] val
  , input [1:0] carry
  );
  reg [163:0] add0;
  reg [163:0] add1;
  reg [163:0] add2;
  
  begin
    add0 = halfAdd_81(val[161:0], carry);
    add1 = halfAdd_81(val[323:162], add0[163:162]);
    add2 = halfAdd_81(val[485:324], add1[163:162]);
    halfAdd_243 = { { add0[161:0] : add1[161:0] } : add2 };
  end
endfunction

function [13:0] halfAdd_6(
    input [11:0] val
  , input [1:0] carry
  );
  reg [7:0] add0;
  reg [7:0] add1;
  
  begin
    add0 = halfAdd_3(val[5:0], carry);
    add1 = halfAdd_3(val[11:6], add0[7:6]);
    halfAdd_6 = { add0[5:0] : add1 };
  end
endfunction

function [37:0] halfAdd_18(
    input [35:0] val
  , input [1:0] carry
  );
  reg [19:0] add0;
  reg [19:0] add1;
  
  begin
    add0 = halfAdd_9(val[17:0], carry);
    add1 = halfAdd_9(val[35:18], add0[19:18]);
    halfAdd_18 = { add0[17:0] : add1 };
  end
endfunction

function [73:0] halfAdd_36(
    input [71:0] val
  , input [1:0] carry
  );
  reg [37:0] add0;
  reg [37:0] add1;
  
  begin
    add0 = halfAdd_18(val[35:0], carry);
    add1 = halfAdd_18(val[71:36], add0[37:36]);
    halfAdd_36 = { add0[35:0] : add1 };
  end
endfunction

function [109:0] halfAdd_54(
    input [107:0] val
  , input [1:0] carry
  );
  reg [55:0] add0;
  reg [55:0] add1;
  
  begin
    add0 = halfAdd_27(val[53:0], carry);
    add1 = halfAdd_27(val[107:54], add0[55:54]);
    halfAdd_54 = { add0[53:0] : add1 };
  end
endfunction

function [325:0] halfAdd_162(
    input [323:0] val
  , input [1:0] carry
  );
  reg [163:0] add0;
  reg [163:0] add1;
  
  begin
    add0 = halfAdd_81(val[161:0], carry);
    add1 = halfAdd_81(val[323:162], add0[163:162]);
    halfAdd_162 = { add0[161:0] : add1 };
  end
endfunction

function [1:0] incr_1(
    input [1:0] val
  );
  reg [3:0] halfSum;
  
  begin
    halfSum = halfAdd_1(val, 2'b01);
    incr_1 = halfSum[1:0];
  end
endfunction

function [5:0] incr_3(
    input [5:0] val
  );
  reg [7:0] halfSum;
  
  begin
    halfSum = halfAdd_3(val, 2'b01);
    incr_3 = halfSum[5:0];
  end
endfunction

function [17:0] incr_9(
    input [17:0] val
  );
  reg [19:0] halfSum;
  
  begin
    halfSum = halfAdd_9(val, 2'b01);
    incr_9 = halfSum[17:0];
  end
endfunction

function [53:0] incr_27(
    input [53:0] val
  );
  reg [55:0] halfSum;
  
  begin
    halfSum = halfAdd_27(val, 2'b01);
    incr_27 = halfSum[53:0];
  end
endfunction

function [161:0] incr_81(
    input [161:0] val
  );
  reg [163:0] halfSum;
  
  begin
    halfSum = halfAdd_81(val, 2'b01);
    incr_81 = halfSum[161:0];
  end
endfunction

function [485:0] incr_243(
    input [485:0] val
  );
  reg [487:0] halfSum;
  
  begin
    halfSum = halfAdd_243(val, 2'b01);
    incr_243 = halfSum[485:0];
  end
endfunction

function [11:0] incr_6(
    input [11:0] val
  );
  reg [13:0] halfSum;
  
  begin
    halfSum = halfAdd_6(val, 2'b01);
    incr_6 = halfSum[11:0];
  end
endfunction

function [35:0] incr_18(
    input [35:0] val
  );
  reg [37:0] halfSum;
  
  begin
    halfSum = halfAdd_18(val, 2'b01);
    incr_18 = halfSum[35:0];
  end
endfunction

function [71:0] incr_36(
    input [71:0] val
  );
  reg [73:0] halfSum;
  
  begin
    halfSum = halfAdd_36(val, 2'b01);
    incr_36 = halfSum[71:0];
  end
endfunction

function [107:0] incr_54(
    input [107:0] val
  );
  reg [109:0] halfSum;
  
  begin
    halfSum = halfAdd_54(val, 2'b01);
    incr_54 = halfSum[107:0];
  end
endfunction

function [323:0] incr_162(
    input [323:0] val
  );
  reg [325:0] halfSum;
  
  begin
    halfSum = halfAdd_162(val, 2'b01);
    incr_162 = halfSum[323:0];
  end
endfunction

function [5:0] max_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  begin
    max_3 = isGreater_lut(cmp_3(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [17:0] max_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  begin
    max_9 = isGreater_lut(cmp_9(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [53:0] max_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  begin
    max_27 = isGreater_lut(cmp_27(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [161:0] max_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  begin
    max_81 = isGreater_lut(cmp_81(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [485:0] max_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  begin
    max_243 = isGreater_lut(cmp_243(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [11:0] max_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  begin
    max_6 = isGreater_lut(cmp_6(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [35:0] max_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  begin
    max_18 = isGreater_lut(cmp_18(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [71:0] max_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  begin
    max_36 = isGreater_lut(cmp_36(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [107:0] max_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  begin
    max_54 = isGreater_lut(cmp_54(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [323:0] max_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  begin
    max_162 = isGreater_lut(cmp_162(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [5:0] min_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  begin
    min_3 = isLess_lut(cmp_3(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [17:0] min_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  begin
    min_9 = isLess_lut(cmp_9(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [53:0] min_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  begin
    min_27 = isLess_lut(cmp_27(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [161:0] min_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  begin
    min_81 = isLess_lut(cmp_81(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [485:0] min_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  begin
    min_243 = isLess_lut(cmp_243(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [11:0] min_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  begin
    min_6 = isLess_lut(cmp_6(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [35:0] min_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  begin
    min_18 = isLess_lut(cmp_18(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [71:0] min_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  begin
    min_36 = isLess_lut(cmp_36(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [107:0] min_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  begin
    min_54 = isLess_lut(cmp_54(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [323:0] min_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  begin
    min_162 = isLess_lut(cmp_162(lhs, rhs)) == 2'b01 ? lhs : rhs;
  end
endfunction

function [5:0] mod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = divMod_3(lhs, rhs);
    mod_3 = ret[11:6];
  end
endfunction

function [5:0] ceilMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = ceilDivMod_3(lhs, rhs);
    ceilMod_3 = ret[11:6];
  end
endfunction

function [5:0] floorMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = floorDivMod_3(lhs, rhs);
    floorMod_3 = ret[11:6];
  end
endfunction

function [5:0] roundMod_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] ret;
  
  begin
    ret = roundDivMod_3(lhs, rhs);
    roundMod_3 = ret[11:6];
  end
endfunction

function [17:0] mod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = divMod_9(lhs, rhs);
    mod_9 = ret[35:18];
  end
endfunction

function [17:0] ceilMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = ceilDivMod_9(lhs, rhs);
    ceilMod_9 = ret[35:18];
  end
endfunction

function [17:0] floorMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = floorDivMod_9(lhs, rhs);
    floorMod_9 = ret[35:18];
  end
endfunction

function [17:0] roundMod_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] ret;
  
  begin
    ret = roundDivMod_9(lhs, rhs);
    roundMod_9 = ret[35:18];
  end
endfunction

function [53:0] mod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = divMod_27(lhs, rhs);
    mod_27 = ret[107:54];
  end
endfunction

function [53:0] ceilMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = ceilDivMod_27(lhs, rhs);
    ceilMod_27 = ret[107:54];
  end
endfunction

function [53:0] floorMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = floorDivMod_27(lhs, rhs);
    floorMod_27 = ret[107:54];
  end
endfunction

function [53:0] roundMod_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] ret;
  
  begin
    ret = roundDivMod_27(lhs, rhs);
    roundMod_27 = ret[107:54];
  end
endfunction

function [161:0] mod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = divMod_81(lhs, rhs);
    mod_81 = ret[323:162];
  end
endfunction

function [161:0] ceilMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = ceilDivMod_81(lhs, rhs);
    ceilMod_81 = ret[323:162];
  end
endfunction

function [161:0] floorMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = floorDivMod_81(lhs, rhs);
    floorMod_81 = ret[323:162];
  end
endfunction

function [161:0] roundMod_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] ret;
  
  begin
    ret = roundDivMod_81(lhs, rhs);
    roundMod_81 = ret[323:162];
  end
endfunction

function [5:0] mul_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [11:0] product;
  
  begin
    product = fullMul_3(lhs, rhs);
    mul_3 = product[5:0];
  end
endfunction

function [17:0] mul_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [35:0] product;
  
  begin
    product = fullMul_9(lhs, rhs);
    mul_9 = product[17:0];
  end
endfunction

function [53:0] mul_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [107:0] product;
  
  begin
    product = fullMul_27(lhs, rhs);
    mul_27 = product[53:0];
  end
endfunction

function [161:0] mul_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [323:0] product;
  
  begin
    product = fullMul_81(lhs, rhs);
    mul_81 = product[161:0];
  end
endfunction

function [11:0] mul_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [23:0] product;
  
  begin
    product = fullMul_6(lhs, rhs);
    mul_6 = product[11:0];
  end
endfunction

function [35:0] mul_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [71:0] product;
  
  begin
    product = fullMul_18(lhs, rhs);
    mul_18 = product[35:0];
  end
endfunction

function [71:0] mul_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [143:0] product;
  
  begin
    product = fullMul_36(lhs, rhs);
    mul_36 = product[71:0];
  end
endfunction

function [107:0] mul_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [215:0] product;
  
  begin
    product = fullMul_54(lhs, rhs);
    mul_54 = product[107:0];
  end
endfunction

function [323:0] mul_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [647:0] product;
  
  begin
    product = fullMul_162(lhs, rhs);
    mul_162 = product[323:0];
  end
endfunction

function [5:0] neg_3(
    input [5:0] val
  );
  begin
    neg_3 = { { neg_1(val[1:0]) : neg_1(val[3:2]) } : neg_1(val[5:4]) };
  end
endfunction

function [17:0] neg_9(
    input [17:0] val
  );
  begin
    neg_9 = { { neg_3(val[5:0]) : neg_3(val[11:6]) } : neg_3(val[17:12]) };
  end
endfunction

function [53:0] neg_27(
    input [53:0] val
  );
  begin
    neg_27 = { { neg_9(val[17:0]) : neg_9(val[35:18]) } : neg_9(val[53:36]) };
  end
endfunction

function [161:0] neg_81(
    input [161:0] val
  );
  begin
    neg_81 = { { neg_27(val[53:0]) : neg_27(val[107:54]) } : neg_27(val[161:108]) };
  end
endfunction

function [485:0] neg_243(
    input [485:0] val
  );
  begin
    neg_243 = { { neg_81(val[161:0]) : neg_81(val[323:162]) } : neg_81(val[485:324]) };
  end
endfunction

function [11:0] neg_6(
    input [11:0] val
  );
  begin
    neg_6 = { neg_3(val[5:0]) : neg_3(val[11:6]) };
  end
endfunction

function [35:0] neg_18(
    input [35:0] val
  );
  begin
    neg_18 = { neg_9(val[17:0]) : neg_9(val[35:18]) };
  end
endfunction

function [71:0] neg_36(
    input [71:0] val
  );
  begin
    neg_36 = { neg_18(val[35:0]) : neg_18(val[71:36]) };
  end
endfunction

function [107:0] neg_54(
    input [107:0] val
  );
  begin
    neg_54 = { neg_27(val[53:0]) : neg_27(val[107:54]) };
  end
endfunction

function [323:0] neg_162(
    input [323:0] val
  );
  begin
    neg_162 = { neg_81(val[161:0]) : neg_81(val[323:162]) };
  end
endfunction

function [1:0] sign_3(
    input [5:0] val
  );
  begin
    sign_3 = sign_lut(sign_1(val[1:0]), sign_1(val[3:2]), sign_1(val[5:4]));
  end
endfunction

function [1:0] sign_9(
    input [17:0] val
  );
  begin
    sign_9 = sign_lut(sign_3(val[5:0]), sign_3(val[11:6]), sign_3(val[17:12]));
  end
endfunction

function [1:0] sign_27(
    input [53:0] val
  );
  begin
    sign_27 = sign_lut(sign_9(val[17:0]), sign_9(val[35:18]), sign_9(val[53:36]));
  end
endfunction

function [1:0] sign_81(
    input [161:0] val
  );
  begin
    sign_81 = sign_lut(sign_27(val[53:0]), sign_27(val[107:54]), sign_27(val[161:108]));
  end
endfunction

function [1:0] sign_243(
    input [485:0] val
  );
  begin
    sign_243 = sign_lut(sign_81(val[161:0]), sign_81(val[323:162]), sign_81(val[485:324]));
  end
endfunction

function [1:0] sign_6(
    input [11:0] val
  );
  begin
    sign_6 = sign_lut(sign_3(val[5:0]), sign_3(val[11:6]), 2'b00);
  end
endfunction

function [1:0] sign_18(
    input [35:0] val
  );
  begin
    sign_18 = sign_lut(sign_9(val[17:0]), sign_9(val[35:18]), 2'b00);
  end
endfunction

function [1:0] sign_36(
    input [71:0] val
  );
  begin
    sign_36 = sign_lut(sign_18(val[35:0]), sign_18(val[71:36]), 2'b00);
  end
endfunction

function [1:0] sign_54(
    input [107:0] val
  );
  begin
    sign_54 = sign_lut(sign_27(val[53:0]), sign_27(val[107:54]), 2'b00);
  end
endfunction

function [1:0] sign_162(
    input [323:0] val
  );
  begin
    sign_162 = sign_lut(sign_81(val[161:0]), sign_81(val[323:162]), 2'b00);
  end
endfunction

function [1:0] sub_1(
    input [1:0] lhs
  , input [1:0] rhs
  );
  reg [3:0] sum;
  
  begin
    sum = fullAdd_1(lhs, neg_1(rhs), 2'b00);
    sub_1 = sum[1:0];
  end
endfunction

function [5:0] sub_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  reg [7:0] sum;
  
  begin
    sum = fullAdd_3(lhs, neg_3(rhs), 2'b00);
    sub_3 = sum[5:0];
  end
endfunction

function [17:0] sub_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  reg [19:0] sum;
  
  begin
    sum = fullAdd_9(lhs, neg_9(rhs), 2'b00);
    sub_9 = sum[17:0];
  end
endfunction

function [53:0] sub_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  reg [55:0] sum;
  
  begin
    sum = fullAdd_27(lhs, neg_27(rhs), 2'b00);
    sub_27 = sum[53:0];
  end
endfunction

function [161:0] sub_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  reg [163:0] sum;
  
  begin
    sum = fullAdd_81(lhs, neg_81(rhs), 2'b00);
    sub_81 = sum[161:0];
  end
endfunction

function [485:0] sub_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [487:0] sum;
  
  begin
    sum = fullAdd_243(lhs, neg_243(rhs), 2'b00);
    sub_243 = sum[485:0];
  end
endfunction

function [11:0] sub_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  reg [13:0] sum;
  
  begin
    sum = fullAdd_6(lhs, neg_6(rhs), 2'b00);
    sub_6 = sum[11:0];
  end
endfunction

function [35:0] sub_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  reg [37:0] sum;
  
  begin
    sum = fullAdd_18(lhs, neg_18(rhs), 2'b00);
    sub_18 = sum[35:0];
  end
endfunction

function [71:0] sub_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  reg [73:0] sum;
  
  begin
    sum = fullAdd_36(lhs, neg_36(rhs), 2'b00);
    sub_36 = sum[71:0];
  end
endfunction

function [107:0] sub_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  reg [109:0] sum;
  
  begin
    sum = fullAdd_54(lhs, neg_54(rhs), 2'b00);
    sub_54 = sum[107:0];
  end
endfunction

function [323:0] sub_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  reg [325:0] sum;
  
  begin
    sum = fullAdd_162(lhs, neg_162(rhs), 2'b00);
    sub_162 = sum[323:0];
  end
endfunction

function [1:0] print_1(
    input [1:0] val
  );
  begin
    print_1 = val;
  end
endfunction

function [5:0] print_3(
    input [5:0] val
  );
  begin
    print_3 = val;
  end
endfunction

function [17:0] print_9(
    input [17:0] val
  );
  begin
    print_9 = val;
  end
endfunction

function [53:0] print_27(
    input [53:0] val
  );
  begin
    print_27 = val;
  end
endfunction

function [161:0] print_81(
    input [161:0] val
  );
  begin
    print_81 = val;
  end
endfunction

function [485:0] print_243(
    input [485:0] val
  );
  begin
    print_243 = val;
  end
endfunction

function [11:0] print_6(
    input [11:0] val
  );
  begin
    print_6 = val;
  end
endfunction

function [35:0] print_18(
    input [35:0] val
  );
  begin
    print_18 = val;
  end
endfunction

function [71:0] print_36(
    input [71:0] val
  );
  begin
    print_36 = val;
  end
endfunction

function [107:0] print_54(
    input [107:0] val
  );
  begin
    print_54 = val;
  end
endfunction

function [323:0] print_162(
    input [323:0] val
  );
  begin
    print_162 = val;
  end
endfunction

function [971:0] print_486(
    input [971:0] val
  );
  begin
    print_486 = val;
  end
endfunction

function [1:0] quorum_1(
    input [1:0] val1
  , input [1:0] val2
  , input [1:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_1(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_1(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_1(val3, val1));
    quorum_1 = Qupla_merge_1(Qupla_merge_1(equal1 == 2'b01 ? val1 : 2'b10, equal2 == 2'b01 ? val2 : 2'b10), equal3 == 2'b01 ? val3 : 2'b10);
  end
endfunction

function [5:0] quorum_3(
    input [5:0] val1
  , input [5:0] val2
  , input [5:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_3(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_3(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_3(val3, val1));
    quorum_3 = Qupla_merge_3(Qupla_merge_3(equal1 == 2'b01 ? val1 : 6'b101010, equal2 == 2'b01 ? val2 : 6'b101010), equal3 == 2'b01 ? val3 : 6'b101010);
  end
endfunction

function [17:0] quorum_9(
    input [17:0] val1
  , input [17:0] val2
  , input [17:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_9(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_9(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_9(val3, val1));
    quorum_9 = Qupla_merge_9(Qupla_merge_9(equal1 == 2'b01 ? val1 : 18'b101010101010101010, equal2 == 2'b01 ? val2 : 18'b101010101010101010), equal3 == 2'b01 ? val3 : 18'b101010101010101010);
  end
endfunction

function [53:0] quorum_27(
    input [53:0] val1
  , input [53:0] val2
  , input [53:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_27(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_27(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_27(val3, val1));
    quorum_27 = Qupla_merge_27(Qupla_merge_27(equal1 == 2'b01 ? val1 : 54'b101010101010101010101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 54'b101010101010101010101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 54'b101010101010101010101010101010101010101010101010101010);
  end
endfunction

function [161:0] quorum_81(
    input [161:0] val1
  , input [161:0] val2
  , input [161:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_81(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_81(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_81(val3, val1));
    quorum_81 = Qupla_merge_81(Qupla_merge_81(equal1 == 2'b01 ? val1 : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 162'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
  end
endfunction

function [485:0] quorum_243(
    input [485:0] val1
  , input [485:0] val2
  , input [485:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_243(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_243(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_243(val3, val1));
    quorum_243 = Qupla_merge_243(Qupla_merge_243(equal1 == 2'b01 ? val1 : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 486'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
  end
endfunction

function [11:0] quorum_6(
    input [11:0] val1
  , input [11:0] val2
  , input [11:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_6(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_6(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_6(val3, val1));
    quorum_6 = Qupla_merge_6(Qupla_merge_6(equal1 == 2'b01 ? val1 : 12'b101010101010, equal2 == 2'b01 ? val2 : 12'b101010101010), equal3 == 2'b01 ? val3 : 12'b101010101010);
  end
endfunction

function [35:0] quorum_18(
    input [35:0] val1
  , input [35:0] val2
  , input [35:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_18(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_18(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_18(val3, val1));
    quorum_18 = Qupla_merge_18(Qupla_merge_18(equal1 == 2'b01 ? val1 : 36'b101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 36'b101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 36'b101010101010101010101010101010101010);
  end
endfunction

function [71:0] quorum_36(
    input [71:0] val1
  , input [71:0] val2
  , input [71:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_36(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_36(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_36(val3, val1));
    quorum_36 = Qupla_merge_36(Qupla_merge_36(equal1 == 2'b01 ? val1 : 72'b101010101010101010101010101010101010101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 72'b101010101010101010101010101010101010101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 72'b101010101010101010101010101010101010101010101010101010101010101010101010);
  end
endfunction

function [107:0] quorum_54(
    input [107:0] val1
  , input [107:0] val2
  , input [107:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_54(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_54(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_54(val3, val1));
    quorum_54 = Qupla_merge_54(Qupla_merge_54(equal1 == 2'b01 ? val1 : 108'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 108'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 108'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
  end
endfunction

function [323:0] quorum_162(
    input [323:0] val1
  , input [323:0] val2
  , input [323:0] val3
  );
  reg [1:0] equal1;
  reg [1:0] equal2;
  reg [1:0] equal3;
  
  begin
    equal1 = equal_162(val1, val2);
    equal2 = and_lut(not_lut(equal1), equal_162(val2, val3));
    equal3 = and_lut(not_lut(equal2), equal_162(val3, val1));
    quorum_162 = Qupla_merge_162(Qupla_merge_162(equal1 == 2'b01 ? val1 : 324'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, equal2 == 2'b01 ? val2 : 324'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010), equal3 == 2'b01 ? val3 : 324'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010);
  end
endfunction

function [5:0] rshift_3(
    input [5:0] val
  );
  begin
    rshift_3 = { 2'b00 : val[3:0] };
  end
endfunction

function [17:0] rshift_9(
    input [17:0] val
  );
  begin
    rshift_9 = { 2'b00 : val[15:0] };
  end
endfunction

function [53:0] rshift_27(
    input [53:0] val
  );
  begin
    rshift_27 = { 2'b00 : val[51:0] };
  end
endfunction

function [161:0] rshift_81(
    input [161:0] val
  );
  begin
    rshift_81 = { 2'b00 : val[159:0] };
  end
endfunction

function [485:0] rshift_243(
    input [485:0] val
  );
  begin
    rshift_243 = { 2'b00 : val[483:0] };
  end
endfunction

function [11:0] rshift_6(
    input [11:0] val
  );
  begin
    rshift_6 = { 2'b00 : val[9:0] };
  end
endfunction

function [35:0] rshift_18(
    input [35:0] val
  );
  begin
    rshift_18 = { 2'b00 : val[33:0] };
  end
endfunction

function [71:0] rshift_36(
    input [71:0] val
  );
  begin
    rshift_36 = { 2'b00 : val[69:0] };
  end
endfunction

function [107:0] rshift_54(
    input [107:0] val
  );
  begin
    rshift_54 = { 2'b00 : val[105:0] };
  end
endfunction

function [323:0] rshift_162(
    input [323:0] val
  );
  begin
    rshift_162 = { 2'b00 : val[321:0] };
  end
endfunction

function [971:0] rshift_486(
    input [971:0] val
  );
  begin
    rshift_486 = { 2'b00 : val[969:0] };
  end
endfunction

function [1:0] unequal_3(
    input [5:0] lhs
  , input [5:0] rhs
  );
  begin
    unequal_3 = or3_lut(unequal_1(lhs[1:0], rhs[1:0]), unequal_1(lhs[3:2], rhs[3:2]), unequal_1(lhs[5:4], rhs[5:4]));
  end
endfunction

function [1:0] unequal_9(
    input [17:0] lhs
  , input [17:0] rhs
  );
  begin
    unequal_9 = or3_lut(unequal_3(lhs[5:0], rhs[5:0]), unequal_3(lhs[11:6], rhs[11:6]), unequal_3(lhs[17:12], rhs[17:12]));
  end
endfunction

function [1:0] unequal_27(
    input [53:0] lhs
  , input [53:0] rhs
  );
  begin
    unequal_27 = or3_lut(unequal_9(lhs[17:0], rhs[17:0]), unequal_9(lhs[35:18], rhs[35:18]), unequal_9(lhs[53:36], rhs[53:36]));
  end
endfunction

function [1:0] unequal_81(
    input [161:0] lhs
  , input [161:0] rhs
  );
  begin
    unequal_81 = or3_lut(unequal_27(lhs[53:0], rhs[53:0]), unequal_27(lhs[107:54], rhs[107:54]), unequal_27(lhs[161:108], rhs[161:108]));
  end
endfunction

function [1:0] unequal_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  begin
    unequal_243 = or3_lut(unequal_81(lhs[161:0], rhs[161:0]), unequal_81(lhs[323:162], rhs[323:162]), unequal_81(lhs[485:324], rhs[485:324]));
  end
endfunction

function [1:0] unequal_6(
    input [11:0] lhs
  , input [11:0] rhs
  );
  begin
    unequal_6 = or_lut(unequal_3(lhs[5:0], rhs[5:0]), unequal_3(lhs[11:6], rhs[11:6]));
  end
endfunction

function [1:0] unequal_18(
    input [35:0] lhs
  , input [35:0] rhs
  );
  begin
    unequal_18 = or_lut(unequal_9(lhs[17:0], rhs[17:0]), unequal_9(lhs[35:18], rhs[35:18]));
  end
endfunction

function [1:0] unequal_36(
    input [71:0] lhs
  , input [71:0] rhs
  );
  begin
    unequal_36 = or_lut(unequal_18(lhs[35:0], rhs[35:0]), unequal_18(lhs[71:36], rhs[71:36]));
  end
endfunction

function [1:0] unequal_54(
    input [107:0] lhs
  , input [107:0] rhs
  );
  begin
    unequal_54 = or_lut(unequal_27(lhs[53:0], rhs[53:0]), unequal_27(lhs[107:54], rhs[107:54]));
  end
endfunction

function [1:0] unequal_162(
    input [323:0] lhs
  , input [323:0] rhs
  );
  begin
    unequal_162 = or_lut(unequal_81(lhs[161:0], rhs[161:0]), unequal_81(lhs[323:162], rhs[323:162]));
  end
endfunction

function [2915:0] digest(
    input [1457:0] s
  );
  begin
    digest = { s : transform(s, 18'b000000000100000000) };
  end
endfunction

function [1457:0] transform(
    input [1457:0] s
  , input [17:0] round
  );
  reg [17:0] roundMinusOne;
  reg [1:0] roundZero;
  reg [1457:0] newState;
  reg [1457:0] stateOut;
  reg [1457:0] stateNext;
  reg [17:0] roundNext;
  reg [1457:0] stateFinal;
  
  begin
    roundMinusOne = decr_9(round);
    roundZero = equal_9(roundMinusOne, 18'b000000000000000000);
    newState = curlRound(s);
    stateOut = roundZero == 2'b01 ? newState : 1458'b
    stateNext = not_lut(roundZero) == 2'b01 ? newState : 1458'b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    roundNext = not_lut(roundZero) == 2'b01 ? roundMinusOne : 18'b101010101010101010;
    stateFinal = transform(stateNext, roundNext);
    transform = Qupla_merge_729(stateOut, stateFinal);
  end
endfunction

function [1457:0] curlRound(
    input [1457:0] s
  );
  begin
    curlRound = { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { curl_lut(s[1:0], s[729:728]) : curl_lut(s[729:728], s[1457:1456]) } : curl_lut(s[1457:1456], s[727:726]) } : curl_lut(s[727:726], s[1455:1454]) } : curl_lut(s[1455:1454], s[725:724]) } : curl_lut(s[725:724], s[1453:1452]) } : curl_lut(s[1453:1452], s[723:722]) } : curl_lut(s[723:722], s[1451:1450]) } : curl_lut(s[1451:1450], s[721:720]) } : curl_lut(s[721:720], s[1449:1448]) } : curl_lut(s[1449:1448], s[719:718]) } : curl_lut(s[719:718], s[1447:1446]) } : curl_lut(s[1447:1446], s[717:716]) } : curl_lut(s[717:716], s[1445:1444]) } : curl_lut(s[1445:1444], s[715:714]) } : curl_lut(s[715:714], s[1443:1442]) } : curl_lut(s[1443:1442], s[713:712]) } : curl_lut(s[713:712], s[1441:1440]) } : curl_lut(s[1441:1440], s[711:710]) } : curl_lut(s[711:710], s[1439:1438]) } : curl_lut(s[1439:1438], s[709:708]) } : curl_lut(s[709:708], s[1437:1436]) } : curl_lut(s[1437:1436], s[707:706]) } : curl_lut(s[707:706], s[1435:1434]) } : curl_lut(s[1435:1434], s[705:704]) } : curl_lut(s[705:704], s[1433:1432]) } : curl_lut(s[1433:1432], s[703:702]) } : curl_lut(s[703:702], s[1431:1430]) } : curl_lut(s[1431:1430], s[701:700]) } : curl_lut(s[701:700], s[1429:1428]) } : curl_lut(s[1429:1428], s[699:698]) } : curl_lut(s[699:698], s[1427:1426]) } : curl_lut(s[1427:1426], s[697:696]) } : curl_lut(s[697:696], s[1425:1424]) } : curl_lut(s[1425:1424], s[695:694]) } : curl_lut(s[695:694], s[1423:1422]) } : curl_lut(s[1423:1422], s[693:692]) } : curl_lut(s[693:692], s[1421:1420]) } : curl_lut(s[1421:1420], s[691:690]) } : curl_lut(s[691:690], s[1419:1418]) } : curl_lut(s[1419:1418], s[689:688]) } : curl_lut(s[689:688], s[1417:1416]) } : curl_lut(s[1417:1416], s[687:686]) } : curl_lut(s[687:686], s[1415:1414]) } : curl_lut(s[1415:1414], s[685:684]) } : curl_lut(s[685:684], s[1413:1412]) } : curl_lut(s[1413:1412], s[683:682]) } : curl_lut(s[683:682], s[1411:1410]) } : curl_lut(s[1411:1410], s[681:680]) } : curl_lut(s[681:680], s[1409:1408]) } : curl_lut(s[1409:1408], s[679:678]) } : curl_lut(s[679:678], s[1407:1406]) } : curl_lut(s[1407:1406], s[677:676]) } : curl_lut(s[677:676], s[1405:1404]) } : curl_lut(s[1405:1404], s[675:674]) } : curl_lut(s[675:674], s[1403:1402]) } : curl_lut(s[1403:1402], s[673:672]) } : curl_lut(s[673:672], s[1401:1400]) } : curl_lut(s[1401:1400], s[671:670]) } : curl_lut(s[671:670], s[1399:1398]) } : curl_lut(s[1399:1398], s[669:668]) } : curl_lut(s[669:668], s[1397:1396]) } : curl_lut(s[1397:1396], s[667:666]) } : curl_lut(s[667:666], s[1395:1394]) } : curl_lut(s[1395:1394], s[665:664]) } : curl_lut(s[665:664], s[1393:1392]) } : curl_lut(s[1393:1392], s[663:662]) } : curl_lut(s[663:662], s[1391:1390]) } : curl_lut(s[1391:1390], s[661:660]) } : curl_lut(s[661:660], s[1389:1388]) } : curl_lut(s[1389:1388], s[659:658]) } : curl_lut(s[659:658], s[1387:1386]) } : curl_lut(s[1387:1386], s[657:656]) } : curl_lut(s[657:656], s[1385:1384]) } : curl_lut(s[1385:1384], s[655:654]) } : curl_lut(s[655:654], s[1383:1382]) } : curl_lut(s[1383:1382], s[653:652]) } : curl_lut(s[653:652], s[1381:1380]) } : curl_lut(s[1381:1380], s[651:650]) } : curl_lut(s[651:650], s[1379:1378]) } : curl_lut(s[1379:1378], s[649:648]) } : curl_lut(s[649:648], s[1377:1376]) } : curl_lut(s[1377:1376], s[647:646]) } : curl_lut(s[647:646], s[1375:1374]) } : curl_lut(s[1375:1374], s[645:644]) } : curl_lut(s[645:644], s[1373:1372]) } : curl_lut(s[1373:1372], s[643:642]) } : curl_lut(s[643:642], s[1371:1370]) } : curl_lut(s[1371:1370], s[641:640]) } : curl_lut(s[641:640], s[1369:1368]) } : curl_lut(s[1369:1368], s[639:638]) } : curl_lut(s[639:638], s[1367:1366]) } : curl_lut(s[1367:1366], s[637:636]) } : curl_lut(s[637:636], s[1365:1364]) } : curl_lut(s[1365:1364], s[635:634]) } : curl_lut(s[635:634], s[1363:1362]) } : curl_lut(s[1363:1362], s[633:632]) } : curl_lut(s[633:632], s[1361:1360]) } : curl_lut(s[1361:1360], s[631:630]) } : curl_lut(s[631:630], s[1359:1358]) } : curl_lut(s[1359:1358], s[629:628]) } : curl_lut(s[629:628], s[1357:1356]) } : curl_lut(s[1357:1356], s[627:626]) } : curl_lut(s[627:626], s[1355:1354]) } : curl_lut(s[1355:1354], s[625:624]) } : curl_lut(s[625:624], s[1353:1352]) } : curl_lut(s[1353:1352], s[623:622]) } : curl_lut(s[623:622], s[1351:1350]) } : curl_lut(s[1351:1350], s[621:620]) } : curl_lut(s[621:620], s[1349:1348]) } : curl_lut(s[1349:1348], s[619:618]) } : curl_lut(s[619:618], s[1347:1346]) } : curl_lut(s[1347:1346], s[617:616]) } : curl_lut(s[617:616], s[1345:1344]) } : curl_lut(s[1345:1344], s[615:614]) } : curl_lut(s[615:614], s[1343:1342]) } : curl_lut(s[1343:1342], s[613:612]) } : curl_lut(s[613:612], s[1341:1340]) } : curl_lut(s[1341:1340], s[611:610]) } : curl_lut(s[611:610], s[1339:1338]) } : curl_lut(s[1339:1338], s[609:608]) } : curl_lut(s[609:608], s[1337:1336]) } : curl_lut(s[1337:1336], s[607:606]) } : curl_lut(s[607:606], s[1335:1334]) } : curl_lut(s[1335:1334], s[605:604]) } : curl_lut(s[605:604], s[1333:1332]) } : curl_lut(s[1333:1332], s[603:602]) } : curl_lut(s[603:602], s[1331:1330]) } : curl_lut(s[1331:1330], s[601:600]) } : curl_lut(s[601:600], s[1329:1328]) } : curl_lut(s[1329:1328], s[599:598]) } : curl_lut(s[599:598], s[1327:1326]) } : curl_lut(s[1327:1326], s[597:596]) } : curl_lut(s[597:596], s[1325:1324]) } : curl_lut(s[1325:1324], s[595:594]) } : curl_lut(s[595:594], s[1323:1322]) } : curl_lut(s[1323:1322], s[593:592]) } : curl_lut(s[593:592], s[1321:1320]) } : curl_lut(s[1321:1320], s[591:590]) } : curl_lut(s[591:590], s[1319:1318]) } : curl_lut(s[1319:1318], s[589:588]) } : curl_lut(s[589:588], s[1317:1316]) } : curl_lut(s[1317:1316], s[587:586]) } : curl_lut(s[587:586], s[1315:1314]) } : curl_lut(s[1315:1314], s[585:584]) } : curl_lut(s[585:584], s[1313:1312]) } : curl_lut(s[1313:1312], s[583:582]) } : curl_lut(s[583:582], s[1311:1310]) } : curl_lut(s[1311:1310], s[581:580]) } : curl_lut(s[581:580], s[1309:1308]) } : curl_lut(s[1309:1308], s[579:578]) } : curl_lut(s[579:578], s[1307:1306]) } : curl_lut(s[1307:1306], s[577:576]) } : curl_lut(s[577:576], s[1305:1304]) } : curl_lut(s[1305:1304], s[575:574]) } : curl_lut(s[575:574], s[1303:1302]) } : curl_lut(s[1303:1302], s[573:572]) } : curl_lut(s[573:572], s[1301:1300]) } : curl_lut(s[1301:1300], s[571:570]) } : curl_lut(s[571:570], s[1299:1298]) } : curl_lut(s[1299:1298], s[569:568]) } : curl_lut(s[569:568], s[1297:1296]) } : curl_lut(s[1297:1296], s[567:566]) } : curl_lut(s[567:566], s[1295:1294]) } : curl_lut(s[1295:1294], s[565:564]) } : curl_lut(s[565:564], s[1293:1292]) } : curl_lut(s[1293:1292], s[563:562]) } : curl_lut(s[563:562], s[1291:1290]) } : curl_lut(s[1291:1290], s[561:560]) } : curl_lut(s[561:560], s[1289:1288]) } : curl_lut(s[1289:1288], s[559:558]) } : curl_lut(s[559:558], s[1287:1286]) } : curl_lut(s[1287:1286], s[557:556]) } : curl_lut(s[557:556], s[1285:1284]) } : curl_lut(s[1285:1284], s[555:554]) } : curl_lut(s[555:554], s[1283:1282]) } : curl_lut(s[1283:1282], s[553:552]) } : curl_lut(s[553:552], s[1281:1280]) } : curl_lut(s[1281:1280], s[551:550]) } : curl_lut(s[551:550], s[1279:1278]) } : curl_lut(s[1279:1278], s[549:548]) } : curl_lut(s[549:548], s[1277:1276]) } : curl_lut(s[1277:1276], s[547:546]) } : curl_lut(s[547:546], s[1275:1274]) } : curl_lut(s[1275:1274], s[545:544]) } : curl_lut(s[545:544], s[1273:1272]) } : curl_lut(s[1273:1272], s[543:542]) } : curl_lut(s[543:542], s[1271:1270]) } : curl_lut(s[1271:1270], s[541:540]) } : curl_lut(s[541:540], s[1269:1268]) } : curl_lut(s[1269:1268], s[539:538]) } : curl_lut(s[539:538], s[1267:1266]) } : curl_lut(s[1267:1266], s[537:536]) } : curl_lut(s[537:536], s[1265:1264]) } : curl_lut(s[1265:1264], s[535:534]) } : curl_lut(s[535:534], s[1263:1262]) } : curl_lut(s[1263:1262], s[533:532]) } : curl_lut(s[533:532], s[1261:1260]) } : curl_lut(s[1261:1260], s[531:530]) } : curl_lut(s[531:530], s[1259:1258]) } : curl_lut(s[1259:1258], s[529:528]) } : curl_lut(s[529:528], s[1257:1256]) } : curl_lut(s[1257:1256], s[527:526]) } : curl_lut(s[527:526], s[1255:1254]) } : curl_lut(s[1255:1254], s[525:524]) } : curl_lut(s[525:524], s[1253:1252]) } : curl_lut(s[1253:1252], s[523:522]) } : curl_lut(s[523:522], s[1251:1250]) } : curl_lut(s[1251:1250], s[521:520]) } : curl_lut(s[521:520], s[1249:1248]) } : curl_lut(s[1249:1248], s[519:518]) } : curl_lut(s[519:518], s[1247:1246]) } : curl_lut(s[1247:1246], s[517:516]) } : curl_lut(s[517:516], s[1245:1244]) } : curl_lut(s[1245:1244], s[515:514]) } : curl_lut(s[515:514], s[1243:1242]) } : curl_lut(s[1243:1242], s[513:512]) } : curl_lut(s[513:512], s[1241:1240]) } : curl_lut(s[1241:1240], s[511:510]) } : curl_lut(s[511:510], s[1239:1238]) } : curl_lut(s[1239:1238], s[509:508]) } : curl_lut(s[509:508], s[1237:1236]) } : curl_lut(s[1237:1236], s[507:506]) } : curl_lut(s[507:506], s[1235:1234]) } : curl_lut(s[1235:1234], s[505:504]) } : curl_lut(s[505:504], s[1233:1232]) } : curl_lut(s[1233:1232], s[503:502]) } : curl_lut(s[503:502], s[1231:1230]) } : curl_lut(s[1231:1230], s[501:500]) } : curl_lut(s[501:500], s[1229:1228]) } : curl_lut(s[1229:1228], s[499:498]) } : curl_lut(s[499:498], s[1227:1226]) } : curl_lut(s[1227:1226], s[497:496]) } : curl_lut(s[497:496], s[1225:1224]) } : curl_lut(s[1225:1224], s[495:494]) } : curl_lut(s[495:494], s[1223:1222]) } : curl_lut(s[1223:1222], s[493:492]) } : curl_lut(s[493:492], s[1221:1220]) } : curl_lut(s[1221:1220], s[491:490]) } : curl_lut(s[491:490], s[1219:1218]) } : curl_lut(s[1219:1218], s[489:488]) } : curl_lut(s[489:488], s[1217:1216]) } : curl_lut(s[1217:1216], s[487:486]) } : curl_lut(s[487:486], s[1215:1214]) } : curl_lut(s[1215:1214], s[485:484]) } : curl_lut(s[485:484], s[1213:1212]) } : curl_lut(s[1213:1212], s[483:482]) } : curl_lut(s[483:482], s[1211:1210]) } : curl_lut(s[1211:1210], s[481:480]) } : curl_lut(s[481:480], s[1209:1208]) } : curl_lut(s[1209:1208], s[479:478]) } : curl_lut(s[479:478], s[1207:1206]) } : curl_lut(s[1207:1206], s[477:476]) } : curl_lut(s[477:476], s[1205:1204]) } : curl_lut(s[1205:1204], s[475:474]) } : curl_lut(s[475:474], s[1203:1202]) } : curl_lut(s[1203:1202], s[473:472]) } : curl_lut(s[473:472], s[1201:1200]) } : curl_lut(s[1201:1200], s[471:470]) } : curl_lut(s[471:470], s[1199:1198]) } : curl_lut(s[1199:1198], s[469:468]) } : curl_lut(s[469:468], s[1197:1196]) } : curl_lut(s[1197:1196], s[467:466]) } : curl_lut(s[467:466], s[1195:1194]) } : curl_lut(s[1195:1194], s[465:464]) } : curl_lut(s[465:464], s[1193:1192]) } : curl_lut(s[1193:1192], s[463:462]) } : curl_lut(s[463:462], s[1191:1190]) } : curl_lut(s[1191:1190], s[461:460]) } : curl_lut(s[461:460], s[1189:1188]) } : curl_lut(s[1189:1188], s[459:458]) } : curl_lut(s[459:458], s[1187:1186]) } : curl_lut(s[1187:1186], s[457:456]) } : curl_lut(s[457:456], s[1185:1184]) } : curl_lut(s[1185:1184], s[455:454]) } : curl_lut(s[455:454], s[1183:1182]) } : curl_lut(s[1183:1182], s[453:452]) } : curl_lut(s[453:452], s[1181:1180]) } : curl_lut(s[1181:1180], s[451:450]) } : curl_lut(s[451:450], s[1179:1178]) } : curl_lut(s[1179:1178], s[449:448]) } : curl_lut(s[449:448], s[1177:1176]) } : curl_lut(s[1177:1176], s[447:446]) } : curl_lut(s[447:446], s[1175:1174]) } : curl_lut(s[1175:1174], s[445:444]) } : curl_lut(s[445:444], s[1173:1172]) } : curl_lut(s[1173:1172], s[443:442]) } : curl_lut(s[443:442], s[1171:1170]) } : curl_lut(s[1171:1170], s[441:440]) } : curl_lut(s[441:440], s[1169:1168]) } : curl_lut(s[1169:1168], s[439:438]) } : curl_lut(s[439:438], s[1167:1166]) } : curl_lut(s[1167:1166], s[437:436]) } : curl_lut(s[437:436], s[1165:1164]) } : curl_lut(s[1165:1164], s[435:434]) } : curl_lut(s[435:434], s[1163:1162]) } : curl_lut(s[1163:1162], s[433:432]) } : curl_lut(s[433:432], s[1161:1160]) } : curl_lut(s[1161:1160], s[431:430]) } : curl_lut(s[431:430], s[1159:1158]) } : curl_lut(s[1159:1158], s[429:428]) } : curl_lut(s[429:428], s[1157:1156]) } : curl_lut(s[1157:1156], s[427:426]) } : curl_lut(s[427:426], s[1155:1154]) } : curl_lut(s[1155:1154], s[425:424]) } : curl_lut(s[425:424], s[1153:1152]) } : curl_lut(s[1153:1152], s[423:422]) } : curl_lut(s[423:422], s[1151:1150]) } : curl_lut(s[1151:1150], s[421:420]) } : curl_lut(s[421:420], s[1149:1148]) } : curl_lut(s[1149:1148], s[419:418]) } : curl_lut(s[419:418], s[1147:1146]) } : curl_lut(s[1147:1146], s[417:416]) } : curl_lut(s[417:416], s[1145:1144]) } : curl_lut(s[1145:1144], s[415:414]) } : curl_lut(s[415:414], s[1143:1142]) } : curl_lut(s[1143:1142], s[413:412]) } : curl_lut(s[413:412], s[1141:1140]) } : curl_lut(s[1141:1140], s[411:410]) } : curl_lut(s[411:410], s[1139:1138]) } : curl_lut(s[1139:1138], s[409:408]) } : curl_lut(s[409:408], s[1137:1136]) } : curl_lut(s[1137:1136], s[407:406]) } : curl_lut(s[407:406], s[1135:1134]) } : curl_lut(s[1135:1134], s[405:404]) } : curl_lut(s[405:404], s[1133:1132]) } : curl_lut(s[1133:1132], s[403:402]) } : curl_lut(s[403:402], s[1131:1130]) } : curl_lut(s[1131:1130], s[401:400]) } : curl_lut(s[401:400], s[1129:1128]) } : curl_lut(s[1129:1128], s[399:398]) } : curl_lut(s[399:398], s[1127:1126]) } : curl_lut(s[1127:1126], s[397:396]) } : curl_lut(s[397:396], s[1125:1124]) } : curl_lut(s[1125:1124], s[395:394]) } : curl_lut(s[395:394], s[1123:1122]) } : curl_lut(s[1123:1122], s[393:392]) } : curl_lut(s[393:392], s[1121:1120]) } : curl_lut(s[1121:1120], s[391:390]) } : curl_lut(s[391:390], s[1119:1118]) } : curl_lut(s[1119:1118], s[389:388]) } : curl_lut(s[389:388], s[1117:1116]) } : curl_lut(s[1117:1116], s[387:386]) } : curl_lut(s[387:386], s[1115:1114]) } : curl_lut(s[1115:1114], s[385:384]) } : curl_lut(s[385:384], s[1113:1112]) } : curl_lut(s[1113:1112], s[383:382]) } : curl_lut(s[383:382], s[1111:1110]) } : curl_lut(s[1111:1110], s[381:380]) } : curl_lut(s[381:380], s[1109:1108]) } : curl_lut(s[1109:1108], s[379:378]) } : curl_lut(s[379:378], s[1107:1106]) } : curl_lut(s[1107:1106], s[377:376]) } : curl_lut(s[377:376], s[1105:1104]) } : curl_lut(s[1105:1104], s[375:374]) } : curl_lut(s[375:374], s[1103:1102]) } : curl_lut(s[1103:1102], s[373:372]) } : curl_lut(s[373:372], s[1101:1100]) } : curl_lut(s[1101:1100], s[371:370]) } : curl_lut(s[371:370], s[1099:1098]) } : curl_lut(s[1099:1098], s[369:368]) } : curl_lut(s[369:368], s[1097:1096]) } : curl_lut(s[1097:1096], s[367:366]) } : curl_lut(s[367:366], s[1095:1094]) } : curl_lut(s[1095:1094], s[365:364]) } : curl_lut(s[365:364], s[1093:1092]) } : curl_lut(s[1093:1092], s[363:362]) } : curl_lut(s[363:362], s[1091:1090]) } : curl_lut(s[1091:1090], s[361:360]) } : curl_lut(s[361:360], s[1089:1088]) } : curl_lut(s[1089:1088], s[359:358]) } : curl_lut(s[359:358], s[1087:1086]) } : curl_lut(s[1087:1086], s[357:356]) } : curl_lut(s[357:356], s[1085:1084]) } : curl_lut(s[1085:1084], s[355:354]) } : curl_lut(s[355:354], s[1083:1082]) } : curl_lut(s[1083:1082], s[353:352]) } : curl_lut(s[353:352], s[1081:1080]) } : curl_lut(s[1081:1080], s[351:350]) } : curl_lut(s[351:350], s[1079:1078]) } : curl_lut(s[1079:1078], s[349:348]) } : curl_lut(s[349:348], s[1077:1076]) } : curl_lut(s[1077:1076], s[347:346]) } : curl_lut(s[347:346], s[1075:1074]) } : curl_lut(s[1075:1074], s[345:344]) } : curl_lut(s[345:344], s[1073:1072]) } : curl_lut(s[1073:1072], s[343:342]) } : curl_lut(s[343:342], s[1071:1070]) } : curl_lut(s[1071:1070], s[341:340]) } : curl_lut(s[341:340], s[1069:1068]) } : curl_lut(s[1069:1068], s[339:338]) } : curl_lut(s[339:338], s[1067:1066]) } : curl_lut(s[1067:1066], s[337:336]) } : curl_lut(s[337:336], s[1065:1064]) } : curl_lut(s[1065:1064], s[335:334]) } : curl_lut(s[335:334], s[1063:1062]) } : curl_lut(s[1063:1062], s[333:332]) } : curl_lut(s[333:332], s[1061:1060]) } : curl_lut(s[1061:1060], s[331:330]) } : curl_lut(s[331:330], s[1059:1058]) } : curl_lut(s[1059:1058], s[329:328]) } : curl_lut(s[329:328], s[1057:1056]) } : curl_lut(s[1057:1056], s[327:326]) } : curl_lut(s[327:326], s[1055:1054]) } : curl_lut(s[1055:1054], s[325:324]) } : curl_lut(s[325:324], s[1053:1052]) } : curl_lut(s[1053:1052], s[323:322]) } : curl_lut(s[323:322], s[1051:1050]) } : curl_lut(s[1051:1050], s[321:320]) } : curl_lut(s[321:320], s[1049:1048]) } : curl_lut(s[1049:1048], s[319:318]) } : curl_lut(s[319:318], s[1047:1046]) } : curl_lut(s[1047:1046], s[317:316]) } : curl_lut(s[317:316], s[1045:1044]) } : curl_lut(s[1045:1044], s[315:314]) } : curl_lut(s[315:314], s[1043:1042]) } : curl_lut(s[1043:1042], s[313:312]) } : curl_lut(s[313:312], s[1041:1040]) } : curl_lut(s[1041:1040], s[311:310]) } : curl_lut(s[311:310], s[1039:1038]) } : curl_lut(s[1039:1038], s[309:308]) } : curl_lut(s[309:308], s[1037:1036]) } : curl_lut(s[1037:1036], s[307:306]) } : curl_lut(s[307:306], s[1035:1034]) } : curl_lut(s[1035:1034], s[305:304]) } : curl_lut(s[305:304], s[1033:1032]) } : curl_lut(s[1033:1032], s[303:302]) } : curl_lut(s[303:302], s[1031:1030]) } : curl_lut(s[1031:1030], s[301:300]) } : curl_lut(s[301:300], s[1029:1028]) } : curl_lut(s[1029:1028], s[299:298]) } : curl_lut(s[299:298], s[1027:1026]) } : curl_lut(s[1027:1026], s[297:296]) } : curl_lut(s[297:296], s[1025:1024]) } : curl_lut(s[1025:1024], s[295:294]) } : curl_lut(s[295:294], s[1023:1022]) } : curl_lut(s[1023:1022], s[293:292]) } : curl_lut(s[293:292], s[1021:1020]) } : curl_lut(s[1021:1020], s[291:290]) } : curl_lut(s[291:290], s[1019:1018]) } : curl_lut(s[1019:1018], s[289:288]) } : curl_lut(s[289:288], s[1017:1016]) } : curl_lut(s[1017:1016], s[287:286]) } : curl_lut(s[287:286], s[1015:1014]) } : curl_lut(s[1015:1014], s[285:284]) } : curl_lut(s[285:284], s[1013:1012]) } : curl_lut(s[1013:1012], s[283:282]) } : curl_lut(s[283:282], s[1011:1010]) } : curl_lut(s[1011:1010], s[281:280]) } : curl_lut(s[281:280], s[1009:1008]) } : curl_lut(s[1009:1008], s[279:278]) } : curl_lut(s[279:278], s[1007:1006]) } : curl_lut(s[1007:1006], s[277:276]) } : curl_lut(s[277:276], s[1005:1004]) } : curl_lut(s[1005:1004], s[275:274]) } : curl_lut(s[275:274], s[1003:1002]) } : curl_lut(s[1003:1002], s[273:272]) } : curl_lut(s[273:272], s[1001:1000]) } : curl_lut(s[1001:1000], s[271:270]) } : curl_lut(s[271:270], s[999:998]) } : curl_lut(s[999:998], s[269:268]) } : curl_lut(s[269:268], s[997:996]) } : curl_lut(s[997:996], s[267:266]) } : curl_lut(s[267:266], s[995:994]) } : curl_lut(s[995:994], s[265:264]) } : curl_lut(s[265:264], s[993:992]) } : curl_lut(s[993:992], s[263:262]) } : curl_lut(s[263:262], s[991:990]) } : curl_lut(s[991:990], s[261:260]) } : curl_lut(s[261:260], s[989:988]) } : curl_lut(s[989:988], s[259:258]) } : curl_lut(s[259:258], s[987:986]) } : curl_lut(s[987:986], s[257:256]) } : curl_lut(s[257:256], s[985:984]) } : curl_lut(s[985:984], s[255:254]) } : curl_lut(s[255:254], s[983:982]) } : curl_lut(s[983:982], s[253:252]) } : curl_lut(s[253:252], s[981:980]) } : curl_lut(s[981:980], s[251:250]) } : curl_lut(s[251:250], s[979:978]) } : curl_lut(s[979:978], s[249:248]) } : curl_lut(s[249:248], s[977:976]) } : curl_lut(s[977:976], s[247:246]) } : curl_lut(s[247:246], s[975:974]) } : curl_lut(s[975:974], s[245:244]) } : curl_lut(s[245:244], s[973:972]) } : curl_lut(s[973:972], s[243:242]) } : curl_lut(s[243:242], s[971:970]) } : curl_lut(s[971:970], s[241:240]) } : curl_lut(s[241:240], s[969:968]) } : curl_lut(s[969:968], s[239:238]) } : curl_lut(s[239:238], s[967:966]) } : curl_lut(s[967:966], s[237:236]) } : curl_lut(s[237:236], s[965:964]) } : curl_lut(s[965:964], s[235:234]) } : curl_lut(s[235:234], s[963:962]) } : curl_lut(s[963:962], s[233:232]) } : curl_lut(s[233:232], s[961:960]) } : curl_lut(s[961:960], s[231:230]) } : curl_lut(s[231:230], s[959:958]) } : curl_lut(s[959:958], s[229:228]) } : curl_lut(s[229:228], s[957:956]) } : curl_lut(s[957:956], s[227:226]) } : curl_lut(s[227:226], s[955:954]) } : curl_lut(s[955:954], s[225:224]) } : curl_lut(s[225:224], s[953:952]) } : curl_lut(s[953:952], s[223:222]) } : curl_lut(s[223:222], s[951:950]) } : curl_lut(s[951:950], s[221:220]) } : curl_lut(s[221:220], s[949:948]) } : curl_lut(s[949:948], s[219:218]) } : curl_lut(s[219:218], s[947:946]) } : curl_lut(s[947:946], s[217:216]) } : curl_lut(s[217:216], s[945:944]) } : curl_lut(s[945:944], s[215:214]) } : curl_lut(s[215:214], s[943:942]) } : curl_lut(s[943:942], s[213:212]) } : curl_lut(s[213:212], s[941:940]) } : curl_lut(s[941:940], s[211:210]) } : curl_lut(s[211:210], s[939:938]) } : curl_lut(s[939:938], s[209:208]) } : curl_lut(s[209:208], s[937:936]) } : curl_lut(s[937:936], s[207:206]) } : curl_lut(s[207:206], s[935:934]) } : curl_lut(s[935:934], s[205:204]) } : curl_lut(s[205:204], s[933:932]) } : curl_lut(s[933:932], s[203:202]) } : curl_lut(s[203:202], s[931:930]) } : curl_lut(s[931:930], s[201:200]) } : curl_lut(s[201:200], s[929:928]) } : curl_lut(s[929:928], s[199:198]) } : curl_lut(s[199:198], s[927:926]) } : curl_lut(s[927:926], s[197:196]) } : curl_lut(s[197:196], s[925:924]) } : curl_lut(s[925:924], s[195:194]) } : curl_lut(s[195:194], s[923:922]) } : curl_lut(s[923:922], s[193:192]) } : curl_lut(s[193:192], s[921:920]) } : curl_lut(s[921:920], s[191:190]) } : curl_lut(s[191:190], s[919:918]) } : curl_lut(s[919:918], s[189:188]) } : curl_lut(s[189:188], s[917:916]) } : curl_lut(s[917:916], s[187:186]) } : curl_lut(s[187:186], s[915:914]) } : curl_lut(s[915:914], s[185:184]) } : curl_lut(s[185:184], s[913:912]) } : curl_lut(s[913:912], s[183:182]) } : curl_lut(s[183:182], s[911:910]) } : curl_lut(s[911:910], s[181:180]) } : curl_lut(s[181:180], s[909:908]) } : curl_lut(s[909:908], s[179:178]) } : curl_lut(s[179:178], s[907:906]) } : curl_lut(s[907:906], s[177:176]) } : curl_lut(s[177:176], s[905:904]) } : curl_lut(s[905:904], s[175:174]) } : curl_lut(s[175:174], s[903:902]) } : curl_lut(s[903:902], s[173:172]) } : curl_lut(s[173:172], s[901:900]) } : curl_lut(s[901:900], s[171:170]) } : curl_lut(s[171:170], s[899:898]) } : curl_lut(s[899:898], s[169:168]) } : curl_lut(s[169:168], s[897:896]) } : curl_lut(s[897:896], s[167:166]) } : curl_lut(s[167:166], s[895:894]) } : curl_lut(s[895:894], s[165:164]) } : curl_lut(s[165:164], s[893:892]) } : curl_lut(s[893:892], s[163:162]) } : curl_lut(s[163:162], s[891:890]) } : curl_lut(s[891:890], s[161:160]) } : curl_lut(s[161:160], s[889:888]) } : curl_lut(s[889:888], s[159:158]) } : curl_lut(s[159:158], s[887:886]) } : curl_lut(s[887:886], s[157:156]) } : curl_lut(s[157:156], s[885:884]) } : curl_lut(s[885:884], s[155:154]) } : curl_lut(s[155:154], s[883:882]) } : curl_lut(s[883:882], s[153:152]) } : curl_lut(s[153:152], s[881:880]) } : curl_lut(s[881:880], s[151:150]) } : curl_lut(s[151:150], s[879:878]) } : curl_lut(s[879:878], s[149:148]) } : curl_lut(s[149:148], s[877:876]) } : curl_lut(s[877:876], s[147:146]) } : curl_lut(s[147:146], s[875:874]) } : curl_lut(s[875:874], s[145:144]) } : curl_lut(s[145:144], s[873:872]) } : curl_lut(s[873:872], s[143:142]) } : curl_lut(s[143:142], s[871:870]) } : curl_lut(s[871:870], s[141:140]) } : curl_lut(s[141:140], s[869:868]) } : curl_lut(s[869:868], s[139:138]) } : curl_lut(s[139:138], s[867:866]) } : curl_lut(s[867:866], s[137:136]) } : curl_lut(s[137:136], s[865:864]) } : curl_lut(s[865:864], s[135:134]) } : curl_lut(s[135:134], s[863:862]) } : curl_lut(s[863:862], s[133:132]) } : curl_lut(s[133:132], s[861:860]) } : curl_lut(s[861:860], s[131:130]) } : curl_lut(s[131:130], s[859:858]) } : curl_lut(s[859:858], s[129:128]) } : curl_lut(s[129:128], s[857:856]) } : curl_lut(s[857:856], s[127:126]) } : curl_lut(s[127:126], s[855:854]) } : curl_lut(s[855:854], s[125:124]) } : curl_lut(s[125:124], s[853:852]) } : curl_lut(s[853:852], s[123:122]) } : curl_lut(s[123:122], s[851:850]) } : curl_lut(s[851:850], s[121:120]) } : curl_lut(s[121:120], s[849:848]) } : curl_lut(s[849:848], s[119:118]) } : curl_lut(s[119:118], s[847:846]) } : curl_lut(s[847:846], s[117:116]) } : curl_lut(s[117:116], s[845:844]) } : curl_lut(s[845:844], s[115:114]) } : curl_lut(s[115:114], s[843:842]) } : curl_lut(s[843:842], s[113:112]) } : curl_lut(s[113:112], s[841:840]) } : curl_lut(s[841:840], s[111:110]) } : curl_lut(s[111:110], s[839:838]) } : curl_lut(s[839:838], s[109:108]) } : curl_lut(s[109:108], s[837:836]) } : curl_lut(s[837:836], s[107:106]) } : curl_lut(s[107:106], s[835:834]) } : curl_lut(s[835:834], s[105:104]) } : curl_lut(s[105:104], s[833:832]) } : curl_lut(s[833:832], s[103:102]) } : curl_lut(s[103:102], s[831:830]) } : curl_lut(s[831:830], s[101:100]) } : curl_lut(s[101:100], s[829:828]) } : curl_lut(s[829:828], s[99:98]) } : curl_lut(s[99:98], s[827:826]) } : curl_lut(s[827:826], s[97:96]) } : curl_lut(s[97:96], s[825:824]) } : curl_lut(s[825:824], s[95:94]) } : curl_lut(s[95:94], s[823:822]) } : curl_lut(s[823:822], s[93:92]) } : curl_lut(s[93:92], s[821:820]) } : curl_lut(s[821:820], s[91:90]) } : curl_lut(s[91:90], s[819:818]) } : curl_lut(s[819:818], s[89:88]) } : curl_lut(s[89:88], s[817:816]) } : curl_lut(s[817:816], s[87:86]) } : curl_lut(s[87:86], s[815:814]) } : curl_lut(s[815:814], s[85:84]) } : curl_lut(s[85:84], s[813:812]) } : curl_lut(s[813:812], s[83:82]) } : curl_lut(s[83:82], s[811:810]) } : curl_lut(s[811:810], s[81:80]) } : curl_lut(s[81:80], s[809:808]) } : curl_lut(s[809:808], s[79:78]) } : curl_lut(s[79:78], s[807:806]) } : curl_lut(s[807:806], s[77:76]) } : curl_lut(s[77:76], s[805:804]) } : curl_lut(s[805:804], s[75:74]) } : curl_lut(s[75:74], s[803:802]) } : curl_lut(s[803:802], s[73:72]) } : curl_lut(s[73:72], s[801:800]) } : curl_lut(s[801:800], s[71:70]) } : curl_lut(s[71:70], s[799:798]) } : curl_lut(s[799:798], s[69:68]) } : curl_lut(s[69:68], s[797:796]) } : curl_lut(s[797:796], s[67:66]) } : curl_lut(s[67:66], s[795:794]) } : curl_lut(s[795:794], s[65:64]) } : curl_lut(s[65:64], s[793:792]) } : curl_lut(s[793:792], s[63:62]) } : curl_lut(s[63:62], s[791:790]) } : curl_lut(s[791:790], s[61:60]) } : curl_lut(s[61:60], s[789:788]) } : curl_lut(s[789:788], s[59:58]) } : curl_lut(s[59:58], s[787:786]) } : curl_lut(s[787:786], s[57:56]) } : curl_lut(s[57:56], s[785:784]) } : curl_lut(s[785:784], s[55:54]) } : curl_lut(s[55:54], s[783:782]) } : curl_lut(s[783:782], s[53:52]) } : curl_lut(s[53:52], s[781:780]) } : curl_lut(s[781:780], s[51:50]) } : curl_lut(s[51:50], s[779:778]) } : curl_lut(s[779:778], s[49:48]) } : curl_lut(s[49:48], s[777:776]) } : curl_lut(s[777:776], s[47:46]) } : curl_lut(s[47:46], s[775:774]) } : curl_lut(s[775:774], s[45:44]) } : curl_lut(s[45:44], s[773:772]) } : curl_lut(s[773:772], s[43:42]) } : curl_lut(s[43:42], s[771:770]) } : curl_lut(s[771:770], s[41:40]) } : curl_lut(s[41:40], s[769:768]) } : curl_lut(s[769:768], s[39:38]) } : curl_lut(s[39:38], s[767:766]) } : curl_lut(s[767:766], s[37:36]) } : curl_lut(s[37:36], s[765:764]) } : curl_lut(s[765:764], s[35:34]) } : curl_lut(s[35:34], s[763:762]) } : curl_lut(s[763:762], s[33:32]) } : curl_lut(s[33:32], s[761:760]) } : curl_lut(s[761:760], s[31:30]) } : curl_lut(s[31:30], s[759:758]) } : curl_lut(s[759:758], s[29:28]) } : curl_lut(s[29:28], s[757:756]) } : curl_lut(s[757:756], s[27:26]) } : curl_lut(s[27:26], s[755:754]) } : curl_lut(s[755:754], s[25:24]) } : curl_lut(s[25:24], s[753:752]) } : curl_lut(s[753:752], s[23:22]) } : curl_lut(s[23:22], s[751:750]) } : curl_lut(s[751:750], s[21:20]) } : curl_lut(s[21:20], s[749:748]) } : curl_lut(s[749:748], s[19:18]) } : curl_lut(s[19:18], s[747:746]) } : curl_lut(s[747:746], s[17:16]) } : curl_lut(s[17:16], s[745:744]) } : curl_lut(s[745:744], s[15:14]) } : curl_lut(s[15:14], s[743:742]) } : curl_lut(s[743:742], s[13:12]) } : curl_lut(s[13:12], s[741:740]) } : curl_lut(s[741:740], s[11:10]) } : curl_lut(s[11:10], s[739:738]) } : curl_lut(s[739:738], s[9:8]) } : curl_lut(s[9:8], s[737:736]) } : curl_lut(s[737:736], s[7:6]) } : curl_lut(s[7:6], s[735:734]) } : curl_lut(s[735:734], s[5:4]) } : curl_lut(s[5:4], s[733:732]) } : curl_lut(s[733:732], s[3:2]) } : curl_lut(s[3:2], s[731:730]) } : curl_lut(s[731:730], s[1:0]) };
  end
endfunction

function [53:0] firstOne(
    input [53:0] val
  );
  begin
    firstOne = val;
  end
endfunction

function [53:0] nextOne(
    input [53:0] val
  );
  begin
    nextOne = val;
  end
endfunction

function [53:0] lastOne(
    input [53:0] val
  );
  begin
    lastOne = val;
  end
endfunction

function [161:0] fibonacci(
    input [161:0] n
  );
  reg [1:0] retN;
  reg [161:0] nMin1;
  reg [161:0] nMin2;
  
  begin
    retN = isLess_lut(cmp_81(n, 162'b110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000));
    nMin1 = decr_81(n);
    nMin2 = sub_81(n, 162'b110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    fibonacci = retN == 2'b01 ? n : add_81(fibonacci(nMin1), fibonacci(nMin2));
  end
endfunction

function [161:0] fibonacci2(
    input [161:0] n
  );
  reg [1:0] retN;
  
  begin
    retN = isLess_lut(cmp_81(n, 162'b110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000));
    fibonacci2 = retN == 2'b01 ? n : fibPart2(sub_81(n, 162'b110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), 162'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 162'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
  end
endfunction

function [161:0] fibPart2(
    input [161:0] n
  , input [161:0] fib0
  , input [161:0] fib1
  );
  reg [1:0] retFib2;
  reg [161:0] fib2;
  
  begin
    retFib2 = isZero_lut(sign_81(n));
    fib2 = add_81(fib0, fib1);
    fibPart2 = retFib2 == 2'b01 ? fib2 : fibPart2(decr_81(n), fib1, fib2);
  end
endfunction

function [1:0] iterate_1_1(
    input [17:0] old
  );
  reg [3:0] sum0;
  reg [3:0] sum1;
  reg [3:0] sum2;
  reg [3:0] sum3;
  reg [3:0] sum5;
  reg [3:0] sum6;
  reg [3:0] sum7;
  reg [3:0] sum8;
  
  begin
    sum0 = binSum_lut(2'b00, 2'b00, old[1:0]);
    sum1 = binSum_lut(sum0[1:0], sum0[3:2], old[3:2]);
    sum2 = binSum_lut(sum1[1:0], sum1[3:2], old[5:4]);
    sum3 = binSum_lut(sum2[1:0], sum2[3:2], old[7:6]);
    sum5 = binSum_lut(sum3[1:0], sum3[3:2], old[11:10]);
    sum6 = binSum_lut(sum5[1:0], sum5[3:2], old[13:12]);
    sum7 = binSum_lut(sum6[1:0], sum6[3:2], old[15:14]);
    sum8 = binSum_lut(sum7[1:0], sum7[3:2], old[17:16]);
    iterate_1_1 = newCellState_lut(sum8[1:0], sum8[3:2], old[9:8]);
  end
endfunction

function [16037:0] keyValue(
    input [1:0] cmd
  , input [485:0] key
  , input [16037:0] value
  );
  begin
    keyValue = map_243_8019(cmd, key, value);
  end
endfunction

function [17:0] factorial_9(
    input [17:0] n
  );
  reg [1:0] isZero;
  
  begin
    isZero = isZero_lut(sign_9(n));
    factorial_9 = isZero == 2'b01 ? 18'b010000000000000000 : mul_9(n, factorial_9(decr_9(n)));
  end
endfunction

function [53:0] factorial_27(
    input [53:0] n
  );
  reg [1:0] isZero;
  
  begin
    isZero = isZero_lut(sign_27(n));
    factorial_27 = isZero == 2'b01 ? 54'b010000000000000000000000000000000000000000000000000000 : mul_27(n, factorial_27(decr_27(n)));
  end
endfunction

function [161:0] factorial_81(
    input [161:0] n
  );
  reg [1:0] isZero;
  
  begin
    isZero = isZero_lut(sign_81(n));
    factorial_81 = isZero == 2'b01 ? 162'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : mul_81(n, factorial_81(decr_81(n)));
  end
endfunction

function [485:0] mul_243(
    input [485:0] lhs
  , input [485:0] rhs
  );
  reg [971:0] product;
  
  begin
    product = fullMul_243(lhs, rhs);
    mul_243 = product[485:0];
  end
endfunction

function [485:0] factorial_243(
    input [485:0] n
  );
  reg [1:0] isZero;
  
  begin
    isZero = isZero_lut(sign_243(n));
    factorial_243 = isZero == 2'b01 ? 486'b010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : mul_243(n, factorial_243(decr_243(n)));
  end
endfunction

function [5:0] iterate_1_3(
    input [29:0] old
  );
  reg [17:0] ohl;
  reg [17:0] ohm;
  reg [17:0] ohr;
  reg [1:0] nhl;
  reg [1:0] nhm;
  reg [1:0] nhr;
  
  begin
    ohl = { { old[5:0] : old[15:10] } : old[25:20] };
    ohm = { { old[7:2] : old[17:12] } : old[27:22] };
    ohr = { { old[9:4] : old[19:14] } : old[29:24] };
    nhl = iterate_1_1(ohl);
    nhm = iterate_1_1(ohm);
    nhr = iterate_1_1(ohr);
    iterate_1_3 = { { nhl : nhm } : nhr };
  end
endfunction

function [17:0] iterate_1_9(
    input [65:0] old
  );
  reg [29:0] ohl;
  reg [29:0] ohm;
  reg [29:0] ohr;
  reg [5:0] nhl;
  reg [5:0] nhm;
  reg [5:0] nhr;
  
  begin
    ohl = { { old[9:0] : old[31:22] } : old[53:44] };
    ohm = { { old[15:6] : old[37:28] } : old[59:50] };
    ohr = { { old[21:12] : old[43:34] } : old[65:56] };
    nhl = iterate_1_3(ohl);
    nhm = iterate_1_3(ohm);
    nhr = iterate_1_3(ohr);
    iterate_1_9 = { { nhl : nhm } : nhr };
  end
endfunction

function [53:0] iterate_1_27(
    input [173:0] old
  );
  reg [65:0] ohl;
  reg [65:0] ohm;
  reg [65:0] ohr;
  reg [17:0] nhl;
  reg [17:0] nhm;
  reg [17:0] nhr;
  
  begin
    ohl = { { old[21:0] : old[79:58] } : old[137:116] };
    ohm = { { old[39:18] : old[97:76] } : old[155:134] };
    ohr = { { old[57:36] : old[115:94] } : old[173:152] };
    nhl = iterate_1_9(ohl);
    nhm = iterate_1_9(ohm);
    nhr = iterate_1_9(ohr);
    iterate_1_27 = { { nhl : nhm } : nhr };
  end
endfunction

function [161:0] iterate_1_81(
    input [497:0] old
  );
  reg [173:0] ohl;
  reg [173:0] ohm;
  reg [173:0] ohr;
  reg [53:0] nhl;
  reg [53:0] nhm;
  reg [53:0] nhr;
  
  begin
    ohl = { { old[57:0] : old[223:166] } : old[389:332] };
    ohm = { { old[111:54] : old[277:220] } : old[443:386] };
    ohr = { { old[165:108] : old[331:274] } : old[497:440] };
    nhl = iterate_1_27(ohl);
    nhm = iterate_1_27(ohm);
    nhr = iterate_1_27(ohr);
    iterate_1_81 = { { nhl : nhm } : nhr };
  end
endfunction

function [485:0] iterate_1_243(
    input [1469:0] old
  );
  reg [497:0] ohl;
  reg [497:0] ohm;
  reg [497:0] ohr;
  reg [161:0] nhl;
  reg [161:0] nhm;
  reg [161:0] nhr;
  
  begin
    ohl = { { old[165:0] : old[655:490] } : old[1145:980] };
    ohm = { { old[327:162] : old[817:652] } : old[1307:1142] };
    ohr = { { old[489:324] : old[979:814] } : old[1469:1304] };
    nhl = iterate_1_81(ohl);
    nhm = iterate_1_81(ohm);
    nhr = iterate_1_81(ohr);
    iterate_1_243 = { { nhl : nhm } : nhr };
  end
endfunction

function [1457:0] iterate_1_729(
    input [4385:0] old
  );
  reg [1469:0] ohl;
  reg [1469:0] ohm;
  reg [1469:0] ohr;
  reg [485:0] nhl;
  reg [485:0] nhm;
  reg [485:0] nhr;
  
  begin
    ohl = { { old[489:0] : old[1951:1462] } : old[3413:2924] };
    ohm = { { old[975:486] : old[2437:1948] } : old[3899:3410] };
    ohr = { { old[1461:972] : old[2923:2434] } : old[4385:3896] };
    nhl = iterate_1_243(ohl);
    nhm = iterate_1_243(ohm);
    nhr = iterate_1_243(ohr);
    iterate_1_729 = { { nhl : nhm } : nhr };
  end
endfunction

function [4373:0] iterate_1_2187(
    input [13133:0] old
  );
  reg [4385:0] ohl;
  reg [4385:0] ohm;
  reg [4385:0] ohr;
  reg [1457:0] nhl;
  reg [1457:0] nhm;
  reg [1457:0] nhr;
  
  begin
    ohl = { { old[1461:0] : old[5839:4378] } : old[10217:8756] };
    ohm = { { old[2919:1458] : old[7297:5836] } : old[11675:10214] };
    ohr = { { old[4377:2916] : old[8755:7294] } : old[13133:11672] };
    nhl = iterate_1_729(ohl);
    nhm = iterate_1_729(ohm);
    nhr = iterate_1_729(ohr);
    iterate_1_2187 = { { nhl : nhm } : nhr };
  end
endfunction

function [53:0] iterate_3_9(
    input [109:0] old
  );
  reg [65:0] ht;
  reg [65:0] hm;
  reg [65:0] hb;
  
  begin
    ht = old[65:0];
    hm = old[87:22];
    hb = old[109:44];
    iterate_3_9 = { { iterate_1_9(ht) : iterate_1_9(hm) } : iterate_1_9(hb) };
  end
endfunction

function [161:0] iterate_9_9(
    input [241:0] old
  );
  reg [109:0] ht;
  reg [109:0] hm;
  reg [109:0] hb;
  
  begin
    ht = old[109:0];
    hm = old[175:66];
    hb = old[241:132];
    iterate_9_9 = { { iterate_3_9(ht) : iterate_3_9(hm) } : iterate_3_9(hb) };
  end
endfunction

function [161:0] iterate_3_27(
    input [289:0] old
  );
  reg [173:0] ht;
  reg [173:0] hm;
  reg [173:0] hb;
  
  begin
    ht = old[173:0];
    hm = old[231:58];
    hb = old[289:116];
    iterate_3_27 = { { iterate_1_27(ht) : iterate_1_27(hm) } : iterate_1_27(hb) };
  end
endfunction

function [485:0] iterate_9_27(
    input [637:0] old
  );
  reg [289:0] ht;
  reg [289:0] hm;
  reg [289:0] hb;
  
  begin
    ht = old[289:0];
    hm = old[463:174];
    hb = old[637:348];
    iterate_9_27 = { { iterate_3_27(ht) : iterate_3_27(hm) } : iterate_3_27(hb) };
  end
endfunction

function [1457:0] iterate_27_27(
    input [1681:0] old
  );
  reg [637:0] ht;
  reg [637:0] hm;
  reg [637:0] hb;
  
  begin
    ht = old[637:0];
    hm = old[1159:522];
    hb = old[1681:1044];
    iterate_27_27 = { { iterate_9_27(ht) : iterate_9_27(hm) } : iterate_9_27(hb) };
  end
endfunction

function [485:0] iterate_3_81(
    input [829:0] old
  );
  reg [497:0] ht;
  reg [497:0] hm;
  reg [497:0] hb;
  
  begin
    ht = old[497:0];
    hm = old[663:166];
    hb = old[829:332];
    iterate_3_81 = { { iterate_1_81(ht) : iterate_1_81(hm) } : iterate_1_81(hb) };
  end
endfunction

function [1457:0] iterate_9_81(
    input [1825:0] old
  );
  reg [829:0] ht;
  reg [829:0] hm;
  reg [829:0] hb;
  
  begin
    ht = old[829:0];
    hm = old[1327:498];
    hb = old[1825:996];
    iterate_9_81 = { { iterate_3_81(ht) : iterate_3_81(hm) } : iterate_3_81(hb) };
  end
endfunction

function [4373:0] iterate_27_81(
    input [4813:0] old
  );
  reg [1825:0] ht;
  reg [1825:0] hm;
  reg [1825:0] hb;
  
  begin
    ht = old[1825:0];
    hm = old[3319:1494];
    hb = old[4813:2988];
    iterate_27_81 = { { iterate_9_81(ht) : iterate_9_81(hm) } : iterate_9_81(hb) };
  end
endfunction

function [13121:0] iterate_81_81(
    input [13777:0] old
  );
  reg [4813:0] ht;
  reg [4813:0] hm;
  reg [4813:0] hb;
  
  begin
    ht = old[4813:0];
    hm = old[9295:4482];
    hb = old[13777:8964];
    iterate_81_81 = { { iterate_27_81(ht) : iterate_27_81(hm) } : iterate_27_81(hb) };
  end
endfunction

function [1457:0] iterate_3_243(
    input [2449:0] old
  );
  reg [1469:0] ht;
  reg [1469:0] hm;
  reg [1469:0] hb;
  
  begin
    ht = old[1469:0];
    hm = old[1959:490];
    hb = old[2449:980];
    iterate_3_243 = { { iterate_1_243(ht) : iterate_1_243(hm) } : iterate_1_243(hb) };
  end
endfunction

function [4373:0] iterate_9_243(
    input [5389:0] old
  );
  reg [2449:0] ht;
  reg [2449:0] hm;
  reg [2449:0] hb;
  
  begin
    ht = old[2449:0];
    hm = old[3919:1470];
    hb = old[5389:2940];
    iterate_9_243 = { { iterate_3_243(ht) : iterate_3_243(hm) } : iterate_3_243(hb) };
  end
endfunction

function [13121:0] iterate_27_243(
    input [14209:0] old
  );
  reg [5389:0] ht;
  reg [5389:0] hm;
  reg [5389:0] hb;
  
  begin
    ht = old[5389:0];
    hm = old[9799:4410];
    hb = old[14209:8820];
    iterate_27_243 = { { iterate_9_243(ht) : iterate_9_243(hm) } : iterate_9_243(hb) };
  end
endfunction

function [39365:0] iterate_81_243(
    input [40669:0] old
  );
  reg [14209:0] ht;
  reg [14209:0] hm;
  reg [14209:0] hb;
  
  begin
    ht = old[14209:0];
    hm = old[27439:13230];
    hb = old[40669:26460];
    iterate_81_243 = { { iterate_27_243(ht) : iterate_27_243(hm) } : iterate_27_243(hb) };
  end
endfunction

function [118097:0] iterate_243_243(
    input [120049:0] old
  );
  reg [40669:0] ht;
  reg [40669:0] hm;
  reg [40669:0] hb;
  
  begin
    ht = old[40669:0];
    hm = old[80359:39690];
    hb = old[120049:79380];
    iterate_243_243 = { { iterate_81_243(ht) : iterate_81_243(hm) } : iterate_81_243(hb) };
  end
endfunction

function [4373:0] iterate_3_729(
    input [7309:0] old
  );
  reg [4385:0] ht;
  reg [4385:0] hm;
  reg [4385:0] hb;
  
  begin
    ht = old[4385:0];
    hm = old[5847:1462];
    hb = old[7309:2924];
    iterate_3_729 = { { iterate_1_729(ht) : iterate_1_729(hm) } : iterate_1_729(hb) };
  end
endfunction

function [13121:0] iterate_9_729(
    input [16081:0] old
  );
  reg [7309:0] ht;
  reg [7309:0] hm;
  reg [7309:0] hb;
  
  begin
    ht = old[7309:0];
    hm = old[11695:4386];
    hb = old[16081:8772];
    iterate_9_729 = { { iterate_3_729(ht) : iterate_3_729(hm) } : iterate_3_729(hb) };
  end
endfunction

function [39365:0] iterate_27_729(
    input [42397:0] old
  );
  reg [16081:0] ht;
  reg [16081:0] hm;
  reg [16081:0] hb;
  
  begin
    ht = old[16081:0];
    hm = old[29239:13158];
    hb = old[42397:26316];
    iterate_27_729 = { { iterate_9_729(ht) : iterate_9_729(hm) } : iterate_9_729(hb) };
  end
endfunction

function [118097:0] iterate_81_729(
    input [121345:0] old
  );
  reg [42397:0] ht;
  reg [42397:0] hm;
  reg [42397:0] hb;
  
  begin
    ht = old[42397:0];
    hm = old[81871:39474];
    hb = old[121345:78948];
    iterate_81_729 = { { iterate_27_729(ht) : iterate_27_729(hm) } : iterate_27_729(hb) };
  end
endfunction

function [354293:0] iterate_243_729(
    input [358189:0] old
  );
  reg [121345:0] ht;
  reg [121345:0] hm;
  reg [121345:0] hb;
  
  begin
    ht = old[121345:0];
    hm = old[239767:118422];
    hb = old[358189:236844];
    iterate_243_729 = { { iterate_81_729(ht) : iterate_81_729(hm) } : iterate_81_729(hb) };
  end
endfunction

function [1062881:0] iterate_729_729(
    input [1068721:0] old
  );
  reg [358189:0] ht;
  reg [358189:0] hm;
  reg [358189:0] hb;
  
  begin
    ht = old[358189:0];
    hm = old[713455:355266];
    hb = old[1068721:710532];
    iterate_729_729 = { { iterate_243_729(ht) : iterate_243_729(hm) } : iterate_243_729(hb) };
  end
endfunction

function [3188645:0] iterate_2187_729(
    input [3200317:0] old
  );
  reg [1068721:0] ht;
  reg [1068721:0] hm;
  reg [1068721:0] hb;
  
  begin
    ht = old[1068721:0];
    hm = old[2134519:1065798];
    hb = old[3200317:2131596];
    iterate_2187_729 = { { iterate_729_729(ht) : iterate_729_729(hm) } : iterate_729_729(hb) };
  end
endfunction

function [13121:0] iterate_3_2187(
    input [21889:0] old
  );
  reg [13133:0] ht;
  reg [13133:0] hm;
  reg [13133:0] hb;
  
  begin
    ht = old[13133:0];
    hm = old[17511:4378];
    hb = old[21889:8756];
    iterate_3_2187 = { { iterate_1_2187(ht) : iterate_1_2187(hm) } : iterate_1_2187(hb) };
  end
endfunction

function [39365:0] iterate_9_2187(
    input [48157:0] old
  );
  reg [21889:0] ht;
  reg [21889:0] hm;
  reg [21889:0] hb;
  
  begin
    ht = old[21889:0];
    hm = old[35023:13134];
    hb = old[48157:26268];
    iterate_9_2187 = { { iterate_3_2187(ht) : iterate_3_2187(hm) } : iterate_3_2187(hb) };
  end
endfunction

function [118097:0] iterate_27_2187(
    input [126961:0] old
  );
  reg [48157:0] ht;
  reg [48157:0] hm;
  reg [48157:0] hb;
  
  begin
    ht = old[48157:0];
    hm = old[87559:39402];
    hb = old[126961:78804];
    iterate_27_2187 = { { iterate_9_2187(ht) : iterate_9_2187(hm) } : iterate_9_2187(hb) };
  end
endfunction

function [354293:0] iterate_81_2187(
    input [363373:0] old
  );
  reg [126961:0] ht;
  reg [126961:0] hm;
  reg [126961:0] hb;
  
  begin
    ht = old[126961:0];
    hm = old[245167:118206];
    hb = old[363373:236412];
    iterate_81_2187 = { { iterate_27_2187(ht) : iterate_27_2187(hm) } : iterate_27_2187(hb) };
  end
endfunction

function [1062881:0] iterate_243_2187(
    input [1072609:0] old
  );
  reg [363373:0] ht;
  reg [363373:0] hm;
  reg [363373:0] hb;
  
  begin
    ht = old[363373:0];
    hm = old[717991:354618];
    hb = old[1072609:709236];
    iterate_243_2187 = { { iterate_81_2187(ht) : iterate_81_2187(hm) } : iterate_81_2187(hb) };
  end
endfunction

function [3188645:0] iterate_729_2187(
    input [3200317:0] old
  );
  reg [1072609:0] ht;
  reg [1072609:0] hm;
  reg [1072609:0] hb;
  
  begin
    ht = old[1072609:0];
    hm = old[2136463:1063854];
    hb = old[3200317:2127708];
    iterate_729_2187 = { { iterate_243_2187(ht) : iterate_243_2187(hm) } : iterate_243_2187(hb) };
  end
endfunction

function [9565937:0] iterate_2187_2187(
    input [9583441:0] old
  );
  reg [3200317:0] ht;
  reg [3200317:0] hm;
  reg [3200317:0] hb;
  
  begin
    ht = old[3200317:0];
    hm = old[6391879:3191562];
    hb = old[9583441:6383124];
    iterate_2187_2187 = { { iterate_729_2187(ht) : iterate_729_2187(hm) } : iterate_729_2187(hb) };
  end
endfunction

function [16037:0] map_243_8019(
    input [1:0] cmd
  , input [485:0] key
  , input [16037:0] value
  );
  reg [16525:0] param;
  
  begin
    param = { cmd : key : value };
    map_243_8019 = traverse_243_8019(param);
  end
endfunction

function [16037:0] traverse_243_8019(
    input [16525:0] param
  );
  reg [1:0] keyZero;
  reg [16525:0] altParam;
  reg [1:0] keyTrit;
  reg [16525:0] nextParam;
  reg [1:0] keyTritIs1;
  reg [1:0] keyTritIs0;
  
  begin
    keyZero = isZero_lut(sign_243(param[487:2]));
    altParam = not_lut(keyZero) == 2'b01 ? param : 16526'
    keyTrit = altParam[3:2];
    nextParam = { altParam[1:0] : lshift_243(altParam[487:2]) : altParam[16525:488] };
    keyTritIs1 = isOne_lut(keyTrit);
    keyTritIs0 = isZero_lut(keyTrit);
    traverse_243_8019 = keyZero == 2'b01 ? leaf_243_8019(param) : keyTritIs1 == 2'b01 ? traverse_243_8019(nextParam) : keyTritIs0 == 2'b01 ? traverse_243_8019(nextParam) : traverse_243_8019(nextParam);
  end
endfunction

function [16037:0] leaf_243_8019(
    input [16525:0] param
  );
  reg [16037:0] oldValue;
  reg [1:0] cmd;
  reg [1:0] get;
  reg [1:0] set;
  reg [16037:0] value;
  
  begin
    oldValue = value;
    cmd = param[1:0];
    get = isZero_lut(cmd);
    set = isOne_lut(cmd);
    value = get == 2'b01 ? oldValue : set == 2'b01 ? param[16525:488] : 16038'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    leaf_243_8019 = oldValue;
  end
endfunction

x reg [0:0];

function [1:0] Qupla_merge(
    input [1:0] input1
  , input [1:0] input2
  );
  begin
    case ({input1, input2})
    4'b0000: Qupla_merge = 2'b00;
    4'b0001: Qupla_merge = 2'b01;
    4'b0010: Qupla_merge = 2'b10;
    4'b0011: Qupla_merge = 2'b11;
    4'b0100: Qupla_merge = 2'b01;
    4'b1000: Qupla_merge = 2'b10;
    4'b1100: Qupla_merge = 2'b11;
    4'b0101: Qupla_merge = 2'b01;
    4'b1010: Qupla_merge = 2'b10;
    4'b1111: Qupla_merge = 2'b11;
    default: Qupla_merge = 2'b00;
             x <= 1;
    endcase
  end
endfunction

function [1:0] Qupla_merge_1(
    input [1:0] input1
  , input [1:0] input2
  );
  begin
    Qupla_merge_1 = {
      Qupla_merge(input1[1:0], input2[1:0])
    };
  end
endfunction

function [323:0] Qupla_merge_162(
    input [323:0] input1
  , input [323:0] input2
  );
  begin
    Qupla_merge_162 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
      : Qupla_merge(input1[91:90], input2[91:90])
      : Qupla_merge(input1[93:92], input2[93:92])
      : Qupla_merge(input1[95:94], input2[95:94])
      : Qupla_merge(input1[97:96], input2[97:96])
      : Qupla_merge(input1[99:98], input2[99:98])
      : Qupla_merge(input1[101:100], input2[101:100])
      : Qupla_merge(input1[103:102], input2[103:102])
      : Qupla_merge(input1[105:104], input2[105:104])
      : Qupla_merge(input1[107:106], input2[107:106])
      : Qupla_merge(input1[109:108], input2[109:108])
      : Qupla_merge(input1[111:110], input2[111:110])
      : Qupla_merge(input1[113:112], input2[113:112])
      : Qupla_merge(input1[115:114], input2[115:114])
      : Qupla_merge(input1[117:116], input2[117:116])
      : Qupla_merge(input1[119:118], input2[119:118])
      : Qupla_merge(input1[121:120], input2[121:120])
      : Qupla_merge(input1[123:122], input2[123:122])
      : Qupla_merge(input1[125:124], input2[125:124])
      : Qupla_merge(input1[127:126], input2[127:126])
      : Qupla_merge(input1[129:128], input2[129:128])
      : Qupla_merge(input1[131:130], input2[131:130])
      : Qupla_merge(input1[133:132], input2[133:132])
      : Qupla_merge(input1[135:134], input2[135:134])
      : Qupla_merge(input1[137:136], input2[137:136])
      : Qupla_merge(input1[139:138], input2[139:138])
      : Qupla_merge(input1[141:140], input2[141:140])
      : Qupla_merge(input1[143:142], input2[143:142])
      : Qupla_merge(input1[145:144], input2[145:144])
      : Qupla_merge(input1[147:146], input2[147:146])
      : Qupla_merge(input1[149:148], input2[149:148])
      : Qupla_merge(input1[151:150], input2[151:150])
      : Qupla_merge(input1[153:152], input2[153:152])
      : Qupla_merge(input1[155:154], input2[155:154])
      : Qupla_merge(input1[157:156], input2[157:156])
      : Qupla_merge(input1[159:158], input2[159:158])
      : Qupla_merge(input1[161:160], input2[161:160])
      : Qupla_merge(input1[163:162], input2[163:162])
      : Qupla_merge(input1[165:164], input2[165:164])
      : Qupla_merge(input1[167:166], input2[167:166])
      : Qupla_merge(input1[169:168], input2[169:168])
      : Qupla_merge(input1[171:170], input2[171:170])
      : Qupla_merge(input1[173:172], input2[173:172])
      : Qupla_merge(input1[175:174], input2[175:174])
      : Qupla_merge(input1[177:176], input2[177:176])
      : Qupla_merge(input1[179:178], input2[179:178])
      : Qupla_merge(input1[181:180], input2[181:180])
      : Qupla_merge(input1[183:182], input2[183:182])
      : Qupla_merge(input1[185:184], input2[185:184])
      : Qupla_merge(input1[187:186], input2[187:186])
      : Qupla_merge(input1[189:188], input2[189:188])
      : Qupla_merge(input1[191:190], input2[191:190])
      : Qupla_merge(input1[193:192], input2[193:192])
      : Qupla_merge(input1[195:194], input2[195:194])
      : Qupla_merge(input1[197:196], input2[197:196])
      : Qupla_merge(input1[199:198], input2[199:198])
      : Qupla_merge(input1[201:200], input2[201:200])
      : Qupla_merge(input1[203:202], input2[203:202])
      : Qupla_merge(input1[205:204], input2[205:204])
      : Qupla_merge(input1[207:206], input2[207:206])
      : Qupla_merge(input1[209:208], input2[209:208])
      : Qupla_merge(input1[211:210], input2[211:210])
      : Qupla_merge(input1[213:212], input2[213:212])
      : Qupla_merge(input1[215:214], input2[215:214])
      : Qupla_merge(input1[217:216], input2[217:216])
      : Qupla_merge(input1[219:218], input2[219:218])
      : Qupla_merge(input1[221:220], input2[221:220])
      : Qupla_merge(input1[223:222], input2[223:222])
      : Qupla_merge(input1[225:224], input2[225:224])
      : Qupla_merge(input1[227:226], input2[227:226])
      : Qupla_merge(input1[229:228], input2[229:228])
      : Qupla_merge(input1[231:230], input2[231:230])
      : Qupla_merge(input1[233:232], input2[233:232])
      : Qupla_merge(input1[235:234], input2[235:234])
      : Qupla_merge(input1[237:236], input2[237:236])
      : Qupla_merge(input1[239:238], input2[239:238])
      : Qupla_merge(input1[241:240], input2[241:240])
      : Qupla_merge(input1[243:242], input2[243:242])
      : Qupla_merge(input1[245:244], input2[245:244])
      : Qupla_merge(input1[247:246], input2[247:246])
      : Qupla_merge(input1[249:248], input2[249:248])
      : Qupla_merge(input1[251:250], input2[251:250])
      : Qupla_merge(input1[253:252], input2[253:252])
      : Qupla_merge(input1[255:254], input2[255:254])
      : Qupla_merge(input1[257:256], input2[257:256])
      : Qupla_merge(input1[259:258], input2[259:258])
      : Qupla_merge(input1[261:260], input2[261:260])
      : Qupla_merge(input1[263:262], input2[263:262])
      : Qupla_merge(input1[265:264], input2[265:264])
      : Qupla_merge(input1[267:266], input2[267:266])
      : Qupla_merge(input1[269:268], input2[269:268])
      : Qupla_merge(input1[271:270], input2[271:270])
      : Qupla_merge(input1[273:272], input2[273:272])
      : Qupla_merge(input1[275:274], input2[275:274])
      : Qupla_merge(input1[277:276], input2[277:276])
      : Qupla_merge(input1[279:278], input2[279:278])
      : Qupla_merge(input1[281:280], input2[281:280])
      : Qupla_merge(input1[283:282], input2[283:282])
      : Qupla_merge(input1[285:284], input2[285:284])
      : Qupla_merge(input1[287:286], input2[287:286])
      : Qupla_merge(input1[289:288], input2[289:288])
      : Qupla_merge(input1[291:290], input2[291:290])
      : Qupla_merge(input1[293:292], input2[293:292])
      : Qupla_merge(input1[295:294], input2[295:294])
      : Qupla_merge(input1[297:296], input2[297:296])
      : Qupla_merge(input1[299:298], input2[299:298])
      : Qupla_merge(input1[301:300], input2[301:300])
      : Qupla_merge(input1[303:302], input2[303:302])
      : Qupla_merge(input1[305:304], input2[305:304])
      : Qupla_merge(input1[307:306], input2[307:306])
      : Qupla_merge(input1[309:308], input2[309:308])
      : Qupla_merge(input1[311:310], input2[311:310])
      : Qupla_merge(input1[313:312], input2[313:312])
      : Qupla_merge(input1[315:314], input2[315:314])
      : Qupla_merge(input1[317:316], input2[317:316])
      : Qupla_merge(input1[319:318], input2[319:318])
      : Qupla_merge(input1[321:320], input2[321:320])
      : Qupla_merge(input1[323:322], input2[323:322])
    };
  end
endfunction

function [5:0] Qupla_merge_3(
    input [5:0] input1
  , input [5:0] input2
  );
  begin
    Qupla_merge_3 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
    };
  end
endfunction

function [71:0] Qupla_merge_36(
    input [71:0] input1
  , input [71:0] input2
  );
  begin
    Qupla_merge_36 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
    };
  end
endfunction

function [11:0] Qupla_merge_6(
    input [11:0] input1
  , input [11:0] input2
  );
  begin
    Qupla_merge_6 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
    };
  end
endfunction

function [143:0] Qupla_merge_72(
    input [143:0] input1
  , input [143:0] input2
  );
  begin
    Qupla_merge_72 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
      : Qupla_merge(input1[91:90], input2[91:90])
      : Qupla_merge(input1[93:92], input2[93:92])
      : Qupla_merge(input1[95:94], input2[95:94])
      : Qupla_merge(input1[97:96], input2[97:96])
      : Qupla_merge(input1[99:98], input2[99:98])
      : Qupla_merge(input1[101:100], input2[101:100])
      : Qupla_merge(input1[103:102], input2[103:102])
      : Qupla_merge(input1[105:104], input2[105:104])
      : Qupla_merge(input1[107:106], input2[107:106])
      : Qupla_merge(input1[109:108], input2[109:108])
      : Qupla_merge(input1[111:110], input2[111:110])
      : Qupla_merge(input1[113:112], input2[113:112])
      : Qupla_merge(input1[115:114], input2[115:114])
      : Qupla_merge(input1[117:116], input2[117:116])
      : Qupla_merge(input1[119:118], input2[119:118])
      : Qupla_merge(input1[121:120], input2[121:120])
      : Qupla_merge(input1[123:122], input2[123:122])
      : Qupla_merge(input1[125:124], input2[125:124])
      : Qupla_merge(input1[127:126], input2[127:126])
      : Qupla_merge(input1[129:128], input2[129:128])
      : Qupla_merge(input1[131:130], input2[131:130])
      : Qupla_merge(input1[133:132], input2[133:132])
      : Qupla_merge(input1[135:134], input2[135:134])
      : Qupla_merge(input1[137:136], input2[137:136])
      : Qupla_merge(input1[139:138], input2[139:138])
      : Qupla_merge(input1[141:140], input2[141:140])
      : Qupla_merge(input1[143:142], input2[143:142])
    };
  end
endfunction

function [17:0] Qupla_merge_9(
    input [17:0] input1
  , input [17:0] input2
  );
  begin
    Qupla_merge_9 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
    };
  end
endfunction

function [23:0] Qupla_merge_12(
    input [23:0] input1
  , input [23:0] input2
  );
  begin
    Qupla_merge_12 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
    };
  end
endfunction

function [89:0] Qupla_merge_45(
    input [89:0] input1
  , input [89:0] input2
  );
  begin
    Qupla_merge_45 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
    };
  end
endfunction

function [161:0] Qupla_merge_81(
    input [161:0] input1
  , input [161:0] input2
  );
  begin
    Qupla_merge_81 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
      : Qupla_merge(input1[91:90], input2[91:90])
      : Qupla_merge(input1[93:92], input2[93:92])
      : Qupla_merge(input1[95:94], input2[95:94])
      : Qupla_merge(input1[97:96], input2[97:96])
      : Qupla_merge(input1[99:98], input2[99:98])
      : Qupla_merge(input1[101:100], input2[101:100])
      : Qupla_merge(input1[103:102], input2[103:102])
      : Qupla_merge(input1[105:104], input2[105:104])
      : Qupla_merge(input1[107:106], input2[107:106])
      : Qupla_merge(input1[109:108], input2[109:108])
      : Qupla_merge(input1[111:110], input2[111:110])
      : Qupla_merge(input1[113:112], input2[113:112])
      : Qupla_merge(input1[115:114], input2[115:114])
      : Qupla_merge(input1[117:116], input2[117:116])
      : Qupla_merge(input1[119:118], input2[119:118])
      : Qupla_merge(input1[121:120], input2[121:120])
      : Qupla_merge(input1[123:122], input2[123:122])
      : Qupla_merge(input1[125:124], input2[125:124])
      : Qupla_merge(input1[127:126], input2[127:126])
      : Qupla_merge(input1[129:128], input2[129:128])
      : Qupla_merge(input1[131:130], input2[131:130])
      : Qupla_merge(input1[133:132], input2[133:132])
      : Qupla_merge(input1[135:134], input2[135:134])
      : Qupla_merge(input1[137:136], input2[137:136])
      : Qupla_merge(input1[139:138], input2[139:138])
      : Qupla_merge(input1[141:140], input2[141:140])
      : Qupla_merge(input1[143:142], input2[143:142])
      : Qupla_merge(input1[145:144], input2[145:144])
      : Qupla_merge(input1[147:146], input2[147:146])
      : Qupla_merge(input1[149:148], input2[149:148])
      : Qupla_merge(input1[151:150], input2[151:150])
      : Qupla_merge(input1[153:152], input2[153:152])
      : Qupla_merge(input1[155:154], input2[155:154])
      : Qupla_merge(input1[157:156], input2[157:156])
      : Qupla_merge(input1[159:158], input2[159:158])
      : Qupla_merge(input1[161:160], input2[161:160])
    };
  end
endfunction

function [35:0] Qupla_merge_18(
    input [35:0] input1
  , input [35:0] input2
  );
  begin
    Qupla_merge_18 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
    };
  end
endfunction

function [485:0] Qupla_merge_243(
    input [485:0] input1
  , input [485:0] input2
  );
  begin
    Qupla_merge_243 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
      : Qupla_merge(input1[91:90], input2[91:90])
      : Qupla_merge(input1[93:92], input2[93:92])
      : Qupla_merge(input1[95:94], input2[95:94])
      : Qupla_merge(input1[97:96], input2[97:96])
      : Qupla_merge(input1[99:98], input2[99:98])
      : Qupla_merge(input1[101:100], input2[101:100])
      : Qupla_merge(input1[103:102], input2[103:102])
      : Qupla_merge(input1[105:104], input2[105:104])
      : Qupla_merge(input1[107:106], input2[107:106])
      : Qupla_merge(input1[109:108], input2[109:108])
      : Qupla_merge(input1[111:110], input2[111:110])
      : Qupla_merge(input1[113:112], input2[113:112])
      : Qupla_merge(input1[115:114], input2[115:114])
      : Qupla_merge(input1[117:116], input2[117:116])
      : Qupla_merge(input1[119:118], input2[119:118])
      : Qupla_merge(input1[121:120], input2[121:120])
      : Qupla_merge(input1[123:122], input2[123:122])
      : Qupla_merge(input1[125:124], input2[125:124])
      : Qupla_merge(input1[127:126], input2[127:126])
      : Qupla_merge(input1[129:128], input2[129:128])
      : Qupla_merge(input1[131:130], input2[131:130])
      : Qupla_merge(input1[133:132], input2[133:132])
      : Qupla_merge(input1[135:134], input2[135:134])
      : Qupla_merge(input1[137:136], input2[137:136])
      : Qupla_merge(input1[139:138], input2[139:138])
      : Qupla_merge(input1[141:140], input2[141:140])
      : Qupla_merge(input1[143:142], input2[143:142])
      : Qupla_merge(input1[145:144], input2[145:144])
      : Qupla_merge(input1[147:146], input2[147:146])
      : Qupla_merge(input1[149:148], input2[149:148])
      : Qupla_merge(input1[151:150], input2[151:150])
      : Qupla_merge(input1[153:152], input2[153:152])
      : Qupla_merge(input1[155:154], input2[155:154])
      : Qupla_merge(input1[157:156], input2[157:156])
      : Qupla_merge(input1[159:158], input2[159:158])
      : Qupla_merge(input1[161:160], input2[161:160])
      : Qupla_merge(input1[163:162], input2[163:162])
      : Qupla_merge(input1[165:164], input2[165:164])
      : Qupla_merge(input1[167:166], input2[167:166])
      : Qupla_merge(input1[169:168], input2[169:168])
      : Qupla_merge(input1[171:170], input2[171:170])
      : Qupla_merge(input1[173:172], input2[173:172])
      : Qupla_merge(input1[175:174], input2[175:174])
      : Qupla_merge(input1[177:176], input2[177:176])
      : Qupla_merge(input1[179:178], input2[179:178])
      : Qupla_merge(input1[181:180], input2[181:180])
      : Qupla_merge(input1[183:182], input2[183:182])
      : Qupla_merge(input1[185:184], input2[185:184])
      : Qupla_merge(input1[187:186], input2[187:186])
      : Qupla_merge(input1[189:188], input2[189:188])
      : Qupla_merge(input1[191:190], input2[191:190])
      : Qupla_merge(input1[193:192], input2[193:192])
      : Qupla_merge(input1[195:194], input2[195:194])
      : Qupla_merge(input1[197:196], input2[197:196])
      : Qupla_merge(input1[199:198], input2[199:198])
      : Qupla_merge(input1[201:200], input2[201:200])
      : Qupla_merge(input1[203:202], input2[203:202])
      : Qupla_merge(input1[205:204], input2[205:204])
      : Qupla_merge(input1[207:206], input2[207:206])
      : Qupla_merge(input1[209:208], input2[209:208])
      : Qupla_merge(input1[211:210], input2[211:210])
      : Qupla_merge(input1[213:212], input2[213:212])
      : Qupla_merge(input1[215:214], input2[215:214])
      : Qupla_merge(input1[217:216], input2[217:216])
      : Qupla_merge(input1[219:218], input2[219:218])
      : Qupla_merge(input1[221:220], input2[221:220])
      : Qupla_merge(input1[223:222], input2[223:222])
      : Qupla_merge(input1[225:224], input2[225:224])
      : Qupla_merge(input1[227:226], input2[227:226])
      : Qupla_merge(input1[229:228], input2[229:228])
      : Qupla_merge(input1[231:230], input2[231:230])
      : Qupla_merge(input1[233:232], input2[233:232])
      : Qupla_merge(input1[235:234], input2[235:234])
      : Qupla_merge(input1[237:236], input2[237:236])
      : Qupla_merge(input1[239:238], input2[239:238])
      : Qupla_merge(input1[241:240], input2[241:240])
      : Qupla_merge(input1[243:242], input2[243:242])
      : Qupla_merge(input1[245:244], input2[245:244])
      : Qupla_merge(input1[247:246], input2[247:246])
      : Qupla_merge(input1[249:248], input2[249:248])
      : Qupla_merge(input1[251:250], input2[251:250])
      : Qupla_merge(input1[253:252], input2[253:252])
      : Qupla_merge(input1[255:254], input2[255:254])
      : Qupla_merge(input1[257:256], input2[257:256])
      : Qupla_merge(input1[259:258], input2[259:258])
      : Qupla_merge(input1[261:260], input2[261:260])
      : Qupla_merge(input1[263:262], input2[263:262])
      : Qupla_merge(input1[265:264], input2[265:264])
      : Qupla_merge(input1[267:266], input2[267:266])
      : Qupla_merge(input1[269:268], input2[269:268])
      : Qupla_merge(input1[271:270], input2[271:270])
      : Qupla_merge(input1[273:272], input2[273:272])
      : Qupla_merge(input1[275:274], input2[275:274])
      : Qupla_merge(input1[277:276], input2[277:276])
      : Qupla_merge(input1[279:278], input2[279:278])
      : Qupla_merge(input1[281:280], input2[281:280])
      : Qupla_merge(input1[283:282], input2[283:282])
      : Qupla_merge(input1[285:284], input2[285:284])
      : Qupla_merge(input1[287:286], input2[287:286])
      : Qupla_merge(input1[289:288], input2[289:288])
      : Qupla_merge(input1[291:290], input2[291:290])
      : Qupla_merge(input1[293:292], input2[293:292])
      : Qupla_merge(input1[295:294], input2[295:294])
      : Qupla_merge(input1[297:296], input2[297:296])
      : Qupla_merge(input1[299:298], input2[299:298])
      : Qupla_merge(input1[301:300], input2[301:300])
      : Qupla_merge(input1[303:302], input2[303:302])
      : Qupla_merge(input1[305:304], input2[305:304])
      : Qupla_merge(input1[307:306], input2[307:306])
      : Qupla_merge(input1[309:308], input2[309:308])
      : Qupla_merge(input1[311:310], input2[311:310])
      : Qupla_merge(input1[313:312], input2[313:312])
      : Qupla_merge(input1[315:314], input2[315:314])
      : Qupla_merge(input1[317:316], input2[317:316])
      : Qupla_merge(input1[319:318], input2[319:318])
      : Qupla_merge(input1[321:320], input2[321:320])
      : Qupla_merge(input1[323:322], input2[323:322])
      : Qupla_merge(input1[325:324], input2[325:324])
      : Qupla_merge(input1[327:326], input2[327:326])
      : Qupla_merge(input1[329:328], input2[329:328])
      : Qupla_merge(input1[331:330], input2[331:330])
      : Qupla_merge(input1[333:332], input2[333:332])
      : Qupla_merge(input1[335:334], input2[335:334])
      : Qupla_merge(input1[337:336], input2[337:336])
      : Qupla_merge(input1[339:338], input2[339:338])
      : Qupla_merge(input1[341:340], input2[341:340])
      : Qupla_merge(input1[343:342], input2[343:342])
      : Qupla_merge(input1[345:344], input2[345:344])
      : Qupla_merge(input1[347:346], input2[347:346])
      : Qupla_merge(input1[349:348], input2[349:348])
      : Qupla_merge(input1[351:350], input2[351:350])
      : Qupla_merge(input1[353:352], input2[353:352])
      : Qupla_merge(input1[355:354], input2[355:354])
      : Qupla_merge(input1[357:356], input2[357:356])
      : Qupla_merge(input1[359:358], input2[359:358])
      : Qupla_merge(input1[361:360], input2[361:360])
      : Qupla_merge(input1[363:362], input2[363:362])
      : Qupla_merge(input1[365:364], input2[365:364])
      : Qupla_merge(input1[367:366], input2[367:366])
      : Qupla_merge(input1[369:368], input2[369:368])
      : Qupla_merge(input1[371:370], input2[371:370])
      : Qupla_merge(input1[373:372], input2[373:372])
      : Qupla_merge(input1[375:374], input2[375:374])
      : Qupla_merge(input1[377:376], input2[377:376])
      : Qupla_merge(input1[379:378], input2[379:378])
      : Qupla_merge(input1[381:380], input2[381:380])
      : Qupla_merge(input1[383:382], input2[383:382])
      : Qupla_merge(input1[385:384], input2[385:384])
      : Qupla_merge(input1[387:386], input2[387:386])
      : Qupla_merge(input1[389:388], input2[389:388])
      : Qupla_merge(input1[391:390], input2[391:390])
      : Qupla_merge(input1[393:392], input2[393:392])
      : Qupla_merge(input1[395:394], input2[395:394])
      : Qupla_merge(input1[397:396], input2[397:396])
      : Qupla_merge(input1[399:398], input2[399:398])
      : Qupla_merge(input1[401:400], input2[401:400])
      : Qupla_merge(input1[403:402], input2[403:402])
      : Qupla_merge(input1[405:404], input2[405:404])
      : Qupla_merge(input1[407:406], input2[407:406])
      : Qupla_merge(input1[409:408], input2[409:408])
      : Qupla_merge(input1[411:410], input2[411:410])
      : Qupla_merge(input1[413:412], input2[413:412])
      : Qupla_merge(input1[415:414], input2[415:414])
      : Qupla_merge(input1[417:416], input2[417:416])
      : Qupla_merge(input1[419:418], input2[419:418])
      : Qupla_merge(input1[421:420], input2[421:420])
      : Qupla_merge(input1[423:422], input2[423:422])
      : Qupla_merge(input1[425:424], input2[425:424])
      : Qupla_merge(input1[427:426], input2[427:426])
      : Qupla_merge(input1[429:428], input2[429:428])
      : Qupla_merge(input1[431:430], input2[431:430])
      : Qupla_merge(input1[433:432], input2[433:432])
      : Qupla_merge(input1[435:434], input2[435:434])
      : Qupla_merge(input1[437:436], input2[437:436])
      : Qupla_merge(input1[439:438], input2[439:438])
      : Qupla_merge(input1[441:440], input2[441:440])
      : Qupla_merge(input1[443:442], input2[443:442])
      : Qupla_merge(input1[445:444], input2[445:444])
      : Qupla_merge(input1[447:446], input2[447:446])
      : Qupla_merge(input1[449:448], input2[449:448])
      : Qupla_merge(input1[451:450], input2[451:450])
      : Qupla_merge(input1[453:452], input2[453:452])
      : Qupla_merge(input1[455:454], input2[455:454])
      : Qupla_merge(input1[457:456], input2[457:456])
      : Qupla_merge(input1[459:458], input2[459:458])
      : Qupla_merge(input1[461:460], input2[461:460])
      : Qupla_merge(input1[463:462], input2[463:462])
      : Qupla_merge(input1[465:464], input2[465:464])
      : Qupla_merge(input1[467:466], input2[467:466])
      : Qupla_merge(input1[469:468], input2[469:468])
      : Qupla_merge(input1[471:470], input2[471:470])
      : Qupla_merge(input1[473:472], input2[473:472])
      : Qupla_merge(input1[475:474], input2[475:474])
      : Qupla_merge(input1[477:476], input2[477:476])
      : Qupla_merge(input1[479:478], input2[479:478])
      : Qupla_merge(input1[481:480], input2[481:480])
      : Qupla_merge(input1[483:482], input2[483:482])
      : Qupla_merge(input1[485:484], input2[485:484])
    };
  end
endfunction

function [107:0] Qupla_merge_54(
    input [107:0] input1
  , input [107:0] input2
  );
  begin
    Qupla_merge_54 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
      : Qupla_merge(input1[91:90], input2[91:90])
      : Qupla_merge(input1[93:92], input2[93:92])
      : Qupla_merge(input1[95:94], input2[95:94])
      : Qupla_merge(input1[97:96], input2[97:96])
      : Qupla_merge(input1[99:98], input2[99:98])
      : Qupla_merge(input1[101:100], input2[101:100])
      : Qupla_merge(input1[103:102], input2[103:102])
      : Qupla_merge(input1[105:104], input2[105:104])
      : Qupla_merge(input1[107:106], input2[107:106])
    };
  end
endfunction

function [47:0] Qupla_merge_24(
    input [47:0] input1
  , input [47:0] input2
  );
  begin
    Qupla_merge_24 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
    };
  end
endfunction

function [1457:0] Qupla_merge_729(
    input [1457:0] input1
  , input [1457:0] input2
  );
  begin
    Qupla_merge_729 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
      : Qupla_merge(input1[55:54], input2[55:54])
      : Qupla_merge(input1[57:56], input2[57:56])
      : Qupla_merge(input1[59:58], input2[59:58])
      : Qupla_merge(input1[61:60], input2[61:60])
      : Qupla_merge(input1[63:62], input2[63:62])
      : Qupla_merge(input1[65:64], input2[65:64])
      : Qupla_merge(input1[67:66], input2[67:66])
      : Qupla_merge(input1[69:68], input2[69:68])
      : Qupla_merge(input1[71:70], input2[71:70])
      : Qupla_merge(input1[73:72], input2[73:72])
      : Qupla_merge(input1[75:74], input2[75:74])
      : Qupla_merge(input1[77:76], input2[77:76])
      : Qupla_merge(input1[79:78], input2[79:78])
      : Qupla_merge(input1[81:80], input2[81:80])
      : Qupla_merge(input1[83:82], input2[83:82])
      : Qupla_merge(input1[85:84], input2[85:84])
      : Qupla_merge(input1[87:86], input2[87:86])
      : Qupla_merge(input1[89:88], input2[89:88])
      : Qupla_merge(input1[91:90], input2[91:90])
      : Qupla_merge(input1[93:92], input2[93:92])
      : Qupla_merge(input1[95:94], input2[95:94])
      : Qupla_merge(input1[97:96], input2[97:96])
      : Qupla_merge(input1[99:98], input2[99:98])
      : Qupla_merge(input1[101:100], input2[101:100])
      : Qupla_merge(input1[103:102], input2[103:102])
      : Qupla_merge(input1[105:104], input2[105:104])
      : Qupla_merge(input1[107:106], input2[107:106])
      : Qupla_merge(input1[109:108], input2[109:108])
      : Qupla_merge(input1[111:110], input2[111:110])
      : Qupla_merge(input1[113:112], input2[113:112])
      : Qupla_merge(input1[115:114], input2[115:114])
      : Qupla_merge(input1[117:116], input2[117:116])
      : Qupla_merge(input1[119:118], input2[119:118])
      : Qupla_merge(input1[121:120], input2[121:120])
      : Qupla_merge(input1[123:122], input2[123:122])
      : Qupla_merge(input1[125:124], input2[125:124])
      : Qupla_merge(input1[127:126], input2[127:126])
      : Qupla_merge(input1[129:128], input2[129:128])
      : Qupla_merge(input1[131:130], input2[131:130])
      : Qupla_merge(input1[133:132], input2[133:132])
      : Qupla_merge(input1[135:134], input2[135:134])
      : Qupla_merge(input1[137:136], input2[137:136])
      : Qupla_merge(input1[139:138], input2[139:138])
      : Qupla_merge(input1[141:140], input2[141:140])
      : Qupla_merge(input1[143:142], input2[143:142])
      : Qupla_merge(input1[145:144], input2[145:144])
      : Qupla_merge(input1[147:146], input2[147:146])
      : Qupla_merge(input1[149:148], input2[149:148])
      : Qupla_merge(input1[151:150], input2[151:150])
      : Qupla_merge(input1[153:152], input2[153:152])
      : Qupla_merge(input1[155:154], input2[155:154])
      : Qupla_merge(input1[157:156], input2[157:156])
      : Qupla_merge(input1[159:158], input2[159:158])
      : Qupla_merge(input1[161:160], input2[161:160])
      : Qupla_merge(input1[163:162], input2[163:162])
      : Qupla_merge(input1[165:164], input2[165:164])
      : Qupla_merge(input1[167:166], input2[167:166])
      : Qupla_merge(input1[169:168], input2[169:168])
      : Qupla_merge(input1[171:170], input2[171:170])
      : Qupla_merge(input1[173:172], input2[173:172])
      : Qupla_merge(input1[175:174], input2[175:174])
      : Qupla_merge(input1[177:176], input2[177:176])
      : Qupla_merge(input1[179:178], input2[179:178])
      : Qupla_merge(input1[181:180], input2[181:180])
      : Qupla_merge(input1[183:182], input2[183:182])
      : Qupla_merge(input1[185:184], input2[185:184])
      : Qupla_merge(input1[187:186], input2[187:186])
      : Qupla_merge(input1[189:188], input2[189:188])
      : Qupla_merge(input1[191:190], input2[191:190])
      : Qupla_merge(input1[193:192], input2[193:192])
      : Qupla_merge(input1[195:194], input2[195:194])
      : Qupla_merge(input1[197:196], input2[197:196])
      : Qupla_merge(input1[199:198], input2[199:198])
      : Qupla_merge(input1[201:200], input2[201:200])
      : Qupla_merge(input1[203:202], input2[203:202])
      : Qupla_merge(input1[205:204], input2[205:204])
      : Qupla_merge(input1[207:206], input2[207:206])
      : Qupla_merge(input1[209:208], input2[209:208])
      : Qupla_merge(input1[211:210], input2[211:210])
      : Qupla_merge(input1[213:212], input2[213:212])
      : Qupla_merge(input1[215:214], input2[215:214])
      : Qupla_merge(input1[217:216], input2[217:216])
      : Qupla_merge(input1[219:218], input2[219:218])
      : Qupla_merge(input1[221:220], input2[221:220])
      : Qupla_merge(input1[223:222], input2[223:222])
      : Qupla_merge(input1[225:224], input2[225:224])
      : Qupla_merge(input1[227:226], input2[227:226])
      : Qupla_merge(input1[229:228], input2[229:228])
      : Qupla_merge(input1[231:230], input2[231:230])
      : Qupla_merge(input1[233:232], input2[233:232])
      : Qupla_merge(input1[235:234], input2[235:234])
      : Qupla_merge(input1[237:236], input2[237:236])
      : Qupla_merge(input1[239:238], input2[239:238])
      : Qupla_merge(input1[241:240], input2[241:240])
      : Qupla_merge(input1[243:242], input2[243:242])
      : Qupla_merge(input1[245:244], input2[245:244])
      : Qupla_merge(input1[247:246], input2[247:246])
      : Qupla_merge(input1[249:248], input2[249:248])
      : Qupla_merge(input1[251:250], input2[251:250])
      : Qupla_merge(input1[253:252], input2[253:252])
      : Qupla_merge(input1[255:254], input2[255:254])
      : Qupla_merge(input1[257:256], input2[257:256])
      : Qupla_merge(input1[259:258], input2[259:258])
      : Qupla_merge(input1[261:260], input2[261:260])
      : Qupla_merge(input1[263:262], input2[263:262])
      : Qupla_merge(input1[265:264], input2[265:264])
      : Qupla_merge(input1[267:266], input2[267:266])
      : Qupla_merge(input1[269:268], input2[269:268])
      : Qupla_merge(input1[271:270], input2[271:270])
      : Qupla_merge(input1[273:272], input2[273:272])
      : Qupla_merge(input1[275:274], input2[275:274])
      : Qupla_merge(input1[277:276], input2[277:276])
      : Qupla_merge(input1[279:278], input2[279:278])
      : Qupla_merge(input1[281:280], input2[281:280])
      : Qupla_merge(input1[283:282], input2[283:282])
      : Qupla_merge(input1[285:284], input2[285:284])
      : Qupla_merge(input1[287:286], input2[287:286])
      : Qupla_merge(input1[289:288], input2[289:288])
      : Qupla_merge(input1[291:290], input2[291:290])
      : Qupla_merge(input1[293:292], input2[293:292])
      : Qupla_merge(input1[295:294], input2[295:294])
      : Qupla_merge(input1[297:296], input2[297:296])
      : Qupla_merge(input1[299:298], input2[299:298])
      : Qupla_merge(input1[301:300], input2[301:300])
      : Qupla_merge(input1[303:302], input2[303:302])
      : Qupla_merge(input1[305:304], input2[305:304])
      : Qupla_merge(input1[307:306], input2[307:306])
      : Qupla_merge(input1[309:308], input2[309:308])
      : Qupla_merge(input1[311:310], input2[311:310])
      : Qupla_merge(input1[313:312], input2[313:312])
      : Qupla_merge(input1[315:314], input2[315:314])
      : Qupla_merge(input1[317:316], input2[317:316])
      : Qupla_merge(input1[319:318], input2[319:318])
      : Qupla_merge(input1[321:320], input2[321:320])
      : Qupla_merge(input1[323:322], input2[323:322])
      : Qupla_merge(input1[325:324], input2[325:324])
      : Qupla_merge(input1[327:326], input2[327:326])
      : Qupla_merge(input1[329:328], input2[329:328])
      : Qupla_merge(input1[331:330], input2[331:330])
      : Qupla_merge(input1[333:332], input2[333:332])
      : Qupla_merge(input1[335:334], input2[335:334])
      : Qupla_merge(input1[337:336], input2[337:336])
      : Qupla_merge(input1[339:338], input2[339:338])
      : Qupla_merge(input1[341:340], input2[341:340])
      : Qupla_merge(input1[343:342], input2[343:342])
      : Qupla_merge(input1[345:344], input2[345:344])
      : Qupla_merge(input1[347:346], input2[347:346])
      : Qupla_merge(input1[349:348], input2[349:348])
      : Qupla_merge(input1[351:350], input2[351:350])
      : Qupla_merge(input1[353:352], input2[353:352])
      : Qupla_merge(input1[355:354], input2[355:354])
      : Qupla_merge(input1[357:356], input2[357:356])
      : Qupla_merge(input1[359:358], input2[359:358])
      : Qupla_merge(input1[361:360], input2[361:360])
      : Qupla_merge(input1[363:362], input2[363:362])
      : Qupla_merge(input1[365:364], input2[365:364])
      : Qupla_merge(input1[367:366], input2[367:366])
      : Qupla_merge(input1[369:368], input2[369:368])
      : Qupla_merge(input1[371:370], input2[371:370])
      : Qupla_merge(input1[373:372], input2[373:372])
      : Qupla_merge(input1[375:374], input2[375:374])
      : Qupla_merge(input1[377:376], input2[377:376])
      : Qupla_merge(input1[379:378], input2[379:378])
      : Qupla_merge(input1[381:380], input2[381:380])
      : Qupla_merge(input1[383:382], input2[383:382])
      : Qupla_merge(input1[385:384], input2[385:384])
      : Qupla_merge(input1[387:386], input2[387:386])
      : Qupla_merge(input1[389:388], input2[389:388])
      : Qupla_merge(input1[391:390], input2[391:390])
      : Qupla_merge(input1[393:392], input2[393:392])
      : Qupla_merge(input1[395:394], input2[395:394])
      : Qupla_merge(input1[397:396], input2[397:396])
      : Qupla_merge(input1[399:398], input2[399:398])
      : Qupla_merge(input1[401:400], input2[401:400])
      : Qupla_merge(input1[403:402], input2[403:402])
      : Qupla_merge(input1[405:404], input2[405:404])
      : Qupla_merge(input1[407:406], input2[407:406])
      : Qupla_merge(input1[409:408], input2[409:408])
      : Qupla_merge(input1[411:410], input2[411:410])
      : Qupla_merge(input1[413:412], input2[413:412])
      : Qupla_merge(input1[415:414], input2[415:414])
      : Qupla_merge(input1[417:416], input2[417:416])
      : Qupla_merge(input1[419:418], input2[419:418])
      : Qupla_merge(input1[421:420], input2[421:420])
      : Qupla_merge(input1[423:422], input2[423:422])
      : Qupla_merge(input1[425:424], input2[425:424])
      : Qupla_merge(input1[427:426], input2[427:426])
      : Qupla_merge(input1[429:428], input2[429:428])
      : Qupla_merge(input1[431:430], input2[431:430])
      : Qupla_merge(input1[433:432], input2[433:432])
      : Qupla_merge(input1[435:434], input2[435:434])
      : Qupla_merge(input1[437:436], input2[437:436])
      : Qupla_merge(input1[439:438], input2[439:438])
      : Qupla_merge(input1[441:440], input2[441:440])
      : Qupla_merge(input1[443:442], input2[443:442])
      : Qupla_merge(input1[445:444], input2[445:444])
      : Qupla_merge(input1[447:446], input2[447:446])
      : Qupla_merge(input1[449:448], input2[449:448])
      : Qupla_merge(input1[451:450], input2[451:450])
      : Qupla_merge(input1[453:452], input2[453:452])
      : Qupla_merge(input1[455:454], input2[455:454])
      : Qupla_merge(input1[457:456], input2[457:456])
      : Qupla_merge(input1[459:458], input2[459:458])
      : Qupla_merge(input1[461:460], input2[461:460])
      : Qupla_merge(input1[463:462], input2[463:462])
      : Qupla_merge(input1[465:464], input2[465:464])
      : Qupla_merge(input1[467:466], input2[467:466])
      : Qupla_merge(input1[469:468], input2[469:468])
      : Qupla_merge(input1[471:470], input2[471:470])
      : Qupla_merge(input1[473:472], input2[473:472])
      : Qupla_merge(input1[475:474], input2[475:474])
      : Qupla_merge(input1[477:476], input2[477:476])
      : Qupla_merge(input1[479:478], input2[479:478])
      : Qupla_merge(input1[481:480], input2[481:480])
      : Qupla_merge(input1[483:482], input2[483:482])
      : Qupla_merge(input1[485:484], input2[485:484])
      : Qupla_merge(input1[487:486], input2[487:486])
      : Qupla_merge(input1[489:488], input2[489:488])
      : Qupla_merge(input1[491:490], input2[491:490])
      : Qupla_merge(input1[493:492], input2[493:492])
      : Qupla_merge(input1[495:494], input2[495:494])
      : Qupla_merge(input1[497:496], input2[497:496])
      : Qupla_merge(input1[499:498], input2[499:498])
      : Qupla_merge(input1[501:500], input2[501:500])
      : Qupla_merge(input1[503:502], input2[503:502])
      : Qupla_merge(input1[505:504], input2[505:504])
      : Qupla_merge(input1[507:506], input2[507:506])
      : Qupla_merge(input1[509:508], input2[509:508])
      : Qupla_merge(input1[511:510], input2[511:510])
      : Qupla_merge(input1[513:512], input2[513:512])
      : Qupla_merge(input1[515:514], input2[515:514])
      : Qupla_merge(input1[517:516], input2[517:516])
      : Qupla_merge(input1[519:518], input2[519:518])
      : Qupla_merge(input1[521:520], input2[521:520])
      : Qupla_merge(input1[523:522], input2[523:522])
      : Qupla_merge(input1[525:524], input2[525:524])
      : Qupla_merge(input1[527:526], input2[527:526])
      : Qupla_merge(input1[529:528], input2[529:528])
      : Qupla_merge(input1[531:530], input2[531:530])
      : Qupla_merge(input1[533:532], input2[533:532])
      : Qupla_merge(input1[535:534], input2[535:534])
      : Qupla_merge(input1[537:536], input2[537:536])
      : Qupla_merge(input1[539:538], input2[539:538])
      : Qupla_merge(input1[541:540], input2[541:540])
      : Qupla_merge(input1[543:542], input2[543:542])
      : Qupla_merge(input1[545:544], input2[545:544])
      : Qupla_merge(input1[547:546], input2[547:546])
      : Qupla_merge(input1[549:548], input2[549:548])
      : Qupla_merge(input1[551:550], input2[551:550])
      : Qupla_merge(input1[553:552], input2[553:552])
      : Qupla_merge(input1[555:554], input2[555:554])
      : Qupla_merge(input1[557:556], input2[557:556])
      : Qupla_merge(input1[559:558], input2[559:558])
      : Qupla_merge(input1[561:560], input2[561:560])
      : Qupla_merge(input1[563:562], input2[563:562])
      : Qupla_merge(input1[565:564], input2[565:564])
      : Qupla_merge(input1[567:566], input2[567:566])
      : Qupla_merge(input1[569:568], input2[569:568])
      : Qupla_merge(input1[571:570], input2[571:570])
      : Qupla_merge(input1[573:572], input2[573:572])
      : Qupla_merge(input1[575:574], input2[575:574])
      : Qupla_merge(input1[577:576], input2[577:576])
      : Qupla_merge(input1[579:578], input2[579:578])
      : Qupla_merge(input1[581:580], input2[581:580])
      : Qupla_merge(input1[583:582], input2[583:582])
      : Qupla_merge(input1[585:584], input2[585:584])
      : Qupla_merge(input1[587:586], input2[587:586])
      : Qupla_merge(input1[589:588], input2[589:588])
      : Qupla_merge(input1[591:590], input2[591:590])
      : Qupla_merge(input1[593:592], input2[593:592])
      : Qupla_merge(input1[595:594], input2[595:594])
      : Qupla_merge(input1[597:596], input2[597:596])
      : Qupla_merge(input1[599:598], input2[599:598])
      : Qupla_merge(input1[601:600], input2[601:600])
      : Qupla_merge(input1[603:602], input2[603:602])
      : Qupla_merge(input1[605:604], input2[605:604])
      : Qupla_merge(input1[607:606], input2[607:606])
      : Qupla_merge(input1[609:608], input2[609:608])
      : Qupla_merge(input1[611:610], input2[611:610])
      : Qupla_merge(input1[613:612], input2[613:612])
      : Qupla_merge(input1[615:614], input2[615:614])
      : Qupla_merge(input1[617:616], input2[617:616])
      : Qupla_merge(input1[619:618], input2[619:618])
      : Qupla_merge(input1[621:620], input2[621:620])
      : Qupla_merge(input1[623:622], input2[623:622])
      : Qupla_merge(input1[625:624], input2[625:624])
      : Qupla_merge(input1[627:626], input2[627:626])
      : Qupla_merge(input1[629:628], input2[629:628])
      : Qupla_merge(input1[631:630], input2[631:630])
      : Qupla_merge(input1[633:632], input2[633:632])
      : Qupla_merge(input1[635:634], input2[635:634])
      : Qupla_merge(input1[637:636], input2[637:636])
      : Qupla_merge(input1[639:638], input2[639:638])
      : Qupla_merge(input1[641:640], input2[641:640])
      : Qupla_merge(input1[643:642], input2[643:642])
      : Qupla_merge(input1[645:644], input2[645:644])
      : Qupla_merge(input1[647:646], input2[647:646])
      : Qupla_merge(input1[649:648], input2[649:648])
      : Qupla_merge(input1[651:650], input2[651:650])
      : Qupla_merge(input1[653:652], input2[653:652])
      : Qupla_merge(input1[655:654], input2[655:654])
      : Qupla_merge(input1[657:656], input2[657:656])
      : Qupla_merge(input1[659:658], input2[659:658])
      : Qupla_merge(input1[661:660], input2[661:660])
      : Qupla_merge(input1[663:662], input2[663:662])
      : Qupla_merge(input1[665:664], input2[665:664])
      : Qupla_merge(input1[667:666], input2[667:666])
      : Qupla_merge(input1[669:668], input2[669:668])
      : Qupla_merge(input1[671:670], input2[671:670])
      : Qupla_merge(input1[673:672], input2[673:672])
      : Qupla_merge(input1[675:674], input2[675:674])
      : Qupla_merge(input1[677:676], input2[677:676])
      : Qupla_merge(input1[679:678], input2[679:678])
      : Qupla_merge(input1[681:680], input2[681:680])
      : Qupla_merge(input1[683:682], input2[683:682])
      : Qupla_merge(input1[685:684], input2[685:684])
      : Qupla_merge(input1[687:686], input2[687:686])
      : Qupla_merge(input1[689:688], input2[689:688])
      : Qupla_merge(input1[691:690], input2[691:690])
      : Qupla_merge(input1[693:692], input2[693:692])
      : Qupla_merge(input1[695:694], input2[695:694])
      : Qupla_merge(input1[697:696], input2[697:696])
      : Qupla_merge(input1[699:698], input2[699:698])
      : Qupla_merge(input1[701:700], input2[701:700])
      : Qupla_merge(input1[703:702], input2[703:702])
      : Qupla_merge(input1[705:704], input2[705:704])
      : Qupla_merge(input1[707:706], input2[707:706])
      : Qupla_merge(input1[709:708], input2[709:708])
      : Qupla_merge(input1[711:710], input2[711:710])
      : Qupla_merge(input1[713:712], input2[713:712])
      : Qupla_merge(input1[715:714], input2[715:714])
      : Qupla_merge(input1[717:716], input2[717:716])
      : Qupla_merge(input1[719:718], input2[719:718])
      : Qupla_merge(input1[721:720], input2[721:720])
      : Qupla_merge(input1[723:722], input2[723:722])
      : Qupla_merge(input1[725:724], input2[725:724])
      : Qupla_merge(input1[727:726], input2[727:726])
      : Qupla_merge(input1[729:728], input2[729:728])
      : Qupla_merge(input1[731:730], input2[731:730])
      : Qupla_merge(input1[733:732], input2[733:732])
      : Qupla_merge(input1[735:734], input2[735:734])
      : Qupla_merge(input1[737:736], input2[737:736])
      : Qupla_merge(input1[739:738], input2[739:738])
      : Qupla_merge(input1[741:740], input2[741:740])
      : Qupla_merge(input1[743:742], input2[743:742])
      : Qupla_merge(input1[745:744], input2[745:744])
      : Qupla_merge(input1[747:746], input2[747:746])
      : Qupla_merge(input1[749:748], input2[749:748])
      : Qupla_merge(input1[751:750], input2[751:750])
      : Qupla_merge(input1[753:752], input2[753:752])
      : Qupla_merge(input1[755:754], input2[755:754])
      : Qupla_merge(input1[757:756], input2[757:756])
      : Qupla_merge(input1[759:758], input2[759:758])
      : Qupla_merge(input1[761:760], input2[761:760])
      : Qupla_merge(input1[763:762], input2[763:762])
      : Qupla_merge(input1[765:764], input2[765:764])
      : Qupla_merge(input1[767:766], input2[767:766])
      : Qupla_merge(input1[769:768], input2[769:768])
      : Qupla_merge(input1[771:770], input2[771:770])
      : Qupla_merge(input1[773:772], input2[773:772])
      : Qupla_merge(input1[775:774], input2[775:774])
      : Qupla_merge(input1[777:776], input2[777:776])
      : Qupla_merge(input1[779:778], input2[779:778])
      : Qupla_merge(input1[781:780], input2[781:780])
      : Qupla_merge(input1[783:782], input2[783:782])
      : Qupla_merge(input1[785:784], input2[785:784])
      : Qupla_merge(input1[787:786], input2[787:786])
      : Qupla_merge(input1[789:788], input2[789:788])
      : Qupla_merge(input1[791:790], input2[791:790])
      : Qupla_merge(input1[793:792], input2[793:792])
      : Qupla_merge(input1[795:794], input2[795:794])
      : Qupla_merge(input1[797:796], input2[797:796])
      : Qupla_merge(input1[799:798], input2[799:798])
      : Qupla_merge(input1[801:800], input2[801:800])
      : Qupla_merge(input1[803:802], input2[803:802])
      : Qupla_merge(input1[805:804], input2[805:804])
      : Qupla_merge(input1[807:806], input2[807:806])
      : Qupla_merge(input1[809:808], input2[809:808])
      : Qupla_merge(input1[811:810], input2[811:810])
      : Qupla_merge(input1[813:812], input2[813:812])
      : Qupla_merge(input1[815:814], input2[815:814])
      : Qupla_merge(input1[817:816], input2[817:816])
      : Qupla_merge(input1[819:818], input2[819:818])
      : Qupla_merge(input1[821:820], input2[821:820])
      : Qupla_merge(input1[823:822], input2[823:822])
      : Qupla_merge(input1[825:824], input2[825:824])
      : Qupla_merge(input1[827:826], input2[827:826])
      : Qupla_merge(input1[829:828], input2[829:828])
      : Qupla_merge(input1[831:830], input2[831:830])
      : Qupla_merge(input1[833:832], input2[833:832])
      : Qupla_merge(input1[835:834], input2[835:834])
      : Qupla_merge(input1[837:836], input2[837:836])
      : Qupla_merge(input1[839:838], input2[839:838])
      : Qupla_merge(input1[841:840], input2[841:840])
      : Qupla_merge(input1[843:842], input2[843:842])
      : Qupla_merge(input1[845:844], input2[845:844])
      : Qupla_merge(input1[847:846], input2[847:846])
      : Qupla_merge(input1[849:848], input2[849:848])
      : Qupla_merge(input1[851:850], input2[851:850])
      : Qupla_merge(input1[853:852], input2[853:852])
      : Qupla_merge(input1[855:854], input2[855:854])
      : Qupla_merge(input1[857:856], input2[857:856])
      : Qupla_merge(input1[859:858], input2[859:858])
      : Qupla_merge(input1[861:860], input2[861:860])
      : Qupla_merge(input1[863:862], input2[863:862])
      : Qupla_merge(input1[865:864], input2[865:864])
      : Qupla_merge(input1[867:866], input2[867:866])
      : Qupla_merge(input1[869:868], input2[869:868])
      : Qupla_merge(input1[871:870], input2[871:870])
      : Qupla_merge(input1[873:872], input2[873:872])
      : Qupla_merge(input1[875:874], input2[875:874])
      : Qupla_merge(input1[877:876], input2[877:876])
      : Qupla_merge(input1[879:878], input2[879:878])
      : Qupla_merge(input1[881:880], input2[881:880])
      : Qupla_merge(input1[883:882], input2[883:882])
      : Qupla_merge(input1[885:884], input2[885:884])
      : Qupla_merge(input1[887:886], input2[887:886])
      : Qupla_merge(input1[889:888], input2[889:888])
      : Qupla_merge(input1[891:890], input2[891:890])
      : Qupla_merge(input1[893:892], input2[893:892])
      : Qupla_merge(input1[895:894], input2[895:894])
      : Qupla_merge(input1[897:896], input2[897:896])
      : Qupla_merge(input1[899:898], input2[899:898])
      : Qupla_merge(input1[901:900], input2[901:900])
      : Qupla_merge(input1[903:902], input2[903:902])
      : Qupla_merge(input1[905:904], input2[905:904])
      : Qupla_merge(input1[907:906], input2[907:906])
      : Qupla_merge(input1[909:908], input2[909:908])
      : Qupla_merge(input1[911:910], input2[911:910])
      : Qupla_merge(input1[913:912], input2[913:912])
      : Qupla_merge(input1[915:914], input2[915:914])
      : Qupla_merge(input1[917:916], input2[917:916])
      : Qupla_merge(input1[919:918], input2[919:918])
      : Qupla_merge(input1[921:920], input2[921:920])
      : Qupla_merge(input1[923:922], input2[923:922])
      : Qupla_merge(input1[925:924], input2[925:924])
      : Qupla_merge(input1[927:926], input2[927:926])
      : Qupla_merge(input1[929:928], input2[929:928])
      : Qupla_merge(input1[931:930], input2[931:930])
      : Qupla_merge(input1[933:932], input2[933:932])
      : Qupla_merge(input1[935:934], input2[935:934])
      : Qupla_merge(input1[937:936], input2[937:936])
      : Qupla_merge(input1[939:938], input2[939:938])
      : Qupla_merge(input1[941:940], input2[941:940])
      : Qupla_merge(input1[943:942], input2[943:942])
      : Qupla_merge(input1[945:944], input2[945:944])
      : Qupla_merge(input1[947:946], input2[947:946])
      : Qupla_merge(input1[949:948], input2[949:948])
      : Qupla_merge(input1[951:950], input2[951:950])
      : Qupla_merge(input1[953:952], input2[953:952])
      : Qupla_merge(input1[955:954], input2[955:954])
      : Qupla_merge(input1[957:956], input2[957:956])
      : Qupla_merge(input1[959:958], input2[959:958])
      : Qupla_merge(input1[961:960], input2[961:960])
      : Qupla_merge(input1[963:962], input2[963:962])
      : Qupla_merge(input1[965:964], input2[965:964])
      : Qupla_merge(input1[967:966], input2[967:966])
      : Qupla_merge(input1[969:968], input2[969:968])
      : Qupla_merge(input1[971:970], input2[971:970])
      : Qupla_merge(input1[973:972], input2[973:972])
      : Qupla_merge(input1[975:974], input2[975:974])
      : Qupla_merge(input1[977:976], input2[977:976])
      : Qupla_merge(input1[979:978], input2[979:978])
      : Qupla_merge(input1[981:980], input2[981:980])
      : Qupla_merge(input1[983:982], input2[983:982])
      : Qupla_merge(input1[985:984], input2[985:984])
      : Qupla_merge(input1[987:986], input2[987:986])
      : Qupla_merge(input1[989:988], input2[989:988])
      : Qupla_merge(input1[991:990], input2[991:990])
      : Qupla_merge(input1[993:992], input2[993:992])
      : Qupla_merge(input1[995:994], input2[995:994])
      : Qupla_merge(input1[997:996], input2[997:996])
      : Qupla_merge(input1[999:998], input2[999:998])
      : Qupla_merge(input1[1001:1000], input2[1001:1000])
      : Qupla_merge(input1[1003:1002], input2[1003:1002])
      : Qupla_merge(input1[1005:1004], input2[1005:1004])
      : Qupla_merge(input1[1007:1006], input2[1007:1006])
      : Qupla_merge(input1[1009:1008], input2[1009:1008])
      : Qupla_merge(input1[1011:1010], input2[1011:1010])
      : Qupla_merge(input1[1013:1012], input2[1013:1012])
      : Qupla_merge(input1[1015:1014], input2[1015:1014])
      : Qupla_merge(input1[1017:1016], input2[1017:1016])
      : Qupla_merge(input1[1019:1018], input2[1019:1018])
      : Qupla_merge(input1[1021:1020], input2[1021:1020])
      : Qupla_merge(input1[1023:1022], input2[1023:1022])
      : Qupla_merge(input1[1025:1024], input2[1025:1024])
      : Qupla_merge(input1[1027:1026], input2[1027:1026])
      : Qupla_merge(input1[1029:1028], input2[1029:1028])
      : Qupla_merge(input1[1031:1030], input2[1031:1030])
      : Qupla_merge(input1[1033:1032], input2[1033:1032])
      : Qupla_merge(input1[1035:1034], input2[1035:1034])
      : Qupla_merge(input1[1037:1036], input2[1037:1036])
      : Qupla_merge(input1[1039:1038], input2[1039:1038])
      : Qupla_merge(input1[1041:1040], input2[1041:1040])
      : Qupla_merge(input1[1043:1042], input2[1043:1042])
      : Qupla_merge(input1[1045:1044], input2[1045:1044])
      : Qupla_merge(input1[1047:1046], input2[1047:1046])
      : Qupla_merge(input1[1049:1048], input2[1049:1048])
      : Qupla_merge(input1[1051:1050], input2[1051:1050])
      : Qupla_merge(input1[1053:1052], input2[1053:1052])
      : Qupla_merge(input1[1055:1054], input2[1055:1054])
      : Qupla_merge(input1[1057:1056], input2[1057:1056])
      : Qupla_merge(input1[1059:1058], input2[1059:1058])
      : Qupla_merge(input1[1061:1060], input2[1061:1060])
      : Qupla_merge(input1[1063:1062], input2[1063:1062])
      : Qupla_merge(input1[1065:1064], input2[1065:1064])
      : Qupla_merge(input1[1067:1066], input2[1067:1066])
      : Qupla_merge(input1[1069:1068], input2[1069:1068])
      : Qupla_merge(input1[1071:1070], input2[1071:1070])
      : Qupla_merge(input1[1073:1072], input2[1073:1072])
      : Qupla_merge(input1[1075:1074], input2[1075:1074])
      : Qupla_merge(input1[1077:1076], input2[1077:1076])
      : Qupla_merge(input1[1079:1078], input2[1079:1078])
      : Qupla_merge(input1[1081:1080], input2[1081:1080])
      : Qupla_merge(input1[1083:1082], input2[1083:1082])
      : Qupla_merge(input1[1085:1084], input2[1085:1084])
      : Qupla_merge(input1[1087:1086], input2[1087:1086])
      : Qupla_merge(input1[1089:1088], input2[1089:1088])
      : Qupla_merge(input1[1091:1090], input2[1091:1090])
      : Qupla_merge(input1[1093:1092], input2[1093:1092])
      : Qupla_merge(input1[1095:1094], input2[1095:1094])
      : Qupla_merge(input1[1097:1096], input2[1097:1096])
      : Qupla_merge(input1[1099:1098], input2[1099:1098])
      : Qupla_merge(input1[1101:1100], input2[1101:1100])
      : Qupla_merge(input1[1103:1102], input2[1103:1102])
      : Qupla_merge(input1[1105:1104], input2[1105:1104])
      : Qupla_merge(input1[1107:1106], input2[1107:1106])
      : Qupla_merge(input1[1109:1108], input2[1109:1108])
      : Qupla_merge(input1[1111:1110], input2[1111:1110])
      : Qupla_merge(input1[1113:1112], input2[1113:1112])
      : Qupla_merge(input1[1115:1114], input2[1115:1114])
      : Qupla_merge(input1[1117:1116], input2[1117:1116])
      : Qupla_merge(input1[1119:1118], input2[1119:1118])
      : Qupla_merge(input1[1121:1120], input2[1121:1120])
      : Qupla_merge(input1[1123:1122], input2[1123:1122])
      : Qupla_merge(input1[1125:1124], input2[1125:1124])
      : Qupla_merge(input1[1127:1126], input2[1127:1126])
      : Qupla_merge(input1[1129:1128], input2[1129:1128])
      : Qupla_merge(input1[1131:1130], input2[1131:1130])
      : Qupla_merge(input1[1133:1132], input2[1133:1132])
      : Qupla_merge(input1[1135:1134], input2[1135:1134])
      : Qupla_merge(input1[1137:1136], input2[1137:1136])
      : Qupla_merge(input1[1139:1138], input2[1139:1138])
      : Qupla_merge(input1[1141:1140], input2[1141:1140])
      : Qupla_merge(input1[1143:1142], input2[1143:1142])
      : Qupla_merge(input1[1145:1144], input2[1145:1144])
      : Qupla_merge(input1[1147:1146], input2[1147:1146])
      : Qupla_merge(input1[1149:1148], input2[1149:1148])
      : Qupla_merge(input1[1151:1150], input2[1151:1150])
      : Qupla_merge(input1[1153:1152], input2[1153:1152])
      : Qupla_merge(input1[1155:1154], input2[1155:1154])
      : Qupla_merge(input1[1157:1156], input2[1157:1156])
      : Qupla_merge(input1[1159:1158], input2[1159:1158])
      : Qupla_merge(input1[1161:1160], input2[1161:1160])
      : Qupla_merge(input1[1163:1162], input2[1163:1162])
      : Qupla_merge(input1[1165:1164], input2[1165:1164])
      : Qupla_merge(input1[1167:1166], input2[1167:1166])
      : Qupla_merge(input1[1169:1168], input2[1169:1168])
      : Qupla_merge(input1[1171:1170], input2[1171:1170])
      : Qupla_merge(input1[1173:1172], input2[1173:1172])
      : Qupla_merge(input1[1175:1174], input2[1175:1174])
      : Qupla_merge(input1[1177:1176], input2[1177:1176])
      : Qupla_merge(input1[1179:1178], input2[1179:1178])
      : Qupla_merge(input1[1181:1180], input2[1181:1180])
      : Qupla_merge(input1[1183:1182], input2[1183:1182])
      : Qupla_merge(input1[1185:1184], input2[1185:1184])
      : Qupla_merge(input1[1187:1186], input2[1187:1186])
      : Qupla_merge(input1[1189:1188], input2[1189:1188])
      : Qupla_merge(input1[1191:1190], input2[1191:1190])
      : Qupla_merge(input1[1193:1192], input2[1193:1192])
      : Qupla_merge(input1[1195:1194], input2[1195:1194])
      : Qupla_merge(input1[1197:1196], input2[1197:1196])
      : Qupla_merge(input1[1199:1198], input2[1199:1198])
      : Qupla_merge(input1[1201:1200], input2[1201:1200])
      : Qupla_merge(input1[1203:1202], input2[1203:1202])
      : Qupla_merge(input1[1205:1204], input2[1205:1204])
      : Qupla_merge(input1[1207:1206], input2[1207:1206])
      : Qupla_merge(input1[1209:1208], input2[1209:1208])
      : Qupla_merge(input1[1211:1210], input2[1211:1210])
      : Qupla_merge(input1[1213:1212], input2[1213:1212])
      : Qupla_merge(input1[1215:1214], input2[1215:1214])
      : Qupla_merge(input1[1217:1216], input2[1217:1216])
      : Qupla_merge(input1[1219:1218], input2[1219:1218])
      : Qupla_merge(input1[1221:1220], input2[1221:1220])
      : Qupla_merge(input1[1223:1222], input2[1223:1222])
      : Qupla_merge(input1[1225:1224], input2[1225:1224])
      : Qupla_merge(input1[1227:1226], input2[1227:1226])
      : Qupla_merge(input1[1229:1228], input2[1229:1228])
      : Qupla_merge(input1[1231:1230], input2[1231:1230])
      : Qupla_merge(input1[1233:1232], input2[1233:1232])
      : Qupla_merge(input1[1235:1234], input2[1235:1234])
      : Qupla_merge(input1[1237:1236], input2[1237:1236])
      : Qupla_merge(input1[1239:1238], input2[1239:1238])
      : Qupla_merge(input1[1241:1240], input2[1241:1240])
      : Qupla_merge(input1[1243:1242], input2[1243:1242])
      : Qupla_merge(input1[1245:1244], input2[1245:1244])
      : Qupla_merge(input1[1247:1246], input2[1247:1246])
      : Qupla_merge(input1[1249:1248], input2[1249:1248])
      : Qupla_merge(input1[1251:1250], input2[1251:1250])
      : Qupla_merge(input1[1253:1252], input2[1253:1252])
      : Qupla_merge(input1[1255:1254], input2[1255:1254])
      : Qupla_merge(input1[1257:1256], input2[1257:1256])
      : Qupla_merge(input1[1259:1258], input2[1259:1258])
      : Qupla_merge(input1[1261:1260], input2[1261:1260])
      : Qupla_merge(input1[1263:1262], input2[1263:1262])
      : Qupla_merge(input1[1265:1264], input2[1265:1264])
      : Qupla_merge(input1[1267:1266], input2[1267:1266])
      : Qupla_merge(input1[1269:1268], input2[1269:1268])
      : Qupla_merge(input1[1271:1270], input2[1271:1270])
      : Qupla_merge(input1[1273:1272], input2[1273:1272])
      : Qupla_merge(input1[1275:1274], input2[1275:1274])
      : Qupla_merge(input1[1277:1276], input2[1277:1276])
      : Qupla_merge(input1[1279:1278], input2[1279:1278])
      : Qupla_merge(input1[1281:1280], input2[1281:1280])
      : Qupla_merge(input1[1283:1282], input2[1283:1282])
      : Qupla_merge(input1[1285:1284], input2[1285:1284])
      : Qupla_merge(input1[1287:1286], input2[1287:1286])
      : Qupla_merge(input1[1289:1288], input2[1289:1288])
      : Qupla_merge(input1[1291:1290], input2[1291:1290])
      : Qupla_merge(input1[1293:1292], input2[1293:1292])
      : Qupla_merge(input1[1295:1294], input2[1295:1294])
      : Qupla_merge(input1[1297:1296], input2[1297:1296])
      : Qupla_merge(input1[1299:1298], input2[1299:1298])
      : Qupla_merge(input1[1301:1300], input2[1301:1300])
      : Qupla_merge(input1[1303:1302], input2[1303:1302])
      : Qupla_merge(input1[1305:1304], input2[1305:1304])
      : Qupla_merge(input1[1307:1306], input2[1307:1306])
      : Qupla_merge(input1[1309:1308], input2[1309:1308])
      : Qupla_merge(input1[1311:1310], input2[1311:1310])
      : Qupla_merge(input1[1313:1312], input2[1313:1312])
      : Qupla_merge(input1[1315:1314], input2[1315:1314])
      : Qupla_merge(input1[1317:1316], input2[1317:1316])
      : Qupla_merge(input1[1319:1318], input2[1319:1318])
      : Qupla_merge(input1[1321:1320], input2[1321:1320])
      : Qupla_merge(input1[1323:1322], input2[1323:1322])
      : Qupla_merge(input1[1325:1324], input2[1325:1324])
      : Qupla_merge(input1[1327:1326], input2[1327:1326])
      : Qupla_merge(input1[1329:1328], input2[1329:1328])
      : Qupla_merge(input1[1331:1330], input2[1331:1330])
      : Qupla_merge(input1[1333:1332], input2[1333:1332])
      : Qupla_merge(input1[1335:1334], input2[1335:1334])
      : Qupla_merge(input1[1337:1336], input2[1337:1336])
      : Qupla_merge(input1[1339:1338], input2[1339:1338])
      : Qupla_merge(input1[1341:1340], input2[1341:1340])
      : Qupla_merge(input1[1343:1342], input2[1343:1342])
      : Qupla_merge(input1[1345:1344], input2[1345:1344])
      : Qupla_merge(input1[1347:1346], input2[1347:1346])
      : Qupla_merge(input1[1349:1348], input2[1349:1348])
      : Qupla_merge(input1[1351:1350], input2[1351:1350])
      : Qupla_merge(input1[1353:1352], input2[1353:1352])
      : Qupla_merge(input1[1355:1354], input2[1355:1354])
      : Qupla_merge(input1[1357:1356], input2[1357:1356])
      : Qupla_merge(input1[1359:1358], input2[1359:1358])
      : Qupla_merge(input1[1361:1360], input2[1361:1360])
      : Qupla_merge(input1[1363:1362], input2[1363:1362])
      : Qupla_merge(input1[1365:1364], input2[1365:1364])
      : Qupla_merge(input1[1367:1366], input2[1367:1366])
      : Qupla_merge(input1[1369:1368], input2[1369:1368])
      : Qupla_merge(input1[1371:1370], input2[1371:1370])
      : Qupla_merge(input1[1373:1372], input2[1373:1372])
      : Qupla_merge(input1[1375:1374], input2[1375:1374])
      : Qupla_merge(input1[1377:1376], input2[1377:1376])
      : Qupla_merge(input1[1379:1378], input2[1379:1378])
      : Qupla_merge(input1[1381:1380], input2[1381:1380])
      : Qupla_merge(input1[1383:1382], input2[1383:1382])
      : Qupla_merge(input1[1385:1384], input2[1385:1384])
      : Qupla_merge(input1[1387:1386], input2[1387:1386])
      : Qupla_merge(input1[1389:1388], input2[1389:1388])
      : Qupla_merge(input1[1391:1390], input2[1391:1390])
      : Qupla_merge(input1[1393:1392], input2[1393:1392])
      : Qupla_merge(input1[1395:1394], input2[1395:1394])
      : Qupla_merge(input1[1397:1396], input2[1397:1396])
      : Qupla_merge(input1[1399:1398], input2[1399:1398])
      : Qupla_merge(input1[1401:1400], input2[1401:1400])
      : Qupla_merge(input1[1403:1402], input2[1403:1402])
      : Qupla_merge(input1[1405:1404], input2[1405:1404])
      : Qupla_merge(input1[1407:1406], input2[1407:1406])
      : Qupla_merge(input1[1409:1408], input2[1409:1408])
      : Qupla_merge(input1[1411:1410], input2[1411:1410])
      : Qupla_merge(input1[1413:1412], input2[1413:1412])
      : Qupla_merge(input1[1415:1414], input2[1415:1414])
      : Qupla_merge(input1[1417:1416], input2[1417:1416])
      : Qupla_merge(input1[1419:1418], input2[1419:1418])
      : Qupla_merge(input1[1421:1420], input2[1421:1420])
      : Qupla_merge(input1[1423:1422], input2[1423:1422])
      : Qupla_merge(input1[1425:1424], input2[1425:1424])
      : Qupla_merge(input1[1427:1426], input2[1427:1426])
      : Qupla_merge(input1[1429:1428], input2[1429:1428])
      : Qupla_merge(input1[1431:1430], input2[1431:1430])
      : Qupla_merge(input1[1433:1432], input2[1433:1432])
      : Qupla_merge(input1[1435:1434], input2[1435:1434])
      : Qupla_merge(input1[1437:1436], input2[1437:1436])
      : Qupla_merge(input1[1439:1438], input2[1439:1438])
      : Qupla_merge(input1[1441:1440], input2[1441:1440])
      : Qupla_merge(input1[1443:1442], input2[1443:1442])
      : Qupla_merge(input1[1445:1444], input2[1445:1444])
      : Qupla_merge(input1[1447:1446], input2[1447:1446])
      : Qupla_merge(input1[1449:1448], input2[1449:1448])
      : Qupla_merge(input1[1451:1450], input2[1451:1450])
      : Qupla_merge(input1[1453:1452], input2[1453:1452])
      : Qupla_merge(input1[1455:1454], input2[1455:1454])
      : Qupla_merge(input1[1457:1456], input2[1457:1456])
    };
  end
endfunction

function [53:0] Qupla_merge_27(
    input [53:0] input1
  , input [53:0] input2
  );
  begin
    Qupla_merge_27 = {
      Qupla_merge(input1[1:0], input2[1:0])
      : Qupla_merge(input1[3:2], input2[3:2])
      : Qupla_merge(input1[5:4], input2[5:4])
      : Qupla_merge(input1[7:6], input2[7:6])
      : Qupla_merge(input1[9:8], input2[9:8])
      : Qupla_merge(input1[11:10], input2[11:10])
      : Qupla_merge(input1[13:12], input2[13:12])
      : Qupla_merge(input1[15:14], input2[15:14])
      : Qupla_merge(input1[17:16], input2[17:16])
      : Qupla_merge(input1[19:18], input2[19:18])
      : Qupla_merge(input1[21:20], input2[21:20])
      : Qupla_merge(input1[23:22], input2[23:22])
      : Qupla_merge(input1[25:24], input2[25:24])
      : Qupla_merge(input1[27:26], input2[27:26])
      : Qupla_merge(input1[29:28], input2[29:28])
      : Qupla_merge(input1[31:30], input2[31:30])
      : Qupla_merge(input1[33:32], input2[33:32])
      : Qupla_merge(input1[35:34], input2[35:34])
      : Qupla_merge(input1[37:36], input2[37:36])
      : Qupla_merge(input1[39:38], input2[39:38])
      : Qupla_merge(input1[41:40], input2[41:40])
      : Qupla_merge(input1[43:42], input2[43:42])
      : Qupla_merge(input1[45:44], input2[45:44])
      : Qupla_merge(input1[47:46], input2[47:46])
      : Qupla_merge(input1[49:48], input2[49:48])
      : Qupla_merge(input1[51:50], input2[51:50])
      : Qupla_merge(input1[53:52], input2[53:52])
    };
  end
endfunction
